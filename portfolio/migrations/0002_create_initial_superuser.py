# Generated by Django 5.2 on 2025-05-11 15:04
from django.db import migrations
from django.contrib.auth.management import create_permissions # For ensuring permissions exist
import os

def create_superuser(apps, schema_editor):
    """
    Creates a superuser using credentials from environment variables.
    Skips creation if variables are not set or if the user already exists.
    """
    User = apps.get_model('auth', 'User') # Get the User model
    db_alias = schema_editor.connection.alias

    # Get credentials from environment variables
    username = os.environ.get('DJANGO_SUPERUSER_USERNAME')
    email = os.environ.get('DJANGO_SUPERUSER_EMAIL')
    password = os.environ.get('DJANGO_SUPERUSER_PASSWORD')

    if not all([username, email, password]):
        print("\nINFO: Superuser environment variables (DJANGO_SUPERUSER_USERNAME, "
              "DJANGO_SUPERUSER_EMAIL, DJANGO_SUPERUSER_PASSWORD) are not all set. "
              "Skipping automatic superuser creation by migration.")
        return

    if User.objects.using(db_alias).filter(username=username).exists():
        print(f"\nINFO: Superuser '{username}' already exists. Skipping creation by migration.")
        return

    print(f"\nCreating superuser '{username}'...")
    User.objects.create_superuser(username=username, email=email, password=password)
    print(f"Superuser '{username}' created successfully by migration.")

def remove_superuser(apps, schema_editor):
    """
    Optional: Defines what to do if the migration is reversed.
    Generally, for a create_superuser migration, you might not want to automatically
    delete the user on rollback, or you might want to make it conditional.
    For simplicity, this can be a no-op or raise IrreversibleError.
    """
    # To make it a no-op (superuser won't be deleted on rollback):
    # print("\nINFO: Rolling back create_initial_superuser migration. The superuser will not be automatically deleted.")
    # pass

    # Or, to make it truly irreversible if you don't want to define deletion logic:
    raise migrations.IrreversibleError(
        "The create_initial_superuser migration cannot be reliably reversed "
        "without potentially deleting a user that might be in use."
    )
    # If you did want to delete:
    # User = apps.get_model('auth', 'User')
    # db_alias = schema_editor.connection.alias
    # username = os.environ.get('DJANGO_SUPERUSER_USERNAME')
    # if username:
    #     User.objects.using(db_alias).filter(username=username).delete()
    #     print(f"\nINFO: Superuser '{username}' deleted during migration rollback (if it existed).")


class Migration(migrations.Migration):

    # --- IMPORTANT: Set Dependencies Correctly ---
    # This migration should depend on:
    # 1. The last migration of the 'auth' app (to ensure User model is created).
    # 2. If you have a custom user model, depend on its last migration.
    # 3. The last migration of the app where THIS migration file resides.
    #
    # To find the last migration of an app (e.g., 'auth'):
    # python manage.py showmigrations auth
    # Look for the last one (e.g., 0012_alter_user_first_name_max_length)
    #
    # To find the last migration of *this* app (e.g., 'portfolio'):
    # python manage.py showmigrations portfolio
    # If this is 0004_create_initial_superuser, the previous one would be 0003_...

    dependencies = [
        # Example: Replace '0012_alter_user_first_name_max_length' with the actual
        # last migration of your 'auth' app.
        ('auth', '0012_alter_user_first_name_max_length'),

        # Replace 'portfolio' and '0003_previous_migration_in_portfolio'
        # with the app name where this migration lives and its previous migration.
        # If this is the *first* migration in this app, you might only need the 'auth' dependency.
        ('portfolio', '0001_initial'), # Replace with your actual previous migration
    ]

    operations = [
        # Ensure all auth permissions are created *before* trying to create a superuser
        # This is especially important if you're setting up a fresh database.
        #migrations.RunPython(lambda apps, schema_editor: create_permissions(apps.get_app_config('auth'), verbosity=0)),
        migrations.RunPython(create_superuser, reverse_code=remove_superuser),
    ]
