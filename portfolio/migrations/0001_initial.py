# Generated by Django 5.2.1 on 2025-05-14 08:29

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('skills', '0001_initial'),
        ('topics', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('issuer', models.CharField(max_length=150)),
                ('date_issued', models.DateField(blank=True, null=True)),
                ('certificate_file', models.FileField(blank=True, null=True, upload_to='certificate_files/')),
                ('logo_image', models.ImageField(blank=True, help_text='Upload a logo image for the issuer or certificate (optional).', null=True, upload_to='certificate_logos/')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order for display (e.g., 0 for most recent/important).')),
            ],
            options={
                'ordering': ['order', '-date_issued'],
            },
        ),
        migrations.CreateModel(
            name='ColophonEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the technology, tool, or resource.', max_length=100)),
                ('category', models.CharField(choices=[('backend', 'Backend Technologies'), ('frontend', 'Frontend Technologies'), ('database', 'Database'), ('deployment', 'Deployment & Hosting'), ('devops', 'DevOps & Tools'), ('design', 'Design & Assets'), ('learning', 'Key Learning Resources'), ('inspiration', 'Inspiration & APIs')], help_text='Category for grouping.', max_length=20)),
                ('description', models.TextField(blank=True, help_text="Briefly why/how it's used or what you learned.")),
                ('url', models.URLField(blank=True, help_text='Link to the official website or resource.', null=True)),
                ('icon_class', models.CharField(blank=True, help_text="Optional: Font Awesome class or similar for an icon (e.g., 'fab fa-python').", max_length=50, null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order within its category for display.')),
            ],
            options={
                'verbose_name': 'Colophon Entry',
                'verbose_name_plural': 'Colophon Entries',
                'ordering': ['category', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(default='Julian Stone', max_length=100)),
                ('tagline', models.CharField(blank=True, help_text='e.g., Web Developer & Data Science Enthusiast', max_length=255)),
                ('location', models.CharField(blank=True, help_text='e.g., Stoke-on-Trent, England', max_length=100)),
                ('email', models.EmailField(blank=True, max_length=255)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('short_bio_html', models.TextField(blank=True, help_text='Short introduction for homepage (can include HTML).')),
                ('about_me_markdown', models.TextField(blank=True, help_text="Longer 'About Me' content in Markdown for the about page.")),
                ('profile_picture_url', models.URLField(blank=True, help_text='URL to your profile picture.', max_length=255, null=True)),
                ('linkedin_url', models.URLField(blank=True, max_length=255)),
                ('github_url', models.URLField(blank=True, max_length=255)),
                ('personal_website_url', models.URLField(blank=True, help_text='If different from this portfolio.', max_length=255)),
                ('cv_url', models.URLField(blank=True, help_text='Direct link to your CV PDF if hosted online.', max_length=255, null=True)),
                ('default_meta_description', models.CharField(blank=True, max_length=160)),
                ('default_meta_keywords', models.CharField(blank=True, help_text='Comma-separated keywords.', max_length=255)),
                ('site_identifier', models.CharField(default='main_profile', editable=False, max_length=50, unique=True)),
                ('about_me_intro_markdown', models.TextField(blank=True, help_text='Introduction paragraph for the About Me page (Markdown format).', null=True)),
                ('about_me_journey_markdown', models.TextField(blank=True, help_text="Content for the 'My Journey & Experience' section (Markdown format).", null=True)),
                ('about_me_expertise_markdown', models.TextField(blank=True, help_text="Content for the 'Areas of Expertise' section (Markdown format).", null=True)),
                ('about_me_philosophy_markdown', models.TextField(blank=True, help_text="Content for the 'Philosophy & Approach' section (Markdown format).", null=True)),
                ('about_me_beyond_work_markdown', models.TextField(blank=True, help_text="Content for the 'Beyond Work' section (Markdown format).", null=True)),
                ('hire_me_intro_markdown', models.TextField(blank=True, help_text='Introduction paragraph for the Hire Me page (Markdown format).', null=True)),
                ('hire_me_seeking_markdown', models.TextField(blank=True, help_text="Content for the 'What I'm Seeking' section (Markdown format).", null=True)),
                ('hire_me_strengths_markdown', models.TextField(blank=True, help_text="Content for the 'My Key Strengths' section (Markdown format).", null=True)),
                ('hire_me_availability_markdown', models.TextField(blank=True, help_text="Content for the 'Current Availability' section (Markdown format).", null=True)),
                ('skills_overview_ml_markdown', models.TextField(blank=True, help_text="Content for the 'Deep Learning & ML Libraries' card on the index page (Markdown list format).", null=True)),
                ('skills_overview_datasci_markdown', models.TextField(blank=True, help_text="Content for the 'Python & Data Science' card on the index page (Markdown list format).", null=True)),
                ('skills_overview_general_markdown', models.TextField(blank=True, help_text="Content for the 'General IT & Other Skills' card on the index page (Markdown list format).", null=True)),
                ('privacy_policy_markdown', models.TextField(blank=True, help_text='Content for the Privacy Policy page (Markdown format).', null=True)),
                ('terms_conditions_markdown', models.TextField(blank=True, help_text='Content for the Terms & Conditions page (Markdown format).', null=True)),
                ('accessibility_statement_markdown', models.TextField(blank=True, help_text='Content for the Accessibility Statement page (Markdown format).', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the project.', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the title (auto-generated if blank).', max_length=250, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the project.')),
                ('image_url', models.URLField(blank=True, help_text="URL for the project's main image or GIF.", max_length=500, null=True)),
                ('results_metrics', models.TextField(blank=True, help_text='Specific results, metrics, or outcomes achieved.')),
                ('challenges', models.TextField(blank=True, help_text='Key challenges faced during the project.')),
                ('lessons_learned', models.TextField(blank=True, help_text='Important takeaways or lessons learned.')),
                ('code_snippet', models.TextField(blank=True, help_text='An interesting code snippet related to the project.')),
                ('code_language', models.CharField(blank=True, default='python', help_text='Language for syntax highlighting of the code snippet.', max_length=50)),
                ('long_description_markdown', models.TextField(blank=True, help_text='Detailed project description in Markdown for the project detail page.', null=True)),
                ('technologies', models.CharField(blank=True, help_text='DEPRECATED: Use Skills field instead. Comma-separated list of technologies used.', max_length=300)),
                ('github_url', models.URLField(blank=True, help_text="Link to the project's GitHub repository.", max_length=300, null=True)),
                ('demo_url', models.URLField(blank=True, help_text='Link to a live demo of the project.', max_length=300, null=True)),
                ('paper_url', models.URLField(blank=True, help_text='Link to a research paper or article about the project.', max_length=300, null=True)),
                ('is_featured', models.BooleanField(default=False, help_text='determine if project is loaded on the home page')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order for display (lower numbers show first).')),
                ('date_created', models.DateField(default=django.utils.timezone.now, help_text='The date the project was created or started.')),
                ('skills', models.ManyToManyField(blank=True, related_name='projects', to='skills.skill')),
                ('topics', models.ManyToManyField(blank=True, related_name='projects', to='topics.projecttopic')),
            ],
            options={
                'ordering': ['order', '-date_created'],
            },
        ),
    ]
