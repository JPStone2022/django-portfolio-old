demo_slug,page_title_csv,meta_description_csv,meta_keywords_csv,section_order,section_title,section_content_markdown,code_language,code_snippet_title,code_snippet,code_snippet_explanation
flask-api-demo,Flask for Machine Learning APIs,"Learn how Flask, a Python microframework, is used for creating simple Machine Learning APIs. Includes a conceptual code example.","Flask, API, machine learning, Python, web framework, deployment, microservice",0,Introduction & Why Flask for ML APIs?,"While this portfolio is built with Django, another popular Python web framework, **Flask**, is often used for creating simple APIs, especially for serving machine learning models. This page demonstrates the concept.

### Why Flask for ML APIs?
* **Microframework**: Flask is lightweight and provides just the essentials for web development, making it quick to get started for simple tasks like an API endpoint.
* **Flexibility**: It doesn't impose a strict project structure like Django, giving developers more freedom (which can be good or bad depending on the project scale).
* **Simplicity**: Creating a basic API endpoint often requires less boilerplate code compared to Django.",,,,
flask-api-demo,,,,1,Example: Simple Prediction API,"Imagine you have a trained Scikit-learn model (saved, perhaps using `joblib`) that predicts Iris species based on petal measurements. Here's how a basic Flask API endpoint for it might look:",python,Illustrative Flask Code (`app.py`):,"# Example app.py (Conceptual - Requires Flask, joblib, scikit-learn installed)
# --- Imports ---
from flask import Flask, request, jsonify
import joblib
import numpy as np
import os # For robust path handling

# --- App Initialization ---
app = Flask(__name__)

# --- Load Model (Load once on startup) ---
MODEL_DIR = os.path.dirname(os.path.abspath(__file__)) # Gets directory of current file
MODEL_PATH = os.path.join(MODEL_DIR, 'iris_model.pkl') # Path to the model file

try:
    # Assumes model was saved using joblib.dump(model, 'iris_model.pkl') in the same directory as app.py
    model = joblib.load(MODEL_PATH)
    # Define expected feature names and target names (replace with actual if different)
    # These should match the features and target classes the model was trained on.
    feature_names = ['petal length (cm)', 'petal width (cm)'] # Example: model trained on only these 2 features
    target_names = ['setosa', 'versicolor', 'virginica'] # Iris species
    print(f""""Model loaded successfully from {MODEL_PATH}."""")
except FileNotFoundError:
    print(f""""Error: Model file '{MODEL_PATH}' not found. Please ensure it's in the correct location."""")
    model = None
except Exception as e:
    print(f""""Error loading model from {MODEL_PATH}: {e}"""")
    model = None


# --- API Endpoint ---
@app.route('/predict', methods=['POST'])
def predict_iris():
    if not model:
        return jsonify({'error': 'Model is not loaded or failed to load. Check server logs.'}), 500

    try:
        # Get JSON data from the request
        data = request.get_json()
        if not data:
            return jsonify({'error': 'No input data provided. Request body must be JSON.'}), 400

        # Extract features (ensure order matches model training and feature_names)
        # Robust extraction with validation for missing keys or incorrect types
        input_features = []
        # For this example, we assume the API expects 'petal_length' and 'petal_width'
        # In a real app, you might iterate through `feature_names` if the API is more generic.
        if 'petal_length' not in data or 'petal_width' not in data:
            return jsonify({'error': 'Missing """"petal_length"""" or """"petal_width"""" in input data.'}), 400

        petal_length = float(data['petal_length']) # Convert to float, will raise ValueError if not possible
        petal_width = float(data['petal_width'])   # Convert to float
        
        # Ensure features are in the correct order expected by the model
        # This example hardcodes the order based on the example feature_names
        features_array = np.array([[petal_length, petal_width]])

        # Make prediction
        prediction_idx = model.predict(features_array)[0]
        predicted_species = target_names[int(prediction_idx)] # Ensure index is int

        # Get probabilities (optional, but good for XAI)
        probabilities = model.predict_proba(features_array)[0]
        proba_dict = {name: round(prob * 100, 2) for name, prob in zip(target_names, probabilities)} # Use 2 decimal places for prob

        # Return JSON response
        return jsonify({
            'input_features': {'petal_length': petal_length, 'petal_width': petal_width},
            'prediction': predicted_species,
            'probabilities': proba_dict
        })

    except KeyError as e:
        # This might be redundant if specific checks like 'petal_length' in data are done above.
        return jsonify({'error': f'Missing feature in input data: {str(e)}'}), 400
    except ValueError as e:
         # Handles errors from float() conversion if data is not a valid number string.
         return jsonify({'error': f'Invalid input data type. Features must be numeric. Error: {str(e)}'}), 400
    except Exception as e:
        # Catch-all for other unexpected errors during prediction.
        app.logger.error(f""""Prediction error: {e}"""", exc_info=True) # Log the full exception for debugging
        return jsonify({'error': 'An unexpected error occurred during prediction. Please check server logs.'}), 500


# --- Run the App (for local testing) ---
if __name__ == '__main__':
    # Note: For production, use a dedicated WSGI server like Gunicorn or Waitress.
    # Example: gunicorn --bind 0.0.0.0:5000 app:app
    # The host '0.0.0.0' makes the server accessible externally (be careful in development).
    app.run(host='0.0.0.0', port=5000, debug=True) # debug=True ONLY for development.
                                                 # Consider using `FLASK_ENV=development` and `FLASK_DEBUG=1` environment variables.
","This code outlines a simple Flask application with an endpoint to predict Iris species. It includes model loading, request handling, prediction, and error management."
flask-api-demo,,,,2,How it Works (Conceptual),"* **Imports**: Import Flask, `request` (to access incoming data), `jsonify` (to create JSON responses), and libraries for loading/using the model (`joblib`, `numpy`). `os` is used for robust file path handling.
* **App Initialization**: `app = Flask(__name__)` creates the Flask application instance.
* **Model Loading**: The pre-trained model (`iris_model.pkl`) is loaded once when the application starts. The path is constructed dynamically to be relative to the `app.py` file's location. Error handling is included for scenarios where the model file is missing or fails to load.
* **API Endpoint (`@app.route`)**: The `@app.route('/predict', methods=['POST'])` decorator defines a URL route (`/predict`) that only accepts POST requests.
* **Request Handling**: Inside the `predict_iris` function:
    * `request.get_json()` retrieves data sent in the request body (expected to be JSON).
    * Input features are extracted, validated for presence and type (converted to `float`), and then arranged into a NumPy array in the order the model expects.
    * `model.predict()` makes the prediction, and `model.predict_proba()` gets the class probabilities.
    * `jsonify({...})` creates a JSON response containing the input features, prediction, and probabilities.
* **Error Handling**: Comprehensive `try...except` blocks handle potential issues like a non-loaded model, missing or malformed input data, incorrect data types, and other exceptions during prediction, returning informative JSON error messages and appropriate HTTP status codes.
* **Running**: `app.run(debug=True)` starts Flask's built-in development server. The example includes a note about using a production-grade WSGI server (like Gunicorn) for deployment.

This simple structure allows external applications or front-ends to send feature data (e.g., petal length and width) to the `/predict` endpoint and receive the model's prediction for the Iris species back in a standard JSON format. While Django can certainly build more complex APIs, Flask's minimal nature often makes it a faster choice for creating these kinds of focused prediction microservices.",,,,
ai-concepts-demo,Artificial Intelligence Concepts,"An overview of Artificial Intelligence (AI), its relationship with Machine Learning and Deep Learning, key subfields, and core concepts.","Artificial Intelligence, AI, Machine Learning, ML, Deep Learning, DL, NLP, Computer Vision, Robotics, AI Concepts",0,Understanding Artificial Intelligence (AI),"**Artificial Intelligence (AI)** is a broad field of computer science focused on creating systems capable of performing tasks that typically require human intelligence. This includes abilities like learning, reasoning, problem-solving, perception, and language understanding. AI encompasses various subfields and techniques, with Machine Learning and Deep Learning being prominent components.",,,,
ai-concepts-demo,,,,1,1. Defining AI: Broad vs. Narrow,"AI can be broadly categorized:
* **Artificial Narrow Intelligence (ANI) / Weak AI**: This is the type of AI we have today. These systems are designed and trained for a specific task (e.g., image recognition, playing chess, language translation, virtual assistants like Siri or Alexa). While they can perform their specific task extremely well, sometimes exceeding human capabilities, they lack general cognitive abilities.
* **Artificial General Intelligence (AGI) / Strong AI**: This refers to hypothetical AI with the ability to understand, learn, and apply knowledge across a wide range of tasks at a human level. AGI would possess consciousness, self-awareness, and the ability to solve complex problems it wasn't explicitly trained for. This remains largely theoretical and is a long-term research goal.
* **Artificial Superintelligence (ASI)**: Hypothetical AI that surpasses human intelligence and cognitive abilities across virtually all domains.

**Focus Today**: Current practical AI development focuses almost exclusively on ANI.",,,,
ai-concepts-demo,,,,2,2. AI vs. Machine Learning vs. Deep Learning,"These terms are often used interchangeably, but they have distinct meanings:
* **Artificial Intelligence (AI)**: The broadest concept � any technique enabling computers to mimic human intelligence (includes logic, rules-based systems, optimization, and ML/DL).
* **Machine Learning (ML)**: A subset of AI. ML focuses on algorithms that allow systems to learn patterns and make predictions from data *without being explicitly programmed* for the task. Instead of rules, ML models learn from examples. (Examples: Linear Regression, Decision Trees, Support Vector Machines).
* **Deep Learning (DL)**: A subset of ML. DL uses artificial neural networks with multiple layers (deep architectures) to learn complex patterns and representations directly from large amounts of data. It has driven recent breakthroughs in areas like computer vision and NLP. (Examples: Convolutional Neural Networks (CNNs), Recurrent Neural Networks (RNNs), Transformers).

Think of them as nested concepts: DL is a type of ML, which is a type of AI.",,,,
ai-concepts-demo,,,,3,3. Key Subfields & Applications,"AI encompasses many specialized areas:
* **Machine Learning**: Developing algorithms that learn from data (Supervised, Unsupervised, Reinforcement Learning).
* **Natural Language Processing (NLP)**: Enabling computers to understand, interpret, and generate human language (e.g., machine translation, sentiment analysis, chatbots, text summarization).
* **Computer Vision**: Enabling computers to ""see"" and interpret visual information from images or videos (e.g., image recognition, object detection, facial recognition, autonomous driving).
* **Robotics**: Designing and building robots that can perceive, reason, and act in the physical world. Often combines AI for perception and decision-making with physical actuation.
* **Expert Systems**: AI systems designed to emulate the decision-making ability of a human expert in a specific domain (often based on rule-based systems or knowledge graphs).
* **Speech Recognition**: Converting spoken language into text (used in virtual assistants, dictation software).
* **Planning & Scheduling**: Developing algorithms to find optimal sequences of actions to achieve goals (e.g., logistics, autonomous navigation).
* **Generative AI**: Creating AI models that can generate new content (text, images, music, code) based on patterns learned from training data (e.g., GPT models, Stable Diffusion).",,,,
ai-concepts-demo,,,,4,4. Core Capabilities Mimicked by AI,"AI systems attempt to replicate various aspects of human intelligence:
* **Learning**: Acquiring knowledge or skills from data or experience (core of ML/DL).
* **Reasoning**: Drawing logical conclusions or inferences based on available information (used in expert systems, planning).
* **Problem Solving**: Finding solutions to specific problems, often involving search algorithms or optimization techniques.
* **Perception**: Interpreting sensory input like vision, sound, and language (Computer Vision, Speech Recognition, NLP).
* **Knowledge Representation**: Storing and organizing information in a way that computers can use for reasoning (e.g., ontologies, knowledge graphs).
* **Planning**: Devising a sequence of actions to achieve a goal.",,,,
ai-concepts-demo,,,,5,5. Ethical Considerations in AI,"As AI becomes more powerful and integrated into society, considering its ethical implications is crucial:
* **Bias and Fairness**: AI models trained on biased data can perpetuate or even amplify societal biases, leading to unfair outcomes.
* **Transparency and Explainability (XAI)**: Understanding why an AI model makes a particular decision is important for trust, debugging, and accountability, especially in high-stakes domains (like healthcare or finance).
* **Privacy**: AI systems often require large amounts of data, raising concerns about data collection, usage, and potential breaches.
* **Accountability**: Determining responsibility when an AI system causes harm or makes incorrect decisions.
* **Security**: Protecting AI systems from malicious attacks (e.g., adversarial attacks, data poisoning).
* **Impact on Employment**: Potential displacement of jobs due to automation by AI systems.
* **Misinformation**: The use of generative AI to create realistic fake content (deepfakes, fake news).

Responsible AI development requires careful consideration of these issues throughout the entire lifecycle.",,,,
ai-concepts-demo,,,,6,Conclusion,"Artificial Intelligence is a transformative field with the potential to revolutionize many aspects of our lives. While often associated specifically with Machine Learning and Deep Learning, AI encompasses a broader range of techniques aimed at replicating human cognitive abilities.

Understanding the core concepts, subfields, capabilities, and ethical considerations of AI is essential for anyone working in or interacting with this rapidly evolving domain.",,,,
ai-tools-demo,AI Tools in Development,"Exploring the benefits and pitfalls of using AI code assistants like Copilot and ChatGPT in ML/DS development, emphasizing responsible use.","AI tools, LLM, Copilot, ChatGPT, code assistant, machine learning, data science, development practices, AI ethics",0,Navigating AI Tools in Development,"AI tools like Large Language Models (LLMs) and code assistants (e.g., GitHub Copilot, ChatGPT, Google Gemini Code Assist) are rapidly changing development workflows. They offer significant potential for acceleration but also introduce risks, requiring careful consideration based on user experience and task complexity.",,,,
ai-tools-demo,,,,1,Productivity Boost for the Experienced,"For experienced data scientists, ML engineers, and developers, AI tools act as powerful **co-pilots and accelerators**:
* **Boilerplate & Scaffolding**: Rapidly generate setup code, standard functions (data loading, plotting, API endpoints), class structures, or configuration files.
* **Debugging & Refactoring**: Explain complex error messages, suggest fixes for tricky bugs, refactor code for clarity or performance, or add error handling.
* **Learning & Exploration**: Quickly understand new libraries, frameworks, or algorithms by asking for explanations or example implementations. Explore alternative approaches.
* **Documentation & Comments**: Generate docstrings following standard formats (like Google or NumPy style), write explanatory comments, or draft basic README sections.
* **Unit Test Generation**: Suggest relevant test cases or generate basic unit test structures (e.g., using `unittest` or `pytest`).
* **Code Translation/Modernization**: Assist in translating code snippets between languages (e.g., R to Python, SQL to Pandas) or updating older code to use modern library features.
* **Query Generation**: Draft SQL queries, Pandas/PySpark operations, or API calls based on natural language descriptions.

**Key**: The experienced user can quickly **verify** the correctness, **debug** subtle issues, **adapt** the output to specific contexts, and **integrate** it effectively, leveraging their foundational knowledge.",python,Illustrative Scenario:,"# User Prompt (Experienced Dev):
# ""Write a Python function using Pandas to load a CSV,
# fill missing 'age' values with the column median,
# and one-hot encode the 'category' column, returning the modified DataFrame.""

# AI Output (Example):
import pandas as pd

def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
    """"""Loads data, fills missing age with median, and OHE category.""""""
    df_processed = df.copy() # Work on a copy
    if 'age' in df_processed.columns and df_processed['age'].isnull().any():
        if pd.api.types.is_numeric_dtype(df_processed['age']):
            median_age = df_processed['age'].median()
            df_processed['age'].fillna(median_age, inplace=True)
        else:
            # Handle non-numeric age column if necessary (e.g., log warning)
            print(""Warning: 'age' column is not numeric, cannot fill with median."")
    if 'category' in df_processed.columns:
        # Ensure category is treated as categorical type for robustness
        df_processed['category'] = df_processed['category'].astype('category')
        df_processed = pd.get_dummies(df_processed, columns=['category'], prefix='cat', drop_first=True)
    return df_processed","Experienced Dev Review: Verifies copy is made, checks numeric type for median, considers edge cases (all missing?), adapts column names if needed, confirms drop_first logic."
ai-tools-demo,,,,2,Potential Pitfalls for the Inexperienced,"Without a solid understanding of underlying programming concepts, algorithms, and security principles, relying heavily on AI tools can be detrimental:
* **Subtle Bugs & ""Hallucinations""**: AI can generate code that looks correct superficially but contains hidden logical flaws, incorrect assumptions (e.g., about data distribution), off-by-one errors, or race conditions.
* **Security Vulnerabilities**: Generated code might introduce vulnerabilities like SQL injection, cross-site scripting (XSS), improper handling of secrets, or insecure library usage if the user cannot identify these risks.
* **Impeded Learning**: Blindly copy-pasting without understanding the ""why"" prevents true skill development and makes debugging, modification, or extension nearly impossible later.
* **Reinforcing Bad Practices**: AI models trained on vast datasets might reproduce inefficient algorithms, unidiomatic code, outdated library usage, or poor architectural patterns.
* **Over-Reliance & Skill Atrophy**: Excessive dependence can hinder the development of fundamental problem-solving, algorithmic thinking, and debugging skills.
* **Data Privacy/IP Risks**: Pasting sensitive data, proprietary algorithms, or company-specific code into external, cloud-based AI tools can lead to data breaches or intellectual property leakage. Check tool policies carefully.
* **Bias Amplification**: AI tools can sometimes generate code or suggest approaches that reflect biases present in their training data.

**Key**: The inexperienced user may **lack the critical evaluation skills** needed to identify flaws, security risks, or inefficiencies in the AI's output, potentially leading to technical debt or outright system failure.",sql,Illustrative Scenario:,"-- User Prompt (Beginner):
-- ""Get user info from database based on username from website form""

-- AI Output (Potential Bad Example - Vulnerable):
-- (Might generate code using raw SQL with direct string formatting)
-- Assume user_input = ""admin' OR '1'='1""
-- query = f""SELECT * FROM users WHERE name = '{user_input}'""
-- This becomes: SELECT * FROM users WHERE name = 'admin' OR '1'='1'
-- The database returns ALL users!",Beginner Review: "It works when I type my name!" - doesn't recognize the SQL injection risk. Experienced Dev Review: Immediately flags the vulnerability and replaces it with parameterized queries or ORM usage.
ai-tools-demo,,,,3,Responsible Use & Best Practices,"To harness the benefits while mitigating risks, consider these practices:
* **Treat AI as a Tool, Not an Oracle**: Use it to augment your skills, not replace critical thinking.
* **Always Verify & Test**: Rigorously test AI-generated code for correctness, edge cases, performance, and security. Never trust it blindly.
* **Understand the Output**: Don't use code you don't understand. Ask the AI to explain it or research the concepts yourself.
* **Focus on Fundamentals**: Continue strengthening your core programming, algorithmic, and domain knowledge.
* **Be Mindful of Context**: AI suggestions might lack awareness of your project's specific architecture, constraints, or existing codebase. Adapt accordingly.
* **Check for Security**: Be especially critical of code involving user input, database queries, file handling, or authentication. Use secure practices like parameterized queries/ORMs.
* **Protect Sensitive Data**: Avoid pasting proprietary code, sensitive data, or API keys into public or untrusted AI tools. Use enterprise versions or local models where appropriate.
* **Attribute When Necessary**: If using significant generated portions in open-source projects or documentation, consider acknowledging the AI tool's assistance.

Effective use involves a cycle of prompting, evaluating, refining, testing, and integrating, guided by human expertise.",,,,
data-engineering-demo,Data Engineering Concepts,"Learn about Data Engineering principles, practices, tools, and its crucial role in supporting Data Science and Machine Learning.","Data Engineering, ETL, ELT, Data Warehouse, Data Lake, Data Pipeline, Big Data, Spark, Airflow, SQL, Python",0,Understanding Data Engineering,"**Data Engineering** is the discipline focused on the practical applications of data collection and processing. It involves designing, building, and maintaining the systems and infrastructure that allow organizations to collect, store, process, and analyze large volumes of data efficiently and reliably. It forms the foundation upon which Data Science and Machine Learning activities are built.",,,,
data-engineering-demo,,,,1,1. What is Data Engineering? Core Goals,"Data Engineers focus on making data available, reliable, and usable for others (like Data Analysts, Data Scientists, and ML Engineers). Key goals include:
* **Data Availability & Accessibility**: Ensuring data from various sources (databases, APIs, logs, streams) is collected and made accessible in a central location.
* **Reliability & Quality**: Building robust pipelines that handle errors, ensure data consistency, validate data quality, and meet Service Level Agreements (SLAs).
* **Scalability & Performance**: Designing systems that can handle growing data volumes and processing demands efficiently.
* **Security & Governance**: Implementing measures to protect data privacy, ensure compliance, and manage data access controls.
* **Efficiency**: Optimizing data storage and computation costs.

**In essence**: Data Engineers build and maintain the data highways and factories, ensuring the raw materials (data) are ready for refinement and use.",,,,
data-engineering-demo,,,,2,2. Key Data Engineering Concepts & Tasks,"
* **ETL (Extract, Transform, Load)**: A traditional process where data is extracted from sources, transformed into a structured format suitable for analysis, and loaded into a target system (often a Data Warehouse).
* **ELT (Extract, Load, Transform)**: A more modern approach, especially with cloud data warehouses/lakes, where raw data is first loaded into the target system and transformations are performed later using the target system's compute power.
* **Data Warehousing**: Designing and managing central repositories (Data Warehouses) optimized for storing structured, historical data for business intelligence and reporting. Often uses dimensional modeling (star/snowflake schemas).
* **Data Lakes**: Storing vast amounts of raw data (structured, semi-structured, unstructured) in its native format. Offers flexibility but requires careful management to avoid becoming a ""data swamp."" Often built on cloud storage like S3 or GCS.
* **Data Modeling**: Designing the structure, relationships, and constraints of data within databases or data warehouses to ensure consistency and support analytical needs.
* **Data Pipelines & Orchestration**: Building automated workflows (pipelines) to move and process data between systems. Orchestration tools manage dependencies, scheduling, retries, and monitoring of these pipelines. (Tools: Apache Airflow, Prefect, Dagster, Luigi).
* **Data Quality & Validation**: Implementing checks and processes to ensure data accuracy, completeness, consistency, and timeliness. (Tools: Great Expectations, dbt tests).
* **Streaming Data Processing**: Handling data that arrives continuously in real-time or near real-time. (Tools: Apache Kafka, Apache Flink, Spark Structured Streaming, AWS Kinesis).",python,Illustrative Snippet (Conceptual Python ETL):,"import pandas as pd
# from sqlalchemy import create_engine # Example for database interaction

def extract_data(source_file_path: str) -> pd.DataFrame:
    """"""Extracts data from a source (e.g., CSV).""""""
    print(f""Extracting data from {source_file_path}..."")
    try:
        # In reality, this could be reading from APIs, databases, etc.
        df = pd.read_csv(source_file_path)
        print(f""Extracted {len(df)} rows."")
        return df
    except FileNotFoundError:
        print(f""Error: Source file not found at {source_file_path}"")
        return pd.DataFrame() # Return empty DataFrame on error

def transform_data(df: pd.DataFrame) -> pd.DataFrame:
    """"""Applies transformations to the DataFrame.""""""
    if df.empty:
        return df
    print(""Transforming data..."")
    # Example transformations:
    # 1. Rename columns (e.g., make lowercase, replace spaces)
    df.columns = df.columns.str.lower().str.replace(' ', '_')
    # 2. Handle missing values (e.g., fill numerical with mean, categorical with 'Unknown')
    if 'value' in df.columns:
        mean_value = df['value'].mean()
        df['value'].fillna(mean_value, inplace=True)
        print(f""- Filled missing 'value' with mean: {mean_value:.2f}"")
    if 'category' in df.columns:
         df['category'].fillna('Unknown', inplace=True)
         print(""- Filled missing 'category' with 'Unknown'"")
    # 3. Convert data types (e.g., ensure date is datetime)
    if 'date_column' in df.columns:
        df['date_column'] = pd.to_datetime(df['date_column'], errors='coerce')
        print(""- Converted 'date_column' to datetime"")
    # 4. Create new features (e.g., calculate ratio)
    if 'cost' in df.columns and 'revenue' in df.columns:
        # Avoid division by zero
        df['profit_margin'] = df.apply(lambda row: (row['revenue'] - row['cost']) / row['revenue'] if row['revenue'] else 0, axis=1)
        print(""- Calculated 'profit_margin'"")

    print(""Transformation complete."")
    return df

def load_data(df: pd.DataFrame, target_table_name: str): # Add target_connection_string if needed
    """"""Loads the transformed data into a target system (e.g., database table).""""""
    if df.empty:
        print(""No data to load."")
        return
    print(f""Loading data into target '{target_table_name}'..."")
    try:
        # Example: Load to a SQL database (requires sqlalchemy, psycopg2-binary/mysql-connector-python etc.)
        # engine = create_engine(target_connection_string)
        # df.to_sql(target_table_name, engine, if_exists='replace', index=False)

        # Example: Load to a Parquet file (common for data lakes)
        target_file = f""{target_table_name}.parquet""
        df.to_parquet(target_file, index=False)
        print(f""Data successfully loaded to {target_file}."")

    except Exception as e:
        print(f""Error loading data: {e}"")

# --- Main ETL Flow ---
if __name__ == ""__main__"":
    source_file = ""input_data.csv"" # Replace with actual source
    target_table = ""processed_output"" # Replace with actual target

    extracted_df = extract_data(source_file)
    transformed_df = transform_data(extracted_df)
    load_data(transformed_df, target_table)
    print(""ETL process finished."")","Conceptual Python script demonstrating a basic ETL (Extract, Transform, Load) process using Pandas."
data-engineering-demo,,,,3,3. Tools of the Trade,"Data Engineers utilize a wide range of tools, often depending on the specific task and environment:
* **Programming Languages**: **Python** (dominant due to libraries like Pandas, Dask, and integration with other tools), **SQL** (essential for database interaction), Scala/Java (especially in the Spark/Hadoop ecosystem).
* **Databases & Storage**: Relational Databases (PostgreSQL, MySQL), NoSQL Databases (MongoDB, Cassandra), Data Warehouses (Snowflake, BigQuery, Redshift, ClickHouse), Data Lakes (AWS S3, Google Cloud Storage, Azure Data Lake Storage).
* **Data Processing Frameworks**: Apache Spark, Apache Flink, Dask, Pandas (for smaller data).
* **Pipeline Orchestration**: Apache Airflow, Prefect, Dagster, Luigi, AWS Step Functions, Azure Data Factory.
* **Streaming Technologies**: Apache Kafka, AWS Kinesis, Google Cloud Pub/Sub, Spark Structured Streaming, Flink.
* **Infrastructure & Containerization**: Docker, Kubernetes, Terraform, Cloud Provider Services (AWS, GCP, Azure).
* **Data Quality & Transformation**: dbt (data build tool), Great Expectations.
* **Version Control**: Git.",,,,
data-engineering-demo,,,,4,4. Why Data Engineering is Critical for ML/AI,"Machine learning models are only as good as the data they are trained on. Data Engineering provides the foundation for successful ML/AI projects:
* **Reliable Data Supply**: Provides clean, consistent, and up-to-date data pipelines to feed model training and inference processes. Garbage in, garbage out!
* **Feature Engineering at Scale**: Builds pipelines to compute and manage features derived from raw data, often requiring distributed processing for large datasets. Feature stores rely heavily on data engineering.
* **Scalability for Training & Inference**: Creates infrastructure capable of handling large datasets for training and high volumes of requests for real-time inference.
* **Data Accessibility**: Makes diverse data sources available and queryable for exploration and model building by Data Scientists and ML Engineers.
* **Productionization Support**: Builds the pipelines needed to automate data preprocessing, model retraining, and deployment, bridging the gap between research/prototyping and production systems (a core part of MLOps).
* **Data Governance & Compliance**: Ensures data used for ML adheres to privacy regulations and organizational policies.

Without robust data engineering, ML projects often struggle with poor data quality, lack of scalability, difficulty in deployment, and unreliable results.",,,,
data-engineering-demo,,,,5,Conclusion,"Data Engineering is a critical field that underpins modern data analytics, data science, and machine learning. Data Engineers design, build, and manage the infrastructure and pipelines necessary to transform raw data into reliable, usable assets.

Their work ensures that data is available, clean, and accessible at scale, enabling data scientists to build accurate models and organizations to make data-driven decisions and deploy effective AI solutions.",,,,
data-security-demo,"Security in ML, AI & Data Science","Understanding key security risks and considerations in machine learning, AI, and data science, including data privacy, model security, and infrastructure protection.","security, machine learning, data science, AI, data privacy, model security, adversarial attacks, infrastructure security, GDPR, CCPA, OWASP",0,"Security in ML, AI & Data Science Overview","As Machine Learning, AI, and Data Science systems become more powerful and handle sensitive information, **security** becomes paramount. It's not just about protecting the code, but also the data, the models themselves, and the infrastructure they run on. Ignoring security can lead to data breaches, biased or manipulated outcomes, and loss of trust.",,,,
data-security-demo,,,,1,1. Data Privacy & Security,"ML models are trained on data, which often contains sensitive or personal information (PII). Protecting this data is critical.

**Key Risks:**
* Data breaches during storage or transit.
* Unauthorized access by internal or external actors.
* Models inadvertently memorizing and potentially leaking sensitive training data points through their outputs (inference attacks).
* Non-compliance with data protection regulations.

**Mitigation Techniques:**
* **Anonymization/Pseudonymization**: Removing or replacing direct identifiers (e.g., replacing names with IDs). However, re-identification can still be possible through linkage.
* **Access Control**: Implementing strict Role-Based Access Control (RBAC) and Principle of Least Privilege for data access.
* **Encryption**: Using strong encryption for data at rest (in databases, file storage) and in transit (using TLS/SSL).
* **Differential Privacy**: Adding mathematically calibrated noise during training or analysis to provide formal privacy guarantees, making it difficult to infer information about specific individuals. ([Learn More - External Link](https://desfontain.es/privacy/differential-privacy-awesomely-explained.html))
* **Compliance**: Designing systems and processes to adhere to regulations like GDPR, CCPA, HIPAA. ([GDPR Info](https://gdpr-info.eu/))
* **Data Minimization**: Collecting and retaining only the data that is strictly necessary for the intended purpose.

**Importance**: Protecting user privacy is often a legal and ethical requirement, crucial for maintaining user trust and avoiding significant penalties.",,,,
data-security-demo,,,,2,2. Model Security & Robustness,"Machine learning models themselves can be vulnerable to specific types of attacks designed to manipulate their behavior or extract information.

**Key Risks:**
* **Adversarial Attacks (Evasion)**: Crafting specific, often subtle, inputs designed to fool a model into making incorrect predictions. *(e.g., adding tiny, almost invisible noise to an image of a 'stop' sign might cause a self-driving car's model to classify it as a 'speed limit' sign).*
* **Data Poisoning (Causative Attack)**: Injecting malicious data into the training set to compromise the resulting model's performance, introduce biases, or create backdoors triggered by specific inputs.
* **Model Inversion/Extraction**: Trying to reconstruct sensitive information about the training data (membership inference) or steal the model's architecture and parameters (model stealing) by repeatedly querying its API.

**Mitigation Techniques:**
* **Adversarial Training**: Including carefully crafted adversarial examples during the training process to improve model robustness against evasion attacks.
* **Input Validation/Sanitization**: Rigorously checking, cleaning, and normalizing inputs before feeding them to the model to detect or remove potential adversarial perturbations.
* **Data Provenance & Filtering**: Carefully vetting training data sources and implementing filters to detect potentially poisoned samples.
* **Defensive Distillation**: Training a model on the softened probability outputs of another model trained on the same task, which can sometimes increase robustness.
* **Output Perturbation/Randomization**: Adding noise to model outputs or using ensemble methods can make model extraction harder.
* **Monitoring & Anomaly Detection**: Implementing systems to detect unusual input patterns, query frequencies, or prediction distributions that might indicate an attack.
* **Rate Limiting & Access Control for Model API**: Limiting query rates and restricting access to the model's prediction endpoint.

**Importance**: Ensures the reliability, integrity, and trustworthiness of the AI system's predictions and decisions, preventing manipulation and protecting intellectual property.",,,,
data-security-demo,,,,3,3. Infrastructure & Deployment Security,"The systems supporting ML models (servers, APIs, databases, cloud environments) require standard, robust security practices.

**Key Risks:**
* Unauthorized access to servers, cloud accounts, or container orchestration systems.
* Insecure API endpoints lacking proper authentication, authorization, or input validation.
* Vulnerabilities in third-party dependencies (Python packages, OS libraries).
* Denial-of-service (DoS/DDoS) attacks against model APIs or supporting infrastructure.
* Insecure storage or transmission of model artifacts or credentials.

**Mitigation Techniques:**
* **Secure Coding Practices**: Applying general web security principles (like OWASP Top 10) to any API or web interface serving the model. ([OWASP Top 10](https://owasp.org/www-project-top-ten/))
* **Infrastructure Security**: Using firewalls, Virtual Private Clouds (VPCs), secure network configurations, regular OS/platform patching, and infrastructure vulnerability scanning.
* **API Security Best Practices**: Implementing strong authentication (e.g., API keys, OAuth), fine-grained authorization, robust input validation, rate limiting, and logging for model APIs.
* **Dependency Management & Scanning**: Regularly updating libraries and using tools (like `pip-audit`, Snyk, Dependabot) to scan for known vulnerabilities in dependencies.
* **Secrets Management**: Securely storing API keys, database passwords, and other credentials using environment variables injected at runtime or dedicated secrets management services (e.g., HashiCorp Vault, AWS Secrets Manager, Google Secret Manager). *(e.g., storing database passwords directly in code or version control is highly insecure).*
* **Secure Containerization Practices**: Using minimal base images, scanning container images for vulnerabilities, and running containers with least privilege.

**Importance**: Protects the entire system surrounding the model, ensuring its availability, preventing unauthorized access or disruption, and safeguarding underlying data and infrastructure.",,,,
data-security-demo,,,,4,Conclusion: A Holistic Approach,"Security in ML/AI/DS is not an afterthought but a critical component throughout the entire lifecycle. It requires a holistic approach encompassing:
* Robust **data governance and privacy** measures from collection to disposal.
* Techniques to enhance **model robustness** against adversarial manipulation and information leakage.
* Standard, rigorous **infrastructure and application security** practices for deployment and operation.

As these systems become more integrated into critical applications, adopting a security-conscious mindset and continuously evaluating potential threats is essential for building trustworthy, reliable, and ethical AI.",,,,
deploying-django-app-to-aws-elastic-beanstalk,Deploying Django to AWS Elastic Beanstalk,"A step-by-step guide on deploying Django applications to AWS Elastic Beanstalk using the EB CLI, covering configuration, deployment, and troubleshooting.","deploying django app, AWS, elastic beanstalk, EB CLI, python, django deployment, guide",0,Deploying Your Django Project to AWS Elastic Beanstalk,A step-by-step guide using the EB CLI.,,,,
deploying-django-app-to-aws-elastic-beanstalk,,,,1,1. Prerequisites,"
* A working Django project committed to a Git repository (EB CLI uses Git).
* Python and Pip installed locally.
* An [AWS Account](https://aws.amazon.com/).
* An [IAM User](https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html) with appropriate permissions for Elastic Beanstalk, EC2, S3, RDS, etc. (Configure AWS credentials locally).
* The [AWS Elastic Beanstalk CLI (EB CLI)](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html) installed and configured.
* Git installed locally.",,,,
deploying-django-app-to-aws-elastic-beanstalk,,,,2,2. Project Configuration,"Configure your project for Elastic Beanstalk deployment.

### requirements.txt
Lists Python dependencies.
```bash
pip freeze > requirements.txt
```
Ensure it includes:
* `Django`
* `gunicorn` (Often used by default EB Python platforms)
* `psycopg2-binary` (If using AWS RDS PostgreSQL)
* `mysqlclient` (If using AWS RDS MySQL/MariaDB)
* `whitenoise` (If serving static files via Django/Gunicorn)
* `django-storages[aws]` and `boto3` (If serving static/media from S3)
* Any other project dependencies.

### Configuration Method (Choose One)
Elastic Beanstalk uses one of two primary methods for environment customization based on the platform version you select during `eb init`.
* **`.platform/hooks/` (Recommended for Amazon Linux 2)**: Uses structured directories and shell scripts for different deployment lifecycle hooks (`prebuild`, `predeploy`, `postdeploy`). Offers more granular control.
* **`.ebextensions/` (Older Platforms - Amazon Linux AMI)**: Uses YAML `.config` files to define packages, commands, options, etc. Simpler for basic tasks but less flexible than hooks.
**You should typically use only ONE of these methods.** The examples below show both for illustration.

#### Option A: Platform Hooks (`.platform/`)
Example: Running migrations and collecting static files during deployment.
Create file: `.platform/hooks/postdeploy/01_django_setup.sh`
Make the script executable: `chmod +x .platform/hooks/postdeploy/01_django_setup.sh`",bash,.platform/hooks/postdeploy/01_django_setup.sh code:,"#!/bin/bash
# .platform/hooks/postdeploy/01_django_setup.sh
# Note: This script runs as root by default. Use 'su' if needed to run as wsgi user.

# Using source to load environment variables set by EB platform
# The exact path might vary slightly, check your instance if needed
source /var/app/venv/*/bin/activate
# Navigate to the app directory where manage.py resides
cd /var/app/current

echo ""Running Django management commands...""

# Run database migrations (leader_only is handled implicitly by EB for postdeploy)
# Ensure DJANGO_SETTINGS_MODULE is set as an environment variable in EB config
echo ""Applying database migrations...""
python manage.py migrate --noinput

# Optional: Collect static files if serving via Django/Whitenoise
# If using S3, collectstatic should ideally run before deployment or in a prebuild hook.
# echo ""Collecting static files...""
# python manage.py collectstatic --noinput --clear

# Optional: Create superuser (only run once or add conditional logic)
# echo ""Checking for superuser...""
# python manage.py shell -c ""from django.contrib.auth import get_user_model; User = get_user_model(); exit(0) if User.objects.filter(username='admin').exists() else exit(1)"" || python manage.py createsuperuser --noinput --username=admin --email=admin@example.com

echo ""Django setup commands finished.""",This script handles post-deployment tasks like database migrations for a Django app on AWS Elastic Beanstalk using platform hooks.
deploying-django-app-to-aws-elastic-beanstalk,,,,3,Option B: EB Extensions (`.ebextensions/`),"For older platforms (Amazon Linux AMI).
Example: `.ebextensions/django.config`
Replace `your_project_name` with your Django project's name.
Adjust `WSGIPath` if your `wsgi.py` is elsewhere.
**Important**: Set sensitive environment variables like `SECRET_KEY` and database credentials via the Elastic Beanstalk Console (Configuration > Software > Environment properties) for security, **not** in `.ebextensions` files.",yaml,.ebextensions/django.config code:,"option_settings:
  aws:elasticbeanstalk:application:environment:
    # Set non-sensitive environment variables here if desired
    DJANGO_SETTINGS_MODULE: ""your_project_name.settings""
    # PYTHONUNBUFFERED: ""1"" # Often useful for logging
  aws:elasticbeanstalk:container:python:
    WSGIPath: your_project_name/wsgi.py # Path to your wsgi.py file

container_commands:
  # Runs after app code is deployed but before web server starts
  # Use leader_only: true for commands that should only run once per deployment
  01_migrate:
    command: ""source /var/app/venv/*/bin/activate && python manage.py migrate --noinput""
    leader_only: true
  # Optional: Collect static if serving via Django/Whitenoise
  # 02_collectstatic:
  #   command: ""source /var/app/venv/*/bin/activate && python manage.py collectstatic --noinput""

packages:
  yum:
    # Install OS packages if needed (e.g., postgresql-devel for psycopg2)
    postgresql-devel: []
    # mysql-devel: [] # If using MySQL","This YAML configuration file is for AWS Elastic Beanstalk, defining settings, commands for deployment (like migrations), and OS packages for older Amazon Linux AMI platforms."
deploying-django-app-to-aws-elastic-beanstalk,,,,4,3. Django Settings (`settings.py`),"Modify your project's `settings.py` for Elastic Beanstalk compatibility.
* **SECRET_KEY**: Load from environment variables set in the EB Console.
* **DEBUG**: Should be `False` in production. Use environment variable.
* **ALLOWED_HOSTS**: Allow the Elastic Beanstalk domain and your custom domain. Setting `EB_APP_URL` as an environment variable in the EB Console is the most reliable method.
* **Database (AWS RDS)**: Create an RDS instance. Set `RDS_DB_NAME`, `RDS_USERNAME`, `RDS_PASSWORD`, `RDS_HOSTNAME`, `RDS_PORT` as environment variables in the EB Console. Configure `settings.py` to read these (using `dj_database_url` is cleaner).
* **Static Files (Option 1: WhiteNoise)**: Serve static files via Django/Gunicorn using WhiteNoise. Install `whitenoise`. Configure `MIDDLEWARE` and `STATICFILES_STORAGE` (or `STORAGES` for Django 4.2+) in `settings.py`. Ensure `collectstatic` runs during deployment.
* **Static Files (Option 2: S3 + CloudFront)**: Serve static files from AWS S3. Install `django-storages[aws]` and `boto3`. Create S3 bucket. Assign IAM Role to EB EC2 instances with S3 permissions. Configure `settings.py` with `AWS_STORAGE_BUCKET_NAME`, etc. Run `collectstatic` to upload to S3.
* **HTTPS Security Settings**: Enable `CSRF_COOKIE_SECURE`, `SESSION_COOKIE_SECURE`, `SECURE_SSL_REDIRECT` in production via environment variables set in EB Console.",python,Example settings.py snippets:,"""# settings.py for SECRET_KEY
import os
SECRET_KEY = os.environ.get('SECRET_KEY', 'local-dev-only-insecure-fallback-key')

# settings.py for DEBUG
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# settings.py for ALLOWED_HOSTS
ALLOWED_HOSTS = []
EB_APP_URL = os.environ.get('EB_APP_URL')
CUSTOM_DOMAIN = os.environ.get('CUSTOM_DOMAIN')
if EB_APP_URL: ALLOWED_HOSTS.append(EB_APP_URL)
if CUSTOM_DOMAIN: ALLOWED_HOSTS.append(CUSTOM_DOMAIN)
if not DEBUG and not ALLOWED_HOSTS: ALLOWED_HOSTS.append('.elasticbeanstalk.com')
if DEBUG: ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])
if not DEBUG and not ALLOWED_HOSTS: raise ValueError(""ALLOWED_HOSTS cannot be empty!"")

# settings.py for Database (dj_database_url)
import dj_database_url
DATABASES = {'default': dj_database_url.config(default=f""sqlite:///{BASE_DIR / 'db.sqlite3'}"", conn_max_age=600)}
# DATABASE_URL in EB env: postgresql://{RDS_USERNAME}:{RDS_PASSWORD}@{RDS_HOSTNAME}:{RDS_PORT}/{RDS_DB_NAME}

# settings.py for WhiteNoise (Django 4.2+)
MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware',]
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STORAGES = {""staticfiles"": {""BACKEND"": ""whitenoise.storage.CompressedManifestStaticFilesStorage""}}

# settings.py for S3 Static Files (Django 4.2+)
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
AWS_LOCATION = 'static'
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
STORAGES = {""staticfiles"": {""BACKEND"": ""storages.backends.s3boto3.S3Boto3Storage""}}

# settings.py for HTTPS
CSRF_COOKIE_SECURE = os.environ.get('DJANGO_CSRF_COOKIE_SECURE', 'False') == 'True'
SESSION_COOKIE_SECURE = os.environ.get('DJANGO_SESSION_COOKIE_SECURE', 'False') == 'True'
SECURE_SSL_REDIRECT = os.environ.get('DJANGO_SECURE_SSL_REDIRECT', 'False') == 'True'
""","These are various snippets for `settings.py` to configure a Django application for AWS Elastic Beanstalk, covering secret key, debug status, allowed hosts, database connection (using dj_database_url), static files (WhiteNoise or S3), and HTTPS security settings. Environment variables are expected to be set in the Elastic Beanstalk console."
deploying-django-app-to-aws-elastic-beanstalk,,,,5,4. Deployment Steps (Using EB CLI),"
1. **Initialize EB CLI**: `eb init -p python-3.9 your-django-app-name --region us-east-1`
   Follow prompts. Choose Python platform, app name, region. Creates `.elasticbeanstalk` directory.
2. **Create Environment**: `eb create your-environment-name --instance-type t2.micro`
   Provisions AWS resources. Can take several minutes. Use `--database` to link/create RDS.
3. **Set Environment Variables**: **Crucial!** Use EB Console or `eb setenv SECRET_KEY='...' DATABASE_URL='...' ...` for secrets and configurations.
4. **Commit Code Changes**: `git add . && git commit -m ""Configure for Elastic Beanstalk deployment""`
5. **Deploy Application Code**: `eb deploy your-environment-name`
   Bundles and uploads code. Deployment hooks/commands run.
6. **Run Manual Commands (if needed)**: `eb ssh your-environment-name`, then navigate to `/var/app/current`, activate venv, run `python manage.py ...`.
7. **Open your application**: `eb open your-environment-name`",,,,
deploying-django-app-to-aws-elastic-beanstalk,,,,6,5. Troubleshooting,"
* **Check Health & Events**: Use EB Console dashboard.
* **Check Logs**: `eb logs your-environment-name --tail 100` (quick), `eb logs your-environment-name --all` (full), `eb logs your-environment-name --stream` (live). Key logs: `/var/log/web.stdout.log` (Django/Gunicorn), `/var/log/eb-engine.log` or `/var/log/eb-activity.log` (platform).
* **Deployment Failures**: Check deployment events and EB activity logs. Often errors in `.platform` hooks or `.ebextensions` commands, failed health checks.
* **50x Errors**: Check `web.stdout.log` for Django tracebacks. Causes: DB issues, wrong env vars, `ALLOWED_HOSTS`, WSGI path errors.
* **Static Files Not Loading**: WhiteNoise: check `collectstatic` & `STATIC_ROOT`. S3: check bucket/IAM permissions, `django-storages` config, `collectstatic` uploads.
* **Database Connection Issues**: Verify RDS running. **Check Security Groups**: RDS SG must allow inbound from EB EC2 SG. Check credentials.
* **Permissions Errors**: Ensure EC2 Instance Profile (IAM Role) has necessary permissions (S3, Secrets Manager).
* Consult [AWS Elastic Beanstalk Developer Guide for Python](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html).",,,,
deploying-django-app-to-google-app-engine,Deploying Django to Google App Engine,Guide on deploying Django applications to Google App Engine (GAE) Standard Environment using the gcloud CLI.,"Django, Google App Engine, GAE, Deployment, Guide, PaaS, GCP, Cloud SQL, Cloud Storage",0,Deploying Django to Google App Engine,A step-by-step guide for the Standard Environment using the gcloud CLI.,,,,
deploying-django-app-to-google-app-engine,,,,1,1. Prerequisites,"
* A working Django project committed to a Git repository (optional but good practice).
* Python and Pip installed locally.
* A [Google Cloud Platform (GCP) account](https://cloud.google.com/free/) with billing enabled.
* A GCP Project created. Note your Project ID.
* The [Google Cloud SDK (gcloud CLI)](https://cloud.google.com/sdk/docs/install) installed and initialized (`gcloud init`).
* Git installed locally.
* Gunicorn installed in your project: `pip install gunicorn` (Add to `requirements.txt`).",,,,
deploying-django-app-to-google-app-engine,,,,2,2. Configuration Files,"Create/update these files in the root directory of your Django project.

### app.yaml
The main configuration file for App Engine.
Replace placeholders (`python311`, `your_project_name`, Cloud SQL connection name, secret names, project ID).
**Security**: Use [Secret Manager](https://cloud.google.com/secret-manager) for sensitive values.

### requirements.txt
Lists Python dependencies. `pip freeze > requirements.txt`
Ensure it includes: `Django`, `gunicorn`, `psycopg2-binary` (for PostgreSQL), `mysqlclient` (for MySQL), `django-storages[google]` (for GCS), `google-cloud-secret-manager`.

### .gcloudignore
Specifies files/directories NOT to upload. Start with `gcloud init` generated file. Exclude secrets, venv, local DBs.",yaml,app.yaml example:,"runtime: python311 # Specify Python version
entrypoint: gunicorn -b :$PORT your_project_name.wsgi:application

instance_class: F1

# Reference secrets from Secret Manager (Recommended)
# env_variables:
#   SECRET_KEY: ${sm://projects/YOUR_PROJECT_ID/secrets/YOUR_SECRET_KEY_NAME/versions/latest}
#   DB_HOST: '/cloudsql/your-gcp-project-id:your-region:your-instance-name'
#   DJANGO_SETTINGS_MODULE: 'your_project_name.settings'

# Or set non-sensitive vars directly
env_variables:
  DJANGO_SETTINGS_MODULE: 'your_project_name.settings'
  DB_HOST: '/cloudsql/your-gcp-project-id:your-region:your-instance-name'

handlers:
# Option 1: Serve directly via App Engine
- url: /static
  static_dir: staticfiles/
# Option 2: Route to GCS (Recommended)
# - url: /static/(.*)
#   static_files: staticfiles/\\1
#   upload: staticfiles/.*

- url: /.*
  script: auto
  secure: always","This `app.yaml` is for deploying a Django app to Google App Engine. It defines the runtime, entrypoint (using Gunicorn), environment variables (with a preference for Secret Manager for secrets), and handlers for static files and the main application."
deploying-django-app-to-google-app-engine,,,,3,3. Django Settings (`settings.py`),"Modify `settings.py` for Google Cloud.
* **SECRET_KEY**: Load from Secret Manager or environment variable (set via `app.yaml` referencing Secret Manager).
* **DEBUG**: `DEBUG = os.environ.get('GAE_ENV', '') != 'standard'` (False on App Engine).
* **ALLOWED_HOSTS**: Get from `GAE_APPLICATION` env var (e.g., `f'{project_id}.appspot.com'`) and custom domain env var.
* **Database (Cloud SQL)**: Connect via Unix socket in production. Set `DB_HOST` (e.g., `/cloudsql/project-id:region:instance-id`), `DB_USER`, `DB_PASSWORD`, `DB_NAME` from env vars (via Secret Manager).
* **Static & Media Files (Cloud Storage - Recommended)**: If `GAE_ENV` is standard, set `STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'`, `DEFAULT_FILE_STORAGE` similarly. Set `GS_BUCKET_NAME` from env var. `STATIC_URL` and `MEDIA_URL` point to `https://storage.googleapis.com/{GS_BUCKET_NAME}/...`. Run `collectstatic` before deploy.
* **Security Middleware (Production)**: If `GAE_ENV` is standard, set `SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')`, `SECURE_SSL_REDIRECT = True`, `SESSION_COOKIE_SECURE = True`, `CSRF_COOKIE_SECURE = True`.",python,Example settings.py snippets:,"""# settings.py for SECRET_KEY (Option 2: from env var via app.yaml)
SECRET_KEY = os.environ.get('SECRET_KEY', 'your-local-dev-secret-key')

# settings.py for DEBUG
DEBUG = os.environ.get('GAE_ENV', '') != 'standard'

# settings.py for ALLOWED_HOSTS
ALLOWED_HOSTS = []
gae_app_id = os.environ.get('GAE_APPLICATION', '')
if gae_app_id:
    project_id = gae_app_id.split('~')[-1]
    ALLOWED_HOSTS.append(f'{project_id}.appspot.com')
    ALLOWED_HOSTS.append(f'{project_id}.uc.r.appspot.com') # Check region
custom_domain = os.environ.get('CUSTOM_DOMAIN')
if custom_domain: ALLOWED_HOSTS.append(custom_domain)
if DEBUG: ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])

# settings.py for Database (Cloud SQL)
if os.getenv('GAE_ENV', '').startswith('standard'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql', # Or mysql
            'HOST': os.environ.get('DB_HOST'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'NAME': os.environ.get('DB_NAME'),
        }
    }
else: # Local settings
    DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}

# settings.py for Static/Media with GCS (Production)
if os.getenv('GAE_ENV', '').startswith('standard'):
    GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME')
    if GS_BUCKET_NAME:
        STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
        DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
        STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
        MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # For collectstatic

# settings.py for HTTPS Security (Production)
if os.getenv('GAE_ENV', '').startswith('standard'):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
""","These Python snippets for `settings.py` adapt a Django application for Google App Engine. They cover loading the `SECRET_KEY` (ideally from an environment variable linked to Secret Manager), setting `DEBUG` status based on the GAE environment, configuring `ALLOWED_HOSTS`, setting up database connections for Cloud SQL (via Unix socket in production), handling static and media files using Google Cloud Storage, and enabling production security middleware settings."
deploying-django-app-to-google-app-engine,,,,4,4. Deployment Steps,"
1. **Set up GCP Project**: `gcloud init` and `gcloud config set project YOUR_PROJECT_ID`.
2. **Enable APIs**: `gcloud services enable cloudbuild.googleapis.com sqladmin.googleapis.com secretmanager.googleapis.com storage-component.googleapis.com appengine.googleapis.com`.
3. **Set up Secrets**: Create secrets in Secret Manager. Grant App Engine service account (`YOUR_PROJECT_ID@appspot.gserviceaccount.com`) 'Secret Manager Secret Accessor' role. Update `app.yaml` or `settings.py` to use them.
4. **Run `collectstatic` Locally (If using GCS)**: `python manage.py collectstatic --noinput`.
5. **Deploy**: `gcloud app deploy`. Follow prompts. Use `--version=v2 --no-promote` for non-default traffic.
6. **Run Migrations**: Use Cloud Shell: clone repo, setup venv, install reqs, set env vars, start Cloud SQL Proxy (`./cloud_sql_proxy -instances=YOUR_INSTANCE_CONNECTION_NAME=tcp:5432 &`), then `python manage.py migrate`. Create superuser if needed. Stop proxy.
7. **Browse app**: `gcloud app browse`.",,,,
deploying-django-app-to-google-app-engine,,,,5,5. Troubleshooting,"
* **Check Logs**: GCP Console (Logging > Logs Explorer) or `gcloud app logs tail -s default` / `gcloud app logs read`.
* **Build Failures**: Check Cloud Build history. Often `requirements.txt` errors or missing files.
* **500 Server Errors**: Check App Engine request logs (`stdout`, `stderr`). Common: DB connection, missing secrets/env vars, `ALLOWED_HOSTS`.
* **Static Files Not Loading**: Direct serving: check `static_dir` in `app.yaml`. GCS: check bucket permissions, `STATICFILES_STORAGE`/`GS_BUCKET_NAME` settings, `collectstatic` run *before* deploy, `STATIC_URL`.
* **Database Connection Issues**: Verify Cloud SQL instance/proxy, connection name, credentials, API enabled. App Engine service account needs 'Cloud SQL Client' IAM role.
* **Permissions Errors**: Ensure App Engine service account has IAM roles (Cloud SQL Client, Secret Manager Secret Accessor, Storage Object Admin/Viewer).
* Consult [App Engine Standard Python 3 Docs](https://cloud.google.com/appengine/docs/standard/python3/runtime).",,,,
deploying-django-app-to-heroku,Deploying Django to Heroku,Step-by-step guide for deploying Django applications to the Heroku platform using the Heroku CLI.,"Django, Heroku, Deployment, Guide, PaaS, Python, Gunicorn, WhiteNoise",0,Deploying Django to Heroku,A step-by-step guide to get your Django app live.,,,,
deploying-django-app-to-heroku,,,,1,1. Prerequisites,"
* A working Django project committed to a Git repository.
* Python and Pip installed locally.
* A [Heroku account](https://signup.heroku.com/).
* The [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli) installed and logged in (`heroku login`).
* Git installed locally.",,,,
deploying-django-app-to-heroku,,,,2,2. Configuration Files,"Create these files in the root of your Django project.

### Procfile
Tells Heroku how to run your web process.
Install Gunicorn: `pip install gunicorn` (add to `requirements.txt`).

### requirements.txt
Lists Python dependencies. `pip freeze > requirements.txt`
Ensure it includes: `Django`, `gunicorn`, `django-heroku` (optional), `psycopg2-binary` (for Heroku Postgres), `whitenoise`, `dj-database-url`.
If using `django-heroku`, install it: `pip install django-heroku`.

### runtime.txt
Specifies Python version. Replace with your version (e.g., `python-3.11.5`). Check [Heroku supported runtimes](https://devcenter.heroku.com/articles/python-support#supported-runtimes).",yaml,Procfile example:,web: gunicorn your_project_name.wsgi --log-file -,Replace `your_project_name` with your Django project directory name.
deploying-django-app-to-heroku,,,,3,3. Django Settings (`settings.py`),"Modify `settings.py` for Heroku.

### Using `django-heroku` (Recommended)
Add at the very bottom of `settings.py`:
```python
import django_heroku
import os # Ensure os is imported
django_heroku.settings(locals())
```
This auto-configures database, `ALLOWED_HOSTS`, static files (WhiteNoise), logging, and `SECRET_KEY` (if env var set).

### Manual Configuration (If not using `django-heroku`)
* **SECRET_KEY**: `SECRET_KEY = os.environ.get('SECRET_KEY', 'fallback')`
* **DEBUG**: `DEBUG = os.environ.get('DEBUG', 'False') == 'True'`
* **ALLOWED_HOSTS**: `ALLOWED_HOSTS = [f'{os.environ.get(""HEROKU_APP_NAME"")}.herokuapp.com']` (Set `HEROKU_APP_NAME` config var). Add custom domain if used.
* **Database**: Use `dj-database-url` to parse `DATABASE_URL` env var from Heroku Postgres. `DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True)`
* **Static Files (WhiteNoise)**: Configure manually (see next section).",python,settings.py snippets for manual config:,"""# SECRET_KEY
SECRET_KEY = os.environ.get('SECRET_KEY', 'your-local-dev-secret-key-fallback')

# DEBUG
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# ALLOWED_HOSTS
ALLOWED_HOSTS = []
HEROKU_APP_NAME = os.environ.get('HEROKU_APP_NAME')
if HEROKU_APP_NAME:
    ALLOWED_HOSTS.append(f'{HEROKU_APP_NAME}.herokuapp.com')
if DEBUG: ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])

# Database (dj-database-url)
import dj_database_url
DATABASES = {'default': {}}
db_url = os.environ.get('DATABASE_URL')
if db_url:
    DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True)
else: # Fallback for local
    DATABASES['default'] = {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}
""","These Python snippets for `settings.py` are for manually configuring a Django app for Heroku. They cover setting the `SECRET_KEY` and `DEBUG` status from environment variables, configuring `ALLOWED_HOSTS` using the `HEROKU_APP_NAME` environment variable, and setting up the database connection using `dj-database-url` to parse the `DATABASE_URL` provided by Heroku, with a fallback to SQLite for local development."
deploying-django-app-to-heroku,,,,4,4. Static Files Handling (WhiteNoise),"Configure Django to serve static files with WhiteNoise. (`django-heroku` does this automatically).
1. Install WhiteNoise: `pip install whitenoise` (add to `requirements.txt`).
2. Modify `settings.py` (if not using `django-heroku`):
   Add `whitenoise.middleware.WhiteNoiseMiddleware` to `MIDDLEWARE`.
   Set `STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')`.
   For Django 4.2+, set `STORAGES = {""staticfiles"": {""BACKEND"": ""whitenoise.storage.CompressedManifestStaticFilesStorage""}}`.
   For Django < 4.2, set `STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'`.
Heroku runs `collectstatic` automatically unless disabled.",python,WhiteNoise settings.py snippet (Django 4.2+):,"""MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Add WhiteNoise
    # ... other middleware ...
]
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STORAGES = {
    ""staticfiles"": {
        ""BACKEND"": ""whitenoise.storage.CompressedManifestStaticFilesStorage"",
    },
    ""default"": { # Keep default for other files if not using external media
        ""BACKEND"": ""django.core.files.storage.FileSystemStorage"",
    },
}""","This snippet shows how to configure WhiteNoise in `settings.py` for serving static files in a Django 4.2+ application, including adding the middleware and setting up the staticfiles storage backend."
deploying-django-app-to-heroku,,,,5,5. Deployment Steps,"
1. **Commit changes**: `git add . && git commit -m ""Config for Heroku""`
2. **Create Heroku app**: `heroku create your-app-name` (or omit name for auto-generation).
3. **Add Heroku Postgres**: `heroku addons:create heroku-postgresql:hobby-dev` (sets `DATABASE_URL`).
4. **Set Config Vars**: `heroku config:set SECRET_KEY='your_prod_secret_key' DJANGO_SETTINGS_MODULE='project.settings' HEROKU_APP_NAME='your-app-name'`.
5. **Disable `collectstatic` (Recommended with WhiteNoise)**: `heroku config:set DISABLE_COLLECTSTATIC=1`.
6. **Push to Heroku**: `git push heroku main` (or `master`).
7. **Run Migrations**: `heroku run python manage.py migrate`.
8. **Create Superuser (Optional)**: `heroku run python manage.py createsuperuser`.
9. **Open app**: `heroku open`.",,,,
deploying-django-app-to-heroku,,,,6,6. Troubleshooting,"
* **Check logs**: `heroku logs --tail` (live) or `heroku logs`.
* **Application Error**: Failed migrations, missing config vars, `Procfile`/`settings.py` issues.
* **Static files not loading**: WhiteNoise config, `DISABLE_COLLECTSTATIC=1`, `DEBUG=False`.
* **Database connection**: `DATABASE_URL` set, `psycopg2-binary` installed.
* **H10 App Crashed / R10 Boot Timeout**: Gunicorn/`wsgi.py` errors, missing deps, port issues.
* Consult [Heroku Dev Center for Python](https://devcenter.heroku.com/articles/deploying-python).",,,,
deploying-django-app-to-pythonanywhere,Deploying Django to PythonAnywhere,Step-by-step guide for deploying Django applications to PythonAnywhere.com.,"Django, PythonAnywhere, Deployment, Guide, Python, WSGI, Hosting",0,Deploying Django to PythonAnywhere,A step-by-step guide to get your Django app live on PythonAnywhere.com.,,,,
deploying-django-app-to-pythonanywhere,,,,1,1. Prerequisites,"
* A working Django project.
* `requirements.txt` file (`pip freeze > requirements.txt`).
* A [PythonAnywhere account](https://www.pythonanywhere.com/registration/register/beginner/).
* Code available via Git (GitHub, etc.) or as a zip.
* Basic Linux command line familiarity.",,,,
deploying-django-app-to-pythonanywhere,,,,2,2. Upload Your Project,"Get code onto PythonAnywhere servers.

### Option A: Using Git (Recommended)
1. Open a ""Bash Console"" from PythonAnywhere ""Consoles"" tab.
2. Clone repo: `git clone https://github.com/yourusername/your-repo-name.git`
   Code will be in `/home/yourusername/your-repo-name/`.

### Option B: Uploading a Zip File
1. Zip project locally.
2. Go to ""Files"" tab on PythonAnywhere, navigate to home dir.
3. Upload zip.
4. Open Bash Console, unzip: `unzip your_project.zip`.",,,,
deploying-django-app-to-pythonanywhere,,,,3,3. Set Up Virtual Environment,"
1. In Bash Console, navigate outside project dir (optional).
2. Create venv: `mkvirtualenv --python=/usr/bin/python3.10 myenv`
   (Replace Python version and `myenv` name. Auto-activates).
3. Navigate into project: `cd /home/yourusername/your-repo-name/`
   (Use `workon myenv` to reactivate later).
4. Install dependencies: `pip install -r requirements.txt`
5. Note venv path (e.g., `/home/yourusername/.virtualenvs/myenv`). Use `which python` when active.",,,,
deploying-django-app-to-pythonanywhere,,,,4,4. Configure the Web App,"Use PythonAnywhere web interface.
1. Go to ""Web"" tab.
2. Click ""Add a new web app"".
3. Follow prompts:
    * Domain: `yourusername.pythonanywhere.com`.
    * Select ""Manual configuration"" (**Important**).
    * Choose Python version matching venv.
4. After creation, in ""Code"" section:
    * **Source code**: `/home/yourusername/your-repo-name/`.
    * **Working directory**: Same as source code.
5. In ""Virtualenv"" section:
    * Path: `/home/yourusername/.virtualenvs/myenv`.
6. Find ""WSGI configuration file"" link and click to edit.",,,,
deploying-django-app-to-pythonanywhere,,,,5,5. Edit the WSGI Configuration File,"Modify `/var/www/yourusername_pythonanywhere_com_wsgi.py`. Delete most default content and replace with:
Replace placeholders (`yourusername`, `your-repo-name`, `your_project_name`).
Save the file.",python,WSGI Configuration:,"""import os
import sys

# Add project directory to sys.path
path = '/home/yourusername/your-repo-name' # Replace
if path not in sys.path:
    sys.path.insert(0, path)

# Set DJANGO_SETTINGS_MODULE
os.environ['DJANGO_SETTINGS_MODULE'] = 'your_project_name.settings' # Replace

from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()""",This Python script configures the WSGI entry point for a Django application on PythonAnywhere. It adds the project directory to `sys.path` and sets the `DJANGO_SETTINGS_MODULE` environment variable before loading the Django application.
deploying-django-app-to-pythonanywhere,,,,6,6. Django Settings & Database,"Adjust `settings.py` and set up DB.
* **ALLOWED_HOSTS**: In `settings.py`, add `['yourusername.pythonanywhere.com']`.
* **DEBUG**: Ensure `DEBUG = False`.
* **SECRET_KEY**: Load from env var (see Section 8).
* **Database**:
    * SQLite (Free Tier): Usually works out-of-box.
    * MySQL/PostgreSQL (Paid): Create in PythonAnywhere ""Databases"" tab. Update `settings.py` `DATABASES`. Install drivers in venv.
* **Run Migrations**: In Bash console (venv active, in project dir): `python manage.py migrate`.
* **Create Superuser (Optional)**: `python manage.py createsuperuser`.",,,,
deploying-django-app-to-pythonanywhere,,,,7,7. Configure Static Files,"PythonAnywhere serves static files directly.
1. `settings.py` defines `STATIC_URL = '/static/'` and `STATIC_ROOT = '/home/yourusername/your-repo-name/staticfiles'`.
2. Run `collectstatic`: In Bash console (venv active): `python manage.py collectstatic --no-input`.
3. Go to ""Web"" tab on PythonAnywhere, ""Static files"" section.
4. Add mapping:
    * **URL**: `/static/`
    * **Directory**: `/home/yourusername/your-repo-name/staticfiles/`
5. Repeat for `MEDIA_URL` and `MEDIA_ROOT` if used.
Note: WhiteNoise generally not needed.",,,,
deploying-django-app-to-pythonanywhere,,,,8,8. Environment Variables (Secrets),"Set sensitive info like `SECRET_KEY`.

### Option A: WSGI File (Simpler, Less Secure)
Set in WSGI file: `os.environ['SECRET_KEY'] = 'your_secret_key'`
Secrets visible in file.

### Option B: `.env` File (Recommended)
1. `pip install python-dotenv` (add to `reqs.txt`).
2. Create `/home/yourusername/your-repo-name/.env` with `SECRET_KEY='...'`.
3. `settings.py`:
   ```python
   from dotenv import load_dotenv
   load_dotenv(os.path.join(BASE_DIR, '.env')) # Load .env
   SECRET_KEY = os.environ.get('SECRET_KEY')
   ```
4. WSGI file:
   ```python
   from dotenv import load_dotenv # Import
   project_folder = '/home/yourusername/your-repo-name'
   load_dotenv(os.path.join(project_folder, '.env')) # Load .env before DJANGO_SETTINGS_MODULE
   os.environ['DJANGO_SETTINGS_MODULE'] = 'your_project_name.settings'
   ```
5. Add `.env` to `.gitignore`.",python,Example .env loading in settings.py:,"""from pathlib import Path
import os
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
# Load environment variables from .env file in project root
load_dotenv(os.path.join(BASE_DIR, '.env'))

SECRET_KEY = os.environ.get('SECRET_KEY')""","This snippet shows how to load environment variables from a `.env` file into `settings.py` using the `python-dotenv` library, allowing secure management of secrets like `SECRET_KEY`."
deploying-django-app-to-pythonanywhere,,,,9,9. Reload Web App,"
1. After changes (code, WSGI, venv, static files), go to ""Web"" tab on PythonAnywhere.
2. Click green ""Reload yourusername.pythonanywhere.com"" button.
3. Visit `http://yourusername.pythonanywhere.com`.",,,,
deploying-django-app-to-pythonanywhere,,,,10,10. Troubleshooting,"Check logs in ""Web"" tab (""Error Log"", ""Server Log"", ""Access Log"").
Common Issues:
* Incorrect paths in WSGI file.
* Venv path wrong or not active.
* Missing dependencies.
* Static file mapping errors.
* `STATIC_ROOT` mismatch.
* DB connection errors.
* Syntax errors.
* Forgetting to ""Reload"".
Consult [PythonAnywhere Help Pages](https://help.pythonanywhere.com/pages/DebuggingImportError/).",,,,
deploying-django-app-to-render,Deploying Django to Render,Step-by-step guide for deploying Django applications to the Render platform.,"Django, Render, Deployment, Guide, PaaS, Python, Gunicorn, WhiteNoise, PostgreSQL",0,Deploying Django to Render,A step-by-step guide to get your Django app live on Render.com.,,,,
deploying-django-app-to-render,,,,1,1. Prerequisites,"
* A working Django project committed to a Git repository (GitHub, GitLab, Bitbucket).
* Python and Pip installed locally.
* A [Render account](https://dashboard.render.com/register).
* Git installed locally.
* Gunicorn installed: `pip install gunicorn` (add to `requirements.txt`).",,,,
deploying-django-app-to-render,,,,2,2. Project Configuration,"Ensure these files are in your project repo.

### requirements.txt
`pip freeze > requirements.txt`
Include: `Django`, `gunicorn`, `psycopg2-binary` (for Render Postgres), `dj-database-url`, `whitenoise[brotli]`.

### runtime.txt (Optional but Recommended)
Specifies Python version (e.g., `python-3.11.5`). Or use `PYTHON_VERSION` env var.

### render.yaml (Optional ""Infrastructure as Code"")
Define services (web, DB) declaratively. Or use Render UI.
Replace placeholders.

### build.sh (Optional - if using `render.yaml` buildCommand)
Script for build commands. Make executable: `chmod +x build.sh`.",yaml,render.yaml example:,"""# Example render.yaml
databases:
  - name: mydjangodb
    databaseName: mydjangodbname
    user: mydjangouser
    plan: free
    region: oregon

services:
  - type: web
    name: my-django-app
    runtime: python
    region: oregon
    plan: free
    branch: main
    buildCommand: ""./build.sh""
    startCommand: ""gunicorn your_project_name.wsgi:application""
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: mydjangodb
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: PYTHON_VERSION
        value: 3.11.5
      - key: DJANGO_SETTINGS_MODULE
        value: 'your_project_name.settings'""","This `render.yaml` file defines infrastructure for a Django application on Render, including a PostgreSQL database and a web service. It specifies build and start commands, and sets up environment variables, linking the database URL and auto-generating a secret key."
deploying-django-app-to-render,,,,3,build.sh example (if using render.yaml):,Ensure `DJANGO_SETTINGS_MODULE` is set if not in environment.,bash,build.sh content:,"""#!/usr/bin/env bash
# Exit on error
set -o errexit

# Install dependencies
pip install -r requirements.txt

# Collect static files
python manage.py collectstatic --no-input

# Apply database migrations (can be run here or later via Shell/Job)
# python manage.py migrate --noinput
""",This shell script (`build.sh`) is used by Render to prepare a Django application for deployment. It installs Python dependencies from `requirements.txt` and runs `collectstatic` to gather static files. Database migrations are commented out but can be included.
deploying-django-app-to-render,,,,4,3. Django Settings (`settings.py`),"Modify `settings.py` for Render.
* **SECRET_KEY**: `SECRET_KEY = os.environ.get('SECRET_KEY', 'local-fallback')`. Render can generate via `render.yaml` or set in UI.
* **DEBUG**: `DEBUG = os.environ.get('DEBUG', 'False') == 'True'`. (Set to `False` on Render).
* **ALLOWED_HOSTS**: `ALLOWED_HOSTS = [os.environ.get('RENDER_EXTERNAL_HOSTNAME')]` (Render sets this). Add custom domain if used.
* **Database**: Use `dj-database-url` to parse `DATABASE_URL` env var from Render.
  `DATABASES['default'] = dj_database_url.config(default=os.environ.get('DATABASE_URL'), conn_max_age=600)`. Fallback to SQLite for local dev.
* **Static Files (WhiteNoise)**:
  Add `whitenoise.middleware.WhiteNoiseMiddleware` to `MIDDLEWARE`.
  Set `STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')`.
  For Django 4.2+, `STORAGES = {""staticfiles"": {""BACKEND"": ""whitenoise.storage.CompressedManifestStaticFilesStorage""}}`.
  Else, `STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'`.
* **Security Middleware (Production)**: If `DEBUG` is False: `SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')`, `SECURE_SSL_REDIRECT = True`, `SESSION_COOKIE_SECURE = True`, `CSRF_COOKIE_SECURE = True`.",python,settings.py snippets for Render:,"""# SECRET_KEY
SECRET_KEY = os.environ.get('SECRET_KEY', 'local-dev-key-only')

# DEBUG
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# ALLOWED_HOSTS
ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME: ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
if DEBUG: ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])

# Database (dj-database-url)
import dj_database_url
DATABASES = {'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'), conn_max_age=600)}
if not DATABASES['default'].get('ENGINE'): # Fallback to SQLite
    DATABASES['default'] = {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}

# Static Files (WhiteNoise, Django 4.2+)
MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware',]
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STORAGES = {""staticfiles"": {""BACKEND"": ""whitenoise.storage.CompressedManifestStaticFilesStorage""}}

# Security Middleware (Production)
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = os.environ.get('DJANGO_SECURE_SSL_REDIRECT', 'True') == 'True'
    SESSION_COOKIE_SECURE = os.environ.get('DJANGO_SESSION_COOKIE_SECURE', 'True') == 'True'
    CSRF_COOKIE_SECURE = os.environ.get('DJANGO_CSRF_COOKIE_SECURE', 'True') == 'True'
""","These Python snippets for `settings.py` are tailored for deploying a Django app on Render. They cover: loading `SECRET_KEY` and `DEBUG` status from environment variables, setting `ALLOWED_HOSTS` using Render's `RENDER_EXTERNAL_HOSTNAME`, configuring the database with `dj-database-url` (with SQLite fallback), setting up WhiteNoise for static files, and enabling production security middleware when `DEBUG` is false."
deploying-django-app-to-render,,,,5,4. Deployment Steps (Using Render Dashboard),"
1. **Push changes to Git**: Commit and push all configs.
2. **Create Database (Optional)**: Render Dashboard: ""New"" > ""PostgreSQL"". Copy ""Internal Connection String"" if needed.
3. **Create Web Service**: Render Dashboard: ""New"" > ""Web Service"". Connect Git repo.
4. **Configure Web Service**:
    * Name, Region, Branch.
    * Runtime: `Python 3`.
    * Build Command: `pip install -r requirements.txt && python manage.py collectstatic --no-input` (or `./build.sh`).
    * Start Command: `gunicorn your_project_name.wsgi:application`.
5. **Set Environment Variables**: Under ""Environment"":
    * `SECRET_KEY` (paste generated key).
    * `PYTHON_VERSION` (e.g., `3.11.5`).
    * `DATABASE_URL` (link to Render DB service from dropdown).
    * `DJANGO_SETTINGS_MODULE`.
    * Others (`DJANGO_DEBUG=False`, security flags).
6. **Create Service & Deploy**.
7. **Run Migrations**: In service's ""Shell"" tab: `python manage.py migrate`.
8. **Create Superuser (Optional)**: In Shell: `python manage.py createsuperuser`.
9. **Access app** via Render URL.",,,,
deploying-django-app-to-render,,,,6,5. Troubleshooting,"
* **Check Logs**: ""Logs"" tab on Render service page.
* **Check Events**: ""Events"" tab for deployment progress/errors.
* **Build Failed**: Check build logs. Missing deps, errors in Build Command/`build.sh`.
* **Deploy Failed / App Not Starting**: Check runtime logs. Incorrect Start Command, missing env vars, DB connection failure.
* **Static files not loading**: WhiteNoise config, `collectstatic` in build, `STATIC_ROOT`, `DEBUG=False`.
* **Database connection**: `DATABASE_URL` linked/set, `psycopg2-binary` installed.
* Consult [Render Django Deployment Docs](https://render.com/docs/deploy-django).",,,,
deploying-django-comparisons,Comparison: Django Deployment Platforms,"Comparing Heroku, Render, PythonAnywhere, Google App Engine, and AWS Elastic Beanstalk for Django deployment.","Django, Deployment, Comparison, Heroku, Render, PythonAnywhere, Google App Engine, AWS Elastic Beanstalk, PaaS",0,Comparison: Django Deployment Platforms Overview,"Heroku vs. Render vs. PythonAnywhere vs. Google App Engine vs. AWS Elastic Beanstalk. Deploying a Django application involves choosing a platform that balances ease of use, control, scalability, and cost. This guide compares five popular Platform-as-a-Service (PaaS) options.",,,,
deploying-django-comparisons,,,,1,Platform Overviews,"Heroku: Pioneer PaaS, known for simplicity and DX. Git-based deploys, large add-on marketplace. Can get expensive; free tier limitations changed.
Render: Modern Heroku alternative with predictable pricing. Native support for background workers, cron jobs, private networking. Generous free tiers.
PythonAnywhere: Python-focused platform, very beginner-friendly web UI setup. Good for small projects/learning. Less flexible scaling/config.
Google App Engine (Std): Highly scalable GCP service. Standard environment is sandboxed and simple; Flex offers Docker. Deep GCP integration.
AWS Elastic Beanstalk: AWS PaaS. Manages EC2, Load Balancers, etc. More config options (and complexity) than Heroku/Render. Leverages AWS ecosystem.",,,,
deploying-django-comparisons,,,,2,Feature Comparison,"This section would ideally be a Markdown table.
| Feature             | Heroku                                       | Render                                                   | PythonAnywhere                              | GAE (Std)                                  | AWS EB                                            |
|---------------------|----------------------------------------------|----------------------------------------------------------|---------------------------------------------|--------------------------------------------|---------------------------------------------------|
| Primary Type        | PaaS                                         | PaaS                                                     | PaaS (Python-focused)                       | PaaS                                       | PaaS                                              |
| Ease of Use         | Very High                                    | High                                                     | Very High (Web UI)                          | Medium-High                                | Medium                                            |
| Deployment          | Git Push, CLI                                | Git Push (Auto), CLI, IaC (`render.yaml`)                | Git Clone/Upload + Web UI Setup             | CLI (`gcloud app deploy`)                  | CLI (`eb deploy`), Console, Git                   |
| Configuration       | `Procfile`, `reqs.txt`, `runtime.txt`, Vars  | `reqs.txt`, `runtime.txt`, `build.sh` (opt), `render.yaml` (opt), Env Vars | `reqs.txt`, Web UI, WSGI edits              | `app.yaml`, `reqs.txt`, `.gcloudignore`, Vars | `reqs.txt`, `.platform`/`.ebextensions`, Env Vars |
| Control             | Low                                          | Low-Medium                                               | Low                                         | Low (Standard Env)                         | Medium-High                                       |
| Scalability         | Easy (Slider), Expensive                     | Easy (Plan change), Predictable                          | Limited (Plan change)                       | Very High (Auto/Manual)                    | High (Auto Scaling Groups)                        |
| Free Tier           | Limited (Eco/Mini plans)                     | Yes (Web Svc, DB, Redis, Cron)                           | Yes (Limited resources)                     | Yes (Generous F-instance hours)            | Yes (via underlying AWS Free Tier)                |
| Database            | Add-on (Heroku PG)                           | Managed Service (Render PG)                              | SQLite, Managed MySQL/PG (Paid)             | Cloud SQL (Managed PG/MySQL/SQL Server)    | RDS (Managed PG/MySQL/etc.)                       |
| Static Files        | WhiteNoise or S3/CDN                         | WhiteNoise or Object Storage/CDN                         | Direct Mapping (Web UI)                     | Direct Mapping or GCS (Recommended)        | WhiteNoise or S3/CloudFront (Recommended)         |
| CLI Tool            | `heroku`                                     | `render`                                                 | (None specific)                             | `gcloud`                                   | `eb`                                              |
| Best For            | Quick Startups, Simple Apps, Add-on Ecosystem| Startups, Predictable Costs, Integrated Services         | Beginners, Education, Small/Personal Projects | Scalable Apps, GCP Integration, Microservices | AWS Integration, More Config Control, AWS Users   |",,,,
deploying-django-comparisons,,,,3,Key Similarities,"
* All are PaaS providers, abstracting server management.
* All support Python/Django deployment.
* Most use `requirements.txt` for dependencies.
* Most offer managed database solutions.
* Most use environment variables for configuration/secrets.
* Most support Git-based deployment workflows.
* All require configuration for serving static files in production.",,,,
deploying-django-comparisons,,,,4,Key Differences,"
* **Configuration Complexity**: PythonAnywhere < Heroku � Render < GAE < EB.
* **Deployment Method**: Git push (Heroku/Render), Platform CLI (GAE/EB), Git clone + UI (PythonAnywhere).
* **Control vs. Abstraction**: EB offers most control, GAE Std/PythonAnywhere least.
* **Pricing Model**: Varies significantly (Usage-based, Tiered, Predictable Plans).
* **Ecosystem Integration**: GAE/EB integrate deeply with GCP/AWS. Heroku has add-ons. Render integrates common services.
* **Static/Media Files**: Direct mapping (PythonAnywhere), Cloud Storage focus (GAE/EB), WhiteNoise/Cloud Storage (Heroku/Render).",,,,
deploying-django-comparisons,,,,5,Conclusion,"There's no single ""best"" platform; the ideal choice depends on your project's needs, technical expertise, budget, and scalability requirements.
* For **beginners or simple projects**, **PythonAnywhere** offers the gentlest learning curve.
* For **rapid development and ease of use**, **Heroku** and **Render** are excellent, with Render often having more predictable pricing and better free tiers.
* For **high scalability within the Google ecosystem**, **Google App Engine** is powerful.
* For **more control and deep integration with AWS**, **AWS Elastic Beanstalk** provides flexibility but requires more configuration.
Evaluate the trade-offs based on the comparison above and your specific requirements.",,,,
deploying-django-options,Overview: Django Deployment Options,"Exploring different options (PaaS, IaaS, FaaS, Containers) for deploying Django web applications.","Django, Deployment, Options, PaaS, IaaS, FaaS, Containers, Hosting, Heroku, Render, AWS, GCP",0,Where to Deploy Your Django Application,"Exploring options for hosting your Django project. Choosing the right deployment platform is crucial for your Django application's success. Different platforms offer varying levels of control, ease of use, scalability, and cost. Here's a breakdown of common options:",,,,
deploying-django-options,,,,1,1. Platform-as-a-Service (PaaS),"PaaS providers manage the underlying infrastructure (servers, OS, networking), allowing you to focus primarily on your code. Often the easiest way to get started.
Examples:
* [Heroku](%7B%25%20url%20'demos:deploying_django_app_to_heroku'%20%25%7D)
* [Render.com](%7B%25%20url%20'demos:deploying_django_app_to_render'%20%25%7D)
* [PythonAnywhere](%7B%25%20url%20'demos:deploying_django_app_to_pythonanywhere'%20%25%7D)
* [Google App Engine](%7B%25%20url%20'demos:deploying_django_app_to_google_app_engine'%20%25%7D)
* [AWS Elastic Beanstalk](%7B%25%20url%20'demos:deploying_django_app_to_aws_elastic_beanstalk'%20%25%7D)
* Others (Fly.io, DigitalOcean App Platform, etc.)

**Pros (PaaS):**
* Faster deployment & easier setup.
* Managed infrastructure (less admin overhead).
* Built-in scaling features (often).
* Integrated services (databases, caching).
**Cons (PaaS):**
* Less control over the environment.
* Can be more expensive at scale than IaaS.
* Potential for vendor lock-in.
*See [Platform Comparison Guide](%7B%25%20url%20'demos:deploying_django_comparisons'%20%25%7D) for more details.*",,,,
deploying-django-options,,,,2,2. Infrastructure-as-a-Service (IaaS),"IaaS providers give you virtual machines (servers), storage, and networking components. You have full control but manage everything from the OS upwards.
Examples:
* Amazon Web Services (AWS EC2)
* Google Compute Engine (GCE)
* Microsoft Azure Virtual Machines
* DigitalOcean Droplets
* Linode, Vultr

**Pros (IaaS):**
* Maximum control over server environment.
* Potentially lower costs at scale (if managed efficiently).
* Full choice of OS and software stack.
**Cons (IaaS):**
* Requires significant server administration/DevOps knowledge.
* Responsible for setup, security, patching, scaling, backups.
* Longer setup time compared to PaaS.",,,,
deploying-django-options,,,,3,3. Serverless / Function-as-a-Service (FaaS),"Deploy individual functions triggered by events. Often used for APIs or specific tasks rather than full monolithic Django apps, although frameworks like Zappa or Chalice facilitate this.
Examples:
* AWS Lambda (+ API Gateway)
* Google Cloud Functions
* Azure Functions

**Pros (Serverless):**
* Automatic scaling based on demand.
* Pay-per-use pricing (potentially very cost-effective for low/variable traffic).
* No server management required.
**Cons (Serverless):**
* Can require significant architectural changes for traditional Django apps.
* Potential for ""cold starts"" (initial request delay after inactivity).
* Limited execution time and resources per function.
* Debugging and local testing can be more complex.
* Vendor lock-in potential.",,,,
deploying-django-options,,,,4,4. Containers & Orchestration,"Package your application and dependencies into a Docker container, then deploy using container platforms or orchestrators.
Examples:
* Docker (Containerization)
* Kubernetes (K8s) (Orchestration - Managed: EKS, GKE, AKS)
* Docker Swarm (Simpler Orchestration)
* AWS Fargate / Google Cloud Run (Managed Container Execution)
* Render / Fly.io / Heroku (Can deploy containers directly)

**Pros (Containers):**
* Consistent environments (dev, staging, prod).
* Portability across different hosts/clouds.
* Easier scaling and management of complex applications (with orchestration).
* Packages application and dependencies together.
**Cons (Containers):**
* Learning curve for Docker and especially orchestration tools (Kubernetes).
* Adds complexity layer (building images, managing containers/orchestrator).
* Can still require underlying infrastructure management (unless using managed container platforms).",,,,
deploying-django-options,,,,5,Factors to Consider When Choosing,"
* **Ease of Use**: How much setup/management effort? (PaaS easiest)
* **Control**: Need for OS/infrastructure customization? (IaaS highest)
* **Scalability Needs**: Expected traffic volume and patterns?
* **Cost**: Budget constraints and pricing models (fixed vs. usage-based)?
* **Team Expertise**: DevOps/SysAdmin skills available?
* **Project Complexity**: Simple monolith vs. microservices?
* **Ecosystem**: Need for specific databases, caching, cloud provider integrations?
Start with the option that best matches your current needs and expertise. PaaS platforms like [Render](%7B%25%20url%20'demos:deploying_django_app_to_render'%20%25%7D) or [Heroku](%7B%25%20url%20'demos:deploying_django_app_to_heroku'%20%25%7D) are often excellent starting points for many Django developers. You can often migrate later if your needs evolve.",,,,
devops-mlops-demo,DevOps & MLOps Concepts,Learn about DevOps principles and how they apply to Machine Learning (MLOps) for efficient AI development and deployment.,"DevOps, MLOps, CI/CD, Infrastructure as Code, IaC, Monitoring, Machine Learning Operations, AI Deployment",0,Understanding DevOps & MLOps,"**DevOps** is a set of practices, tools, and a cultural philosophy that automate and integrate the processes between software development (Dev) and IT operations (Ops). It aims to shorten the development life cycle and provide continuous delivery with high software quality. When applied to Machine Learning, these principles evolve into **MLOps**.",,,,
devops-mlops-demo,,,,1,1. What is DevOps? Core Principles (CALMS),"DevOps is often summarized by the CALMS framework:
* **Culture**: Fostering collaboration, shared responsibility, and communication between development, operations, security, and other teams. Breaking down silos.
* **Automation**: Automating repetitive and manual tasks throughout the software lifecycle, including building, testing, deployment, and infrastructure provisioning.
* **Lean**: Applying lean principles to eliminate waste, optimize workflows, deliver value quickly, and gather feedback rapidly (e.g., Minimum Viable Product - MVP).
* **Measurement**: Continuously measuring performance, availability, quality, and usage to identify bottlenecks, understand impact, and drive improvements. Monitoring and logging are key.
* **Sharing**: Sharing knowledge, tools, successes, and failures across teams to promote learning and continuous improvement.
**Goal**: To increase an organization's ability to deliver applications and services at high velocity, evolving and improving products at a faster pace than organizations using traditional software development and infrastructure management processes.",,,,
devops-mlops-demo,,,,2,2. Key DevOps Practices & Tools,"
* **Continuous Integration (CI)**: Developers frequently merge code changes into a central repository, after which automated builds and tests are run. (Tools: Jenkins, GitLab CI, GitHub Actions, CircleCI).
* **Continuous Delivery/Deployment (CD)**: Automatically building, testing, and preparing code changes for release to production (Delivery), or automatically deploying every validated change to production (Deployment).
* **Infrastructure as Code (IaC)**: Managing and provisioning infrastructure (servers, networks, databases) through machine-readable definition files (code), rather than manual configuration. (Tools: Terraform, AWS CloudFormation, Azure Resource Manager, Ansible, Pulumi).
* **Monitoring and Logging**: Collecting, processing, and analyzing metrics and logs from applications and infrastructure to understand behavior, detect issues, and ensure performance/availability. (Tools: Prometheus, Grafana, ELK Stack/OpenSearch, Datadog, Splunk).
* **Microservices Architecture**: Structuring an application as a collection of small, independent, and loosely coupled services, often deployed and scaled independently.
* **Version Control**: Using systems like Git to track changes, manage branches, and collaborate on codebases.",yaml,Illustrative Snippet (Conceptual CI/CD Pipeline - YAML):,"# Example GitHub Actions workflow snippet (.github/workflows/ci-cd.yml)

name: Python CI/CD Example

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3 # Checks out repository code
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run linters (e.g., Flake8)
      run: flake8 .
    - name: Run tests (e.g., Pytest)
      run: pytest

  # Optional: Deployment job (runs only on push to main if tests pass)
  # deploy:
  #   needs: build-and-test # Depends on the previous job succeeding
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Deploy to production (example command)
  #     run: |
  #       echo ""Deploying application...""
  #       # Add actual deployment commands here (e.g., serverless deploy, docker push/run)
","This YAML snippet illustrates a basic CI/CD pipeline using GitHub Actions for a Python project. It defines jobs for building, testing (linting and running pytest), and optionally deploying the application."
devops-mlops-demo,,,,3,3. DevOps for ML/AI = MLOps,"MLOps applies DevOps principles to Machine Learning systems, addressing the unique complexities of the ML lifecycle:
* **Data & Model Versioning**: Tracking changes not just to code, but also to datasets and trained models is crucial for reproducibility and debugging. (Tools: DVC, Git LFS, MLflow Tracking).
* **Experiment Tracking**: Logging parameters, metrics, code versions, and artifacts for every ML experiment to compare results and ensure reproducibility. (Tools: MLflow, Weights & Biases, Comet ML, TensorBoard).
* **Continuous Training (CT)**: Automatically retraining models when new data becomes available or model performance degrades below a threshold.
* **Model Deployment Strategies**: Implementing strategies like canary releases, A/B testing, or shadow deployment specifically for ML models. (Tools: Seldon Core, KServe/KFServing, cloud provider services like SageMaker Endpoints).
* **Model Monitoring**: Tracking the performance of deployed models in production, looking for concept drift (changes in data distribution), data drift, prediction latency, and other ML-specific metrics. Alerting when performance degrades.
* **Feature Stores**: Centralized repositories for managing, discovering, and serving curated features for ML models, promoting consistency and reuse. (Tools: Feast, Tecton).
* **ML Pipelines/Orchestration**: Automating the entire ML workflow (data ingestion, preprocessing, training, evaluation, deployment) as a series of steps. (Tools: Kubeflow Pipelines, Airflow, MLflow Projects, Vertex AI Pipelines, SageMaker Pipelines).
**Challenge**: MLOps combines the challenges of traditional DevOps with the complexities of managing data, experiments, models, and specialized hardware (like GPUs).",dockerfile,Illustrative Snippet (Conceptual Dockerfile for ML App):,"# Use an official Python runtime as a parent image
FROM python:3.9-slim-buster

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container at /app
COPY requirements.txt .

# Install any needed packages specified in requirements.txt
# --no-cache-dir reduces image size
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code into the container at /app
COPY . .

# Copy pre-trained model file(s) into the container
# Ensure 'model.pkl' is in the same directory as the Dockerfile during build
COPY model.pkl ./

# Make port 80 available to the world outside this container (if it's a web service)
EXPOSE 80

# Define environment variable (optional)
ENV MODEL_PATH=/app/model.pkl
ENV FLASK_APP=app.py

# Run app.py when the container launches (example for a Flask API)
# Use exec form to make Flask the main process (PID 1)
CMD [""flask"", ""run"", ""--host=0.0.0.0"", ""--port=80""]

# For production, consider using a production-grade server like Gunicorn:
# CMD [""gunicorn"", ""--bind"", ""0.0.0.0:80"", ""app:app""]
","This Dockerfile sets up an environment for an ML application. It starts from a Python base image, installs dependencies, copies application code and a model file, exposes a port, and defines the command to run the application (e.g., a Flask API)."
devops-mlops-demo,,,,4,Conclusion,"DevOps principles � Culture, Automation, Lean, Measurement, Sharing � provide a foundation for building and delivering software more efficiently and reliably. MLOps adapts these principles to the unique lifecycle of machine learning systems, addressing challenges like data versioning, experiment tracking, continuous training, and model monitoring.
By embracing DevOps and MLOps practices, organizations can accelerate the development and deployment of high-quality AI/ML applications, ensure reproducibility, improve collaboration, and ultimately deliver more value from their data science investments.",,,,
django-concepts-demo,Key Django Concepts,Learn about key Django framework features.,"Django, Python, web framework, ORM, admin",0,Key Django Concepts Overview,This portfolio itself is built using Django! It's a powerful Python web framework designed for rapid development of secure and maintainable websites. Here's a look at some core concepts that make it effective:,,,,
django-concepts-demo,,,,1,1. Models & ORM (Object-Relational Mapper),"Instead of writing raw SQL, you define your database structure using Python classes called Models. Django's ORM handles the translation between your Python code and the database.
**Benefits**: Database abstraction (easier to switch databases), less SQL boilerplate, Pythonic data access, built-in migrations.",python,Example (`models.py`):,"from django.db import models
from django.utils import timezone

class Project(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField()
    date_created = models.DateField(default=timezone.now)
    # Relationships like ForeignKey, ManyToManyField are also defined here
    # skills = models.ManyToManyField(Skill)

    def __str__(self):
        return self.title","This Python code defines a Django model named `Project` with fields for title, description, and creation date. It also includes a `__str__` method for a human-readable representation of the object."
django-concepts-demo,,,,2,2. Views (Request Handling Logic),"Views are Python functions (or classes) that take a web request and return a web response. They contain the logic to fetch data from models, process user input (from forms), and decide which template to render.
**Benefits**: Separates business logic from presentation, allows complex request processing.",python,Example (`views.py`):,"from django.shortcuts import render, get_object_or_404
from .models import Project

def project_detail(request, project_slug):
    # Fetch data using the ORM
    project = get_object_or_404(Project, slug=project_slug)

    # Prepare context data for the template
    context = {
        'project': project,
        'page_title': project.title
    }
    # Render the template with the context
    return render(request, 'portfolio/project_detail.html', context)","This Python code snippet shows a Django view function `project_detail` that fetches a `Project` object based on a slug, prepares context data, and renders an HTML template."
django-concepts-demo,,,,3,3. Templates (Presentation Layer),"Django's template language allows you to embed dynamic content (variables) and logic (tags like loops and conditionals) within your HTML files. It supports template inheritance (`{% templatetag openblock %} extends 'portfolio/base.html' {% templatetag closeblock %}`) to reduce code duplication.
**Benefits**: Clean separation of presentation from logic, reusable template components, powerful built-in tags and filters.",html,Example (`project_detail.html`):,"{% templatetag openblock %} extends 'portfolio/base.html' {% templatetag closeblock %}

{% templatetag openblock %} block title {% templatetag closeblock %}{% templatetag openvariable %} project.title {% templatetag closevariable %}{% templatetag openblock %} endblock {% templatetag closeblock %}

{% templatetag openblock %} block content {% templatetag closeblock %}
  <h1>{% templatetag openvariable %} project.title {% templatetag closevariable %}</h1> {# Display variable #}
  <p>{% templatetag openvariable %} project.description|linebreaks {% templatetag closevariable %}</p> {# Use filter #}

  <h2>Skills Used:</h2>
  <ul>
    {% templatetag openblock %} for skill in project.skills.all {% templatetag closeblock %} {# Loop tag #}
      <li>{% templatetag openvariable %} skill.name {% templatetag closevariable %}</li>
    {% templatetag openblock %} empty {% templatetag closeblock %}
      <li>No skills listed.</li>
    {% templatetag openblock %} endfor {% templatetag closeblock %}
  </ul>
  <a href=""{% templatetag openblock %} url 'portfolio:all_projects' {% templatetag closeblock %}"">Back</a> {# URL tag #}
{% templatetag openblock %} endblock {% templatetag closeblock %}","This HTML snippet is a Django template that displays project details. It extends a base template, shows the project title and description, lists skills using a loop, and includes a link back to all projects."
django-concepts-demo,,,,4,4. Forms (Handling User Input),"Django's Forms library simplifies handling user input, including rendering HTML form elements, validating submitted data against defined rules, and cleaning the data.
**Benefits**: Automatic HTML generation, robust validation, CSRF protection integration, separation of validation logic.",python,Example (`forms.py`):,"from django import forms

class ContactForm(forms.Form):
    name = forms.CharField(max_length=100, required=True)
    email = forms.EmailField(required=True)
    message = forms.CharField(widget=forms.Textarea, required=True)","This Python code defines a Django form `ContactForm` with fields for name, email, and message, including basic validation rules like `required=True` and `max_length`."
django-concepts-demo,,,,5,Example (`template.html` for Forms):,,html,Example (`template.html`):,"<form method=""post"">
    {% templatetag openblock %} csrf_token {% templatetag closeblock %} {# Security token #}
    {% templatetag openvariable %} form.as_p {% templatetag closevariable %} {# Render form fields as paragraphs #}
    <button type=""submit"">Send</button>
</form>","This HTML snippet shows how to render a Django form in a template, including the CSRF token for security and using `form.as_p` to display form fields."
django-concepts-demo,,,,6,5. Admin Interface,"Django automatically generates a powerful and customizable administration interface based on your models. This allows trusted users to easily create, read, update, and delete content without needing custom views.
**Benefits**: Huge time saver for content management, customizable, handles authentication and permissions.",python,Example (`admin.py`):,"from django.contrib import admin
from .models import Project, Skill

# Simple registration
admin.site.register(Project)

# Registration with customization
@admin.register(Skill)
class SkillAdmin(admin.ModelAdmin):
    list_display = ('name', 'category')
    list_filter = ('category',)
    search_fields = ('name',)","This Python code shows how to register Django models (`Project` and `Skill`) with the Django admin interface, including customization options for the `SkillAdmin` like `list_display`, `list_filter`, and `search_fields`."
django-security-demo,Django Security Features,"Learn about Django's built-in security features like CSRF protection, XSS prevention, and SQL injection defense.","Django, security, web framework, CSRF, XSS, SQL Injection, portfolio",0,Understanding Django's Security,Building secure web applications is crucial. Django includes several built-in features to protect against common web vulnerabilities "out-of-the-box". Here's an overview of how Django helps keep this portfolio site secure:,,,,
django-security-demo,,,,1,1. Cross-Site Request Forgery (CSRF) Protection,"**What it is**: An attack where a malicious website tricks a user's browser into making an unwanted request to your site while the user is logged in (e.g., submitting a form without the user's intent).
**How Django Helps**: Django's `CsrfViewMiddleware` (enabled by default in `settings.py`) works with the `{% verbatim %}{% csrf_token %}{% endverbatim %}` template tag.
* A unique, secret token is generated for each user session.
* The `{% verbatim %}{% csrf_token %}{% endverbatim %}` tag embeds this token in a hidden field within every POST form.
* When the form is submitted, the middleware checks if the submitted token matches the one stored in the user's session. If they don't match or the token is missing, the request is rejected.
**Importance for this Portfolio**: Protects the Contact Form from being submitted maliciously by external sites on behalf of a logged-in user (if user accounts were enabled) or potentially used for spam relay if not properly secured.",django,Example (`template.html`):,"<form method=""post"">
    {% verbatim %}{% csrf_token %}{% endverbatim %} {# REQUIRED for POST forms #}
    {% verbatim %}{{ form.as_p }}{% endverbatim %} {# Render form fields as paragraphs #}
    <button type=""submit"">Send</button>
</form>","This Django template snippet shows a form with the `csrf_token` tag, which is essential for protecting against Cross-Site Request Forgery attacks in POST requests."
django-security-demo,,,,2,2. SQL Injection Prevention,"**What it is**: An attack where malicious SQL code is inserted into data entry fields (like a search box or form input) to manipulate the database (e.g., steal data, delete records).
**How Django Helps**: Django's **ORM (Object-Relational Mapper)** uses parameterized queries by default. When you use methods like `Model.objects.filter(name=user_input)` or `Model.objects.get(id=user_id)`, the ORM safely separates the query structure from the user-provided data. The database driver correctly escapes the input, preventing it from being interpreted as SQL code.
**Importance for this Portfolio**: Protects database queries generated by the Search feature, admin interface, and potentially any future features involving user input that interacts with the database, preventing data theft or corruption.",python,Example (`views.py` - Safe ORM Query):,"from .models import Project
from django.db.models import Q

def search_results_view(request):
    query = request.GET.get('q', '')
    results = Project.objects.none() # Default to no results
    if query:
        # Django ORM automatically parameterizes 'query', preventing SQL injection
        results = Project.objects.filter(
            Q(title__icontains=query) | Q(description__icontains=query)
        )
    # ... then render template with results ...","This Python snippet demonstrates a safe Django ORM query that uses `filter` with `Q` objects. The ORM handles parameterization, preventing SQL injection vulnerabilities when searching based on user input."
django-security-demo,,,,3,3. Cross-Site Scripting (XSS) Prevention,"**What it is**: An attack where malicious scripts (usually JavaScript) are injected into content that is then displayed to other users. When the victim's browser renders the page, the malicious script executes, potentially stealing cookies/session information or performing actions on their behalf.
**How Django Helps**: Django's template engine automatically escapes HTML characters by default. When you display a variable like `{% verbatim %}{{ user_comment }}{% endverbatim %}` in a template, characters like `<`, `>`, `&` are converted into their safe HTML entities (e.g., `&lt;`, `&gt;`, `&amp;`). This prevents any script tags or other potentially harmful HTML entered by one user from being executed by another user's browser.
**Importance for this Portfolio**: Protects against potential XSS if user-generated content were ever displayed (e.g., blog comments, future profile fields). Even displaying search queries (`{% verbatim %}{{ query }}{% endverbatim %}`) benefits from this default protection.
If `project.description` contained `<script>alert('XSS')</script>`, rendering it normally...
```django
<p>{% verbatim %}{{ project.description }}{% endverbatim %}</p>
```
...would output the following safe HTML, preventing the script from running:
```html
<p>&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</p>
```
To intentionally render HTML (use with extreme caution only on fully trusted data):
```django
{% verbatim %}{{ trusted_html_content|safe }}{% endverbatim %}
```",,,,
django-security-demo,,,,4,4. Other Security Features,"
* **Clickjacking Protection**: Prevents malicious sites from loading your site in an invisible frame to trick users into clicking things (`XFrameOptionsMiddleware`).
* **Password Hashing**: Stores user passwords securely using strong hashing algorithms (like PBKDF2 or Argon2) by default, making them very difficult to reverse engineer even if the database is compromised.
* **HTTPS/SSL Support**: While configuration happens at the web server/hosting level, Django provides settings (`SECURE_SSL_REDIRECT`, `SESSION_COOKIE_SECURE`, `CSRF_COOKIE_SECURE`) to enforce secure connections.
By leveraging these built-in features, Django provides a strong security foundation, reducing the risk of common web vulnerabilities for applications like this portfolio.",,,,
django-testing-demo,Django Testing Explained,"Learn about Django's testing framework, including model, view, and form testing.","Django, testing, unit testing, Python, model testing, view testing, form testing",0,Mastering Django Testing,Writing automated tests is crucial for building reliable and maintainable applications. Django includes a powerful testing framework based on Python's `unittest` module to help verify that different parts of your code work as expected. This prevents regressions when you add new features or refactor existing code. Tests are typically run using the command: `python manage.py test`.,,,,
django-testing-demo,,,,1,Why Write Tests?,"
* **Catch Bugs Early**: Tests identify problems during development, before they reach users.
* **Prevent Regressions**: When you change code, running tests confirms you haven't broken existing functionality.
* **Improve Design**: Writing testable code often leads to better, more modular designs.
* **Documentation**: Tests serve as executable documentation, showing how components are intended to be used.
* **Confidence in Refactoring**: Tests give you the confidence to improve your code knowing you can verify its correctness.",,,,
django-testing-demo,,,,2,1. Testing Models,"Model tests verify field defaults, custom methods, string representations (`__str__`), relationships, and any custom logic within your model's methods (like `save()`).",python,Example (`portfolio/tests.py` or `your_app_name/tests.py`):,"from django.test import TestCase
from .models import Project # Assuming Project model is in the same app (e.g., portfolio.models)
# from django.utils.text import slugify # If you manually check slugification logic

class ProjectModelTests(TestCase):

    @classmethod
    def setUpTestData(cls):
        # Create objects needed for tests once per class; runs once before all tests in the class.
        # This is more efficient for creating test data that doesn't change per test method.
        cls.project = Project.objects.create(
            title=""My Test Project"",
            description=""Test description.""
            # Add other required fields if any
        )

    def test_str_representation(self):
        """"""Test the __str__ method returns the project title.""""""
        self.assertEqual(str(self.project), ""My Test Project"")

    def test_slug_generation_on_save(self):
        """"""Test if slug is auto-generated correctly (assuming model's save() or a signal handles this).""""""
        # Example: if your model auto-generates 'my-test-project' from 'My Test Project'
        self.assertIsNotNone(self.project.slug, ""Slug should not be None after saving."")
        # More specific check if you know the exact slug generation logic:
        # self.assertEqual(self.project.slug, ""my-test-project"")
        # If slug generation is complex, you might test the slugify utility directly or mock parts of it.

    def test_default_order(self):
        """"""Test the default value of the 'order' field (assuming 'order' exists and has a default).""""""
        # This test assumes your Project model has an 'order' field with a default value, e.g., 0.
        # If 'order' is not a field, or has no default, this test would need adjustment or removal.
        # Example: self.assertEqual(self.project.order, 0)
        if hasattr(self.project, 'order'): # Check if the attribute exists
             self.assertEqual(self.project.order, 0) # Assuming default is 0
        else:
             # Optionally, skip the test or handle the absence of the field
             self.skipTest(""Project model does not have an 'order' field with a testable default."")


    # Add more tests for other model methods or properties
    # def test_custom_model_method(self):
    #    self.assertEqual(self.project.get_status_display(), ""Draft"") # Example","This Python code defines a Django test class `ProjectModelTests` for testing the `Project` model. It includes tests for the string representation (`__str__`), slug generation, and a hypothetical default order field."
django-testing-demo,,,,3,2. Testing Views,"View tests use Django's test `Client` to simulate browser requests (GET, POST, etc.). They check if the view returns the correct HTTP status code, uses the right template(s), passes the expected data (context) to the template, and handles form submissions or other view logic correctly.",python,Example (`portfolio/tests.py`):,"from django.test import TestCase, Client
from django.urls import reverse # To look up URL patterns by their name
from .models import Project # Or your specific model

class PortfolioViewTests(TestCase):

    @classmethod
    def setUpTestData(cls):
        # Create any data needed for the views, e.g., a project instance
        cls.project1 = Project.objects.create(title=""View Test Project"", slug=""view-test-project"", description=""..."")
        # Create more objects if needed for different view tests

    def setUp(self):
        # setUp runs before each test method in the class
        self.client = Client() # Create a test client instance for making requests

    def test_all_projects_view_status_code_and_template(self):
        """"""Test the all_projects page returns HTTP 200 OK and uses the correct template.""""""
        # Assuming you have a URL named 'all_projects' in your 'portfolio' app namespace
        url = reverse('portfolio:all_projects')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200, ""All projects page should return HTTP 200."")
        self.assertTemplateUsed(response, 'portfolio/all_projects.html', ""Should use all_projects.html template."")

    def test_project_detail_view_status_code_and_context(self):
        """"""Test the project_detail view returns 200 and passes the correct project in context.""""""
        # Assuming URL named 'project_detail' that takes a 'slug' argument
        url = reverse('portfolio:project_detail', kwargs={'slug': self.project1.slug})
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200, ""Project detail page should return HTTP 200."")
        self.assertTemplateUsed(response, 'portfolio/project_detail.html') # Check template
        self.assertEqual(response.context['project'], self.project1, ""Context should contain the correct project."")
        # You can also check for other context variables:
        # self.assertTrue('related_projects' in response.context)

    def test_project_detail_view_not_found(self):
        """"""Test that a non-existent project slug returns a 404.""""""
        url = reverse('portfolio:project_detail', kwargs={'slug': 'non-existent-slug'})
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404, ""Accessing a non-existent project should return HTTP 404."")

    # Example for testing a view that handles POST requests (e.g., a contact form view)
    # def test_contact_form_view_post_success(self):
    #    url = reverse('portfolio:contact_submit') # Assuming this URL exists
    #    form_data = {'name': 'Test User', 'email': 'test@example.com', 'message': 'Hello'}
    #    response = self.client.post(url, form_data)
    #    self.assertEqual(response.status_code, 302) # Expect a redirect on success
    #    self.assertRedirects(response, reverse('portfolio:contact_success_page')) # Check redirect URL","This Python code defines `PortfolioViewTests` for testing Django views. It uses the test client to check status codes, templates used, and context data for an 'all projects' view and a 'project detail' view, including a test for 404 errors."
django-testing-demo,,,,4,3. Testing Forms,"Form tests verify that the form correctly validates data (accepts valid input, rejects invalid input with appropriate error messages), cleans data as expected, and handles initial data correctly.",python,Example (`portfolio/tests.py` or `your_app_name/tests.py`):,"from django.test import TestCase
from .forms import ContactForm # Assuming ContactForm is in portfolio/forms.py (or your_app_name.forms)

class ContactFormTests(TestCase):

    def test_valid_contact_form(self):
        """"""Test the form with a complete set of valid data.""""""
        form_data = {
            'name': 'Test User',
            'email': 'test@example.com',
            'subject': 'Valid Subject',
            'message': 'This is a valid message.'
        }
        form = ContactForm(data=form_data)
        self.assertTrue(form.is_valid(), f""Form should be valid with data: {form_data}. Errors: {form.errors.as_json()}"")

    def test_invalid_contact_form_missing_email(self):
        """"""Test the form with a missing required field (email).""""""
        form_data = {
            'name': 'Test User',
            'subject': 'Missing Email Test',
            'message': 'Message content.'
            # 'email' is intentionally missing
        }
        form = ContactForm(data=form_data)
        self.assertFalse(form.is_valid(), ""Form should be invalid when email is missing."")
        self.assertIn('email', form.errors, ""There should be an error for the 'email' field."")
        self.assertEqual(form.errors['email'][0], 'This field is required.', ""Error message for missing email is incorrect."")

    def test_invalid_contact_form_invalid_email_format(self):
        """"""Test the form with an improperly formatted email address.""""""
        form_data = {
            'name': 'Test User',
            'email': 'not-an-email', # Invalid email format
            'subject': 'Invalid Email Format Test',
            'message': 'Message content.'
        }
        form = ContactForm(data=form_data)
        self.assertFalse(form.is_valid(), ""Form should be invalid with an incorrect email format."")
        self.assertIn('email', form.errors)
        # The exact error message might vary based on Django version or custom validators
        # self.assertEqual(form.errors['email'][0], 'Enter a valid email address.')


    # Add more tests for other validation rules, e.g., max length, specific choices, custom clean methods
    # def test_contact_form_subject_too_long(self):
    #    form_data = {
    #        'name': 'Test', 'email': 'test@example.com',
    #        'subject': 'This subject is way too long for the field ' * 10, # Assuming a max_length
    #        'message': 'Message'
    #    }
    #    form = ContactForm(data=form_data)
    #    self.assertFalse(form.is_valid())
    #    self.assertIn('subject', form.errors)
","This Python code defines `ContactFormTests` for testing a Django form. It includes tests for valid form submission, invalid submission due to a missing email, and invalid submission due to an improperly formatted email."
drf-concepts-demo,DRF Concepts,"Learn about key concepts in Django REST Framework (DRF) for building Web APIs, especially for ML/AI applications.","Django REST Framework, DRF, API, REST, Machine Learning, AI, Data Science, Serializers, ViewSets, Routers",0,Understanding Django REST Framework (DRF),"**Django REST Framework (DRF)** is a powerful and flexible toolkit built on top of Django for creating **Web APIs** (Application Programming Interfaces). In the context of ML/AI/DS, APIs are the standard way to make trained models accessible to other applications (web frontends, mobile apps, other services).",,,,
drf-concepts-demo,,,,1,1. Why DRF for ML/DS APIs?,"While simple APIs can be built with Flask or FastAPI, DRF offers advantages, especially when integrating with a larger Django application (like this portfolio!):
* **Integration**: Seamlessly integrates with Django's ORM, authentication, and permissions systems.
* **Serialization**: Provides powerful serializers to convert complex data (like Django model instances or querysets) into JSON (or other formats) suitable for APIs, and vice-versa for validating input data.
* **Browsable API**: Offers an automatically generated, web-browsable API interface, making it easy to test and explore your endpoints during development.
* **Authentication & Permissions**: Includes built-in support for various authentication schemes (token, session, OAuth) and fine-grained permission controls.
* **ViewSets & Routers**: Simplifies building standard CRUD (Create, Read, Update, Delete) interfaces for your models.
* **Throttling**: Built-in support for rate limiting API requests.
**Relevance**: Ideal for exposing ML model predictions, serving datasets, or providing programmatic access to results within a structured Django project.",,,,
drf-concepts-demo,,,,2,2. Core DRF Concepts Illustrated,"Building an API with DRF typically involves these components:

### a) Serializers (`serializers.py`)
Define how complex data (like model instances) is converted to JSON and how incoming JSON is validated and converted back to objects.",python,portfolio/serializers.py (or your_app_name/serializers.py),"# portfolio/serializers.py (or your_app_name/serializers.py)
from rest_framework import serializers
from .models import Project # Assuming Project model is in the current app's models.py
# Import related serializers if needed, e.g., for nested relationships
# from skills.serializers import SkillSerializer # Example for a 'skills' app

class ProjectSerializer(serializers.ModelSerializer):
    # Example of adding a related field (if 'skills' is ManyToMany and you have a SkillSerializer)
    # skills = SkillSerializer(many=True, read_only=True) # Makes skills readable in API output
    # Or, for a simpler representation if Skill model has a __str__ method:
    # skills = serializers.StringRelatedField(many=True, read_only=True)

    class Meta:
        model = Project
        # Specify fields to include in the API output
        # Ensure all these fields exist on your Project model
        fields = [
            'id', 'title', 'slug', 'description', 'image_url',
            'results_metrics', # e.g., a JSONField or TextField storing model performance
            'github_url', 'demo_url',
            'skills', # Will depend on how 'skills' is defined on the model and serializer
            'topics', # Similar to 'skills'
            'date_created', 'last_updated' # Common useful fields
        ]
        read_only_fields = ['slug', 'date_created', 'last_updated'] # Fields not expected in input or auto-set
        # 'slug' is often generated automatically from the title on model save.
        # 'date_created' and 'last_updated' are typically auto-managed by Django model fields.
",This Python code defines a `ProjectSerializer` for a Django REST Framework API. It specifies which fields of the `Project` model should be included in the API representation and which are read-only.
drf-concepts-demo,,,,3,b) Views / ViewSets (`views.py` or `api_views.py`),"Handle API request logic. ViewSets (like `ModelViewSet` or `ReadOnlyModelViewSet`) automatically provide standard operations (list, retrieve, create, update, delete) for a model.",python,portfolio/api_views.py (or your_app_name/api_views.py),"# portfolio/api_views.py (or your_app_name/api_views.py)
from rest_framework import viewsets, permissions
from .models import Project
from .serializers import ProjectSerializer

# ReadOnlyModelViewSet provides 'list' (all items) and 'retrieve' (single item) actions.
# For full CRUD, use viewsets.ModelViewSet.
class ProjectViewSet(viewsets.ReadOnlyModelViewSet):
    """"""
    API endpoint that allows projects to be viewed.
    Accessible at /api/projects/ (list) and /api/projects/<slug>/ (detail).
    """"""
    # queryset defines the initial set of objects the view will operate on.
    # Ensure your Project model has a 'date_created' field for this ordering.
    queryset = Project.objects.filter(is_published=True).order_by('-date_created') # Example: only show published projects
    serializer_class = ProjectSerializer # Specifies the serializer to use for this viewset.

    # permission_classes control who can access this API endpoint.
    # permissions.AllowAny is open access - suitable for public data or testing.
    # For production, consider permissions.IsAuthenticated or custom permissions.
    permission_classes = [permissions.AllowAny] # SUGGESTION: Note this is for demo; use stricter in production.

    # lookup_field specifies which model field should be used to look up individual model instances.
    # Default is 'pk'. Using 'slug' allows for more SEO-friendly URLs like /api/projects/my-project-slug/.
    lookup_field = 'slug'
","This Python code defines a `ProjectViewSet` for a Django REST Framework API. It's a read-only viewset that lists and retrieves published `Project` objects, using the `ProjectSerializer` and allowing any user to access it. It uses 'slug' for individual project lookups."
drf-concepts-demo,,,,4,c) URLs (`urls.py`),Map URLs to Views/ViewSets. DRF's Routers automatically generate URL patterns for ViewSets.,python,portfolio/urls.py or myproject/urls.py,"# portfolio/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import api_views # Import your api_views.py

router = DefaultRouter()
router.register(r'projects', api_views.ProjectViewSet, basename='project')

urlpatterns = [
    path('', include(router.urls)), # Generates /projects/ and /projects/<slug>/
]

# --- Example of how to include these app API URLs in your PROJECT's root urls.py ---
# # myproject/urls.py
# from django.contrib import admin
# from django.urls import path, include
#
# urlpatterns = [
#     path('admin/', admin.site.urls),
#     path('api/portfolio/', include('portfolio.urls')),
# ]
","This Python code sets up URL routing for a Django REST Framework API. It uses a `DefaultRouter` to automatically generate URLs for the `ProjectViewSet`, making project data accessible via endpoints like `/api/portfolio/projects/`."
drf-concepts-demo,,,,5,3. Use Case: Serving an ML Model,"While you could serve models directly from standard Django views, DRF provides a more structured and robust approach for creating a dedicated API endpoint:
* Create an **Input Serializer** to define the expected input features for your model (e.g., text, numerical values, image data). This serializer will validate the data sent in the API request.
* Create an **Output Serializer** (optional, but good practice) to structure the predictions returned by the API.
* Create an **API View** (e.g., inheriting from `rest_framework.views.APIView`):
    * Define a `post` method to handle incoming prediction requests.
    * Inside the `post` method:
        * Instantiate your Input Serializer with `request.data`.
        * Call `serializer.is_valid(raise_exception=True)` to validate the input. If invalid, DRF automatically returns a 400 Bad Request response.
        * Access validated data via `serializer.validated_data`.
        * Load your pre-trained ML model (e.g., from a `.pkl` file, a database, or a model registry). This should be done efficiently, perhaps loading the model once when the Django app starts if it's large.
        * Perform prediction using the validated input data.
        * Format the prediction results (e.g., using your Output Serializer or constructing a dictionary).
        * Return the results as a JSON `Response` from `rest_framework.response.Response`.
* Define a **URL route** in `urls.py` pointing to this API View (e.g., `/api/ml/predict-sentiment/`).
**Benefits**: Standardized request/response handling (JSON), clear input validation and error reporting, browsable API for easy testing during development, and seamless integration with Django's authentication and permission system to secure your model endpoint.",,,,
ethical-hacking-demo,Ethical Hacking in AI/ML,Learn about applying ethical hacking principles and an adversarial mindset to enhance the security of Machine Learning and AI systems.,"ethical hacking, security, machine learning, AI, adversarial attacks, data privacy, model security",0,Ethical Hacking for Secure AI/ML Systems,"**Ethical Hacking** involves probing systems for vulnerabilities with permission, mimicking malicious attackers to find weaknesses before they can be exploited. While distinct from core ML/DS development, applying an ethical hacking **mindset** is crucial for building secure and robust AI systems. It's about thinking adversarially about your data, models, and deployment infrastructure.",,,,
ethical-hacking-demo,,,,1,1. Why Think Like an Attacker?,"ML/AI systems introduce unique attack surfaces beyond traditional software vulnerabilities:
* **Data is a Valuable Target**: Training datasets can contain sensitive or proprietary information, making data pipelines, storage, and access controls prime targets for exfiltration or unauthorized access.
* **Models are Intellectual Property**: Trained models represent significant investment (time, compute, data) and intellectual property. Attackers might attempt model theft (extraction) or replication.
* **Model Integrity is Critical**: Attackers can try to manipulate model predictions through various means:
    * **Evasion Attacks**: Crafting inputs that cause misclassification at inference time (e.g., fooling an image classifier with minimal changes).
    * **Poisoning Attacks**: Injecting malicious data into the training set to degrade model performance, introduce backdoors, or cause biased outcomes.
* **Infrastructure Complexity & Misconfigurations**: ML systems often rely on complex infrastructure (cloud services like S3/GCS, Kubernetes, APIs, databases) which can have misconfigurations or vulnerabilities if not properly secured.
An ethical hacking approach helps proactively identify, assess, and mitigate these AI-specific risks alongside traditional security concerns.",,,,
ethical-hacking-demo,,,,2,2. Applying the Mindset to ML/AI/DS,"While ML/DS practitioners might not be conducting full-scale penetration tests themselves, they can adopt and advocate for these principles throughout the ML lifecycle:
* **Data Pipeline & Storage Security**:
    * Can unauthorized users access data? (Access Control Review)
    * Are transformation scripts vulnerable to injection? (Input Validation)
    * Is data encrypted in transit and at rest? (Encryption Practices)
    * Are there logs and audit trails? (Monitoring)
* **Model API & Endpoint Security**:
    * Apply standard web app security testing (OWASP Top 10): injection flaws, authN/authZ, input validation, XSS.
    * Test for rate limiting abuse and DoS.
* **Adversarial Robustness Testing (Model-Specific)**:
    * Generate adversarial examples (ART, CleverHans, TextAttack).
    * Explore model evasion techniques.
    * Consider defenses: adversarial training, input sanitization, defensive distillation.
* **Privacy Auditing & Data Leakage Prevention**:
    * Assess risks of model inversion or membership inference.
    * Review anonymization/pseudonymization techniques.
    * Consider privacy-preserving ML (federated learning, differential privacy).
* **Infrastructure Security & Configuration Management**:
    * Are cloud storage buckets secure?
    * Are secrets managed securely (Vault, AWS/GCP Secret Manager)?
    * Is access to environments restricted and monitored?
    * Are systems patched?",text,Conceptual Example: API Input Validation Mindset,"# Scenario: An API endpoint /api/model/predict expects JSON like {""text_input"": ""some user query""} for an NLP model.

# Ethical Hacking Mindset Questions to Ask:

# 1. What if the JSON is malformed or incomplete?
#    POST /api/model/predict Content-Type: application/json
#    Body: {""text_input"": ""hello world""  <-- Missing closing brace
#    Body: ""just a string, not json""
#    Body: {}  <-- Empty JSON object

# 2. What if unexpected data types are provided for fields?
#    POST /api/model/predict Content-Type: application/json
#    Body: {""text_input"": 12345}  <-- Number instead of string
#    Body: {""text_input"": null}
#    Body: {""text_input"": [""list"", ""of"", ""strings""]} <-- List instead of single string

# 3. What if the input is excessively long or resource-intensive?
#    POST /api/model/predict Content-Type: application/json
#    Body: {""text_input"": ""[A_VERY_VERY_LONG_STRING_OF_SEVERAL_MEGABYTES...]""}
#    Body: {""text_input"": ""??"" * 1000000} <-- Large number of emojis

# 4. What if the input contains special characters, control characters, or attempts injection?
#    (Assuming the backend processes this text in some way beyond just model inference)
#    POST /api/model/predict Content-Type: application/json
#    Body: {""text_input"": ""<script>alert('XSS')</script>""}
#    Body: {""text_input"": ""; DROP TABLE users; --""}
#    Body: {""text_input"": ""{\""nested_json_key\"": \""value\""}""} <-- JSON string within JSON field

# 5. What if other HTTP methods are used?
#    GET /api/model/predict
#    PUT /api/model/predict

# Expected Outcome:
# The API should gracefully handle these invalid/unexpected inputs.
# - Return appropriate HTTP error codes (e.g., 400 Bad Request, 405 Method Not Allowed, 413 Payload Too Large).
# - Provide clear, non-verbose error messages (avoiding internal details/stack traces).
# - Not crash, hang, or exhibit other unintended behavior.
# - Log suspicious attempts for monitoring.","This text outlines questions an ethical hacker would ask when testing an API endpoint that expects JSON input for an NLP model. It covers malformed JSON, unexpected data types, excessively long inputs, special characters/injection attempts, and incorrect HTTP methods, emphasizing the need for graceful error handling and security."
ethical-hacking-demo,,,,3,Conclusion,"Integrating an ethical hacking mindset into the ML/AI/DS lifecycle doesn't necessarily mean every data scientist becomes a penetration tester. It means fostering a culture of security awareness, proactively considering potential weaknesses in data handling, model integrity, API design, and deployment infrastructure. By thinking about how an attacker might exploit the system, developers and researchers can contribute to building more secure, robust, and trustworthy AI applications that better protect user data and maintain system integrity.",,,,
feature-engineering-demo,Feature Engineering Concepts,Learn about Feature Engineering techniques used to improve Machine Learning model performance by transforming raw data into informative features.,"Feature Engineering, Machine Learning, Data Science, Data Preprocessing, Feature Scaling, Encoding, Imputation, Feature Creation",0,Understanding Feature Engineering,"**Feature Engineering** is the process of using domain knowledge and data manipulation techniques to select, transform, and create features (input variables) from raw data to improve the performance of machine learning models. It's often considered one of the most critical and impactful steps in the ML workflow.",,,,
feature-engineering-demo,,,,1,1. Why is Feature Engineering Important?,"Raw data is often not in an optimal format for machine learning algorithms. Feature engineering helps bridge this gap:
* **Improves Model Performance**: Well-engineered features can expose underlying patterns more clearly to the model, leading to higher accuracy, better generalization, and more robust predictions.
* **Handles Data Issues**: Addresses common data problems like missing values, outliers, and incompatible data types (e.g., text) that many algorithms cannot handle directly.
* **Reduces Complexity**: Can sometimes simplify models by creating more informative features, potentially reducing the need for highly complex model architectures.
* **Algorithm Compatibility**: Transforms data into formats required by specific algorithms (e.g., converting categorical features to numbers for linear models).
* **Incorporates Domain Knowledge**: Allows practitioners to inject valuable domain expertise into the modeling process by creating features that capture relevant real-world relationships.
**Quote often cited**: ""Coming up with features is difficult, time-consuming, requires expert knowledge. 'Applied machine learning' is basically feature engineering."" - Andrew Ng",,,,
feature-engineering-demo,,,,2,2. Common Feature Engineering Techniques,"Numerous techniques exist, often applied in combination:

### a) Handling Missing Data (Imputation)
Replacing missing values (NaNs) with estimated or representative values.
* **Mean/Median/Mode Imputation**: Replace missing numerical values with the mean or median, or categorical values with the mode. Simple but can distort variance.
* **Constant Value**: Replace missing values with a fixed constant (e.g., 0, -1, or ""Missing"").
* **Model-Based Imputation**: Use other features to predict the missing value using an ML model (e.g., KNNImputer, IterativeImputer in Scikit-learn).",python,Conceptual Snippet (Mean Imputation with Pandas):,"import pandas as pd
import numpy as np

data = {'age': [25, 30, np.nan, 35], 'income': [50000, 60000, 75000, np.nan]}
df = pd.DataFrame(data)

# Calculate mean age (excluding NaN)
mean_age = df['age'].mean()
print(f""Mean age: {mean_age:.1f}"")

# Fill missing 'age' values with the mean
df['age'].fillna(mean_age, inplace=True)
print(""DataFrame after age imputation:"")
print(df)
#   age   income
# 0  25.0  50000.0
# 1  30.0  60000.0
# 2  30.0  75000.0  <- NaN replaced with mean (30.0)
# 3  35.0      NaN",This Python snippet demonstrates mean imputation using Pandas. It calculates the mean of the 'age' column (ignoring NaNs) and then fills the missing 'age' values with this calculated mean.
feature-engineering-demo,,,,3,b) Handling Categorical Data (Encoding),"Converting non-numerical category labels into numerical representations.
* **One-Hot Encoding**: Creates new binary (0/1) columns for each category. Prevents implying order but can lead to high dimensionality. (Scikit-learn `OneHotEncoder`, Pandas `get_dummies`).
* **Label Encoding**: Assigns a unique integer to each category (e.g., 'Red': 0, 'Green': 1, 'Blue': 2). Simple but implies an ordinal relationship which might mislead some models. (Scikit-learn `LabelEncoder`).
* **Ordinal Encoding**: Similar to Label Encoding, but used when categories have a meaningful order (e.g., 'Low': 0, 'Medium': 1, 'High': 2). (Scikit-learn `OrdinalEncoder`).
* **Target Encoding**: Replaces category with the mean of the target variable for that category. Powerful but prone to overfitting if not handled carefully.",python,Conceptual Snippet (One-Hot Encoding with Pandas):,"import pandas as pd

data = {'color': ['Red', 'Green', 'Blue', 'Green'], 'value': [10, 15, 5, 12]}
df = pd.DataFrame(data)

# Create dummy variables for the 'color' column
color_dummies = pd.get_dummies(df['color'], prefix='color', drop_first=False) # drop_first=True avoids multicollinearity
print(""One-Hot Encoded columns:"")
print(color_dummies)
#    color_Blue  color_Green  color_Red
# 0         0            0          1
# 1         0            1          0
# 2         1            0          0
# 3         0            1          0

# Join back with original dataframe (optional)
# df_encoded = pd.concat([df.drop('color', axis=1), color_dummies], axis=1)
# print(""\nDataFrame after encoding:"")
# print(df_encoded)","This Python snippet demonstrates one-hot encoding using Pandas' `get_dummies` function. It converts the categorical 'color' column into multiple binary columns, one for each unique color."
feature-engineering-demo,,,,4,c) Feature Scaling,"Adjusting the range or distribution of numerical features.
* **Standardization (Z-score Scaling)**: Rescales features to have zero mean and unit variance. Useful for algorithms sensitive to feature scales (e.g., SVM, PCA, Linear Regression with regularization). (Scikit-learn `StandardScaler`).
* **Normalization (Min-Max Scaling)**: Rescales features to a specific range, typically [0, 1] or [-1, 1]. Useful for algorithms requiring bounded inputs (e.g., some neural networks). (Scikit-learn `MinMaxScaler`).",python,Conceptual Snippet (Standardization with Scikit-learn):,"from sklearn.preprocessing import StandardScaler
import numpy as np

# Example data (e.g., feature values)
data = np.array([[100], [150], [120], [130], [1000]]) # Note the outlier

scaler = StandardScaler()

# Fit the scaler (calculates mean and std dev) and transform the data
scaled_data = scaler.fit_transform(data)

print(""Original Data:\n"", data.flatten())
print(""Mean:"", scaler.mean_[0])
print(""Scale (Std Dev):"", scaler.scale_[0])
print(""Standardized Data (Z-scores):\n"", scaled_data.flatten())
# Output shows data centered around 0 with unit variance",This Python snippet demonstrates feature standardization using Scikit-learn's `StandardScaler`. It transforms the data to have a mean of 0 and a standard deviation of 1.
feature-engineering-demo,,,,5,d) Feature Creation / Transformation,"Creating new features from existing ones.
* **Interaction Features**: Combining two or more features (e.g., multiplying `price` and `quantity` to get `total_sales`).
* **Polynomial Features**: Creating polynomial terms (e.g., square or cube) of existing features to capture non-linear relationships. (Scikit-learn `PolynomialFeatures`).
* **Binning/Discretization**: Converting continuous numerical features into discrete categories or bins (e.g., grouping ages into 'Child', 'Adult', 'Senior').
* **Log Transformation**: Applying a logarithm to features, often used to handle skewed distributions or reduce the impact of outliers.
* **Date/Time Features**: Extracting components like year, month, day of week, hour from date/time columns.",,,,
feature-engineering-demo,,,,6,e) Feature Extraction,"Deriving new, often lower-dimensional features from complex raw data.
* **Text Data**: Techniques like Bag-of-Words (BoW), TF-IDF (Term Frequency-Inverse Document Frequency), Word Embeddings (Word2Vec, GloVe, FastText), or outputs from Transformer models (BERT embeddings).
* **Image Data**: Using pre-trained Convolutional Neural Networks (CNNs) to extract feature vectors, or applying techniques like SIFT, SURF, or Histogram of Oriented Gradients (HOG).
* **Dimensionality Reduction**: Techniques like Principal Component Analysis (PCA) or t-SNE which create new, lower-dimensional features that capture most of the original data's variance or structure.",,,,
feature-engineering-demo,,,,7,3. Tools for Feature Engineering,"While feature engineering often involves custom code, several libraries provide powerful tools:
* **Pandas**: The workhorse for data manipulation in Python.
* **NumPy**: Fundamental package for numerical computation.
* **Scikit-learn**: Offers preprocessing tools (`sklearn.preprocessing`), feature extraction (`sklearn.feature_extraction`, `sklearn.decomposition`). Its `Pipeline` object is crucial.
* **Feature-engine**: Dedicated Python library for feature engineering techniques, Scikit-learn compatible.
* **Category Encoders**: Library for advanced categorical encoding.
* **Domain-Specific Libraries**: NLTK/spaCy for text, OpenCV/Pillow for images.",,,,
feature-engineering-demo,,,,8,Conclusion,"Feature engineering is both an art and a science, blending domain knowledge with technical data manipulation skills. It's a critical, iterative process that directly impacts the success of machine learning projects.
By carefully selecting, transforming, and creating features, practitioners can significantly enhance model performance, handle diverse data types, and build more robust and interpretable AI systems. Mastering feature engineering techniques is a key skill for any effective Data Scientist or Machine Learning Engineer.",,,,
generative-ai-demo,Generative AI Concepts,"Learn about Generative AI, including how it works, its applications in text, image, and code generation, and its role in modern AI.","Generative AI, GenAI, Large Language Models, LLM, Diffusion Models, GANs, VAEs, AI Content Generation, Machine Learning",0,Understanding Generative AI,"**Generative Artificial Intelligence (Generative AI or GenAI)** refers to a class of AI models capable of creating new, original content (like text, images, music, code, or synthetic data) that resembles the data it was trained on. Unlike discriminative models that classify or predict based on input, generative models learn underlying patterns and distributions to *generate* novel outputs.",,,,
generative-ai-demo,,,,1,1. How Does Generative AI Work? (Core Idea),"At its core, Generative AI learns the underlying probability distribution of a dataset. By sampling from this learned distribution, it can generate new data points that are statistically similar to the original data.

Key model architectures that enable this include:
* **Generative Adversarial Networks (GANs)**: Consist of two competing neural networks: a Generator (creates fake data) and a Discriminator (tries to distinguish fake data from real data). They train together, with the Generator getting better at fooling the Discriminator, resulting in highly realistic outputs (especially images).
* **Variational Autoencoders (VAEs)**: Learn a compressed representation (latent space) of the data and can then generate new data by sampling points from this latent space and decoding them. Often used for image generation and data augmentation.
* **Transformers (especially for Language)**: Architectures like GPT (Generative Pre-trained Transformer) use self-attention mechanisms to learn long-range dependencies in sequential data. They excel at text generation, translation, summarization, and code generation by predicting the next word/token in a sequence.
* **Diffusion Models**: A newer class of models that learn to reverse a process of gradually adding noise to data. By starting with random noise and iteratively removing it following the learned process, they can generate high-fidelity images and other data types. (Examples: DALL-E 2/3, Stable Diffusion, Midjourney).

These models are typically trained on massive datasets, enabling them to learn intricate patterns and generate diverse, coherent outputs.",,,,
generative-ai-demo,,,,2,2. Common Applications of Generative AI,"Generative AI is being applied across numerous domains:
* **Content Creation**: Generating articles, marketing copy, emails, stories, scripts (Text Generation - e.g., ChatGPT, Claude); creating realistic images, art, illustrations from text descriptions (Image Generation - e.g., Stable Diffusion, Midjourney); composing music or sound effects.
* **Software Development**: Generating code snippets, completing code, finding bugs, generating unit tests (Code Generation - e.g., GitHub Copilot, ChatGPT).
* **Data Augmentation**: Creating synthetic data (e.g., images, tabular data) to supplement limited real-world datasets for training more robust ML models.
* **Drug Discovery & Materials Science**: Generating novel molecular structures or material compositions with desired properties.
* **Design & Art**: Assisting designers with creating prototypes, generating artistic styles, creating virtual worlds or game assets.
* **Personalization**: Generating personalized recommendations, summaries, or communication styles.
* **Simulation**: Creating realistic simulated environments for training autonomous systems (e.g., self-driving cars).",,,,
generative-ai-demo,,,,3,3. Role in the Broader ML/AI Ecosystem,"Generative AI complements traditional discriminative AI and contributes in several ways:
* **Enhancing Creativity & Productivity**: Acts as a powerful tool for artists, writers, developers, and researchers to brainstorm, prototype, and generate content faster.
* **Addressing Data Scarcity**: Synthetic data generation can help overcome limitations where real-world data is scarce, expensive, or privacy-sensitive.
* **Improving Model Robustness**: Data augmentation using generative models can expose discriminative models to a wider variety of examples, potentially improving their generalization.
* **Enabling New Applications**: Opens doors to entirely new applications focused on creation, simulation, and hyper-personalization that were previously infeasible.
* **Understanding Data Distributions**: The process of building generative models forces a deeper understanding of the underlying structure and patterns within data.",,,,
generative-ai-demo,,,,4,4. Why Do Outputs Vary? (Prompt Response Differences),"You might notice that asking the same prompt multiple times, or asking different generative AI models the same prompt, can yield very different answers. This variability stems from several factors:
* **Stochasticity (Randomness)**: Most generative models incorporate an element of randomness during the generation process. For language models predicting the next word, instead of always picking the single most likely word, they often sample from a probability distribution over possible next words. This allows for more diverse and creative outputs but means regeneration can produce different results.
* **Sampling Parameters (e.g., Temperature)**: Parameters like ""temperature"" control the randomness of the sampling. Higher temperatures increase randomness (more creative, potentially less coherent), while lower temperatures make the output more deterministic and focused (potentially repetitive). Different models or sessions might use different default temperatures.
* **Model Architecture & Training Data**: Different AI models (e.g., GPT-3.5 vs. GPT-4 vs. Claude vs. Llama) have different underlying architectures, were trained on different (though often overlapping) massive datasets, and have different fine-tuning objectives. This leads to inherent differences in their knowledge, style, and capabilities.
* **Prompt Sensitivity**: Even slight variations in the input prompt phrasing, context, or preceding conversation can significantly alter the model's output trajectory.
* **Internal State & Context Window**: Models often maintain an internal state based on the current conversation. The same prompt asked within different conversational contexts will likely yield different responses.
* **Model Updates & Versions**: Models are constantly being updated and retrained by their developers, so the same model might give different answers today compared to last month.

This variability is often a feature, enabling creativity and exploration, but it also means users need to understand that there isn't always a single ""correct"" generative answer, especially for open-ended prompts.",python,Conceptual Snippet (API Call with Temperature):,"# Conceptual example using a hypothetical API client
# (Actual APIs like OpenAI, Anthropic, Cohere have specific libraries/formats)

# import some_genai_library

# client = some_genai_library.Client(api_key=""YOUR_API_KEY"")

prompt = ""Write a short poem about a rainy day in Stoke-on-Trent.""

# --- Request 1: Lower temperature (more focused) ---
try:
    # response1 = client.generate(
    #     prompt=prompt,
    #     model=""some-large-model"",
    #     max_tokens=100,
    #     temperature=0.3 # Lower temperature -> less random
    # )
    # print(""Response 1 (Temp=0.3):\n"", response1.text)
    print(""Conceptual Response 1 (Temp=0.3):\nGrey skies weep on Potteries' clay,\nDamp streets reflect the fading day.\n..."")
except Exception as e:
    print(f""Error generating response 1: {e}"")


# --- Request 2: Higher temperature (more creative/random) ---
try:
    # response2 = client.generate(
    #     prompt=prompt,
    #     model=""some-large-model"",
    #     max_tokens=100,
    #     temperature=0.9 # Higher temperature -> more random
    # )
    # print(""\nResponse 2 (Temp=0.9):\n"", response2.text)
    print(""\nConceptual Response 2 (Temp=0.9):\nOatcakes forgotten, the drizzle descends,\nA thousand grey chimneys make misty amends.\n..."")
except Exception as e:
    print(f""Error generating response 2: {e}"")

# Running these two conceptual requests would likely yield different poems due to temperature.
","This conceptual Python snippet illustrates how adjusting the 'temperature' parameter in an API call to a generative AI model can influence the randomness and creativity of the output, leading to different responses for the same prompt."
generative-ai-demo,,,,5,5. Ethical Considerations & Challenges,"The power of generative AI also brings significant challenges:
* **Misinformation & Deepfakes**: Ease of generating realistic but fake text, images, and videos can be exploited for malicious purposes.
* **Bias Amplification**: Models can learn and perpetuate harmful biases present in their vast training datasets.
* **Copyright & Ownership**: Questions arise about the ownership of AI-generated content and whether models infringe on copyright by learning from existing works.
* **Authenticity & Plagiarism**: Difficulty in distinguishing human-created content from AI-generated content.
* **Environmental Cost**: Training large generative models requires significant computational resources and energy.
* **Job Displacement**: Potential impact on creative professions and other roles involving content generation.
* **Security Risks**: Potential for misuse in generating phishing emails, malicious code, or propaganda.

Developing and deploying generative AI responsibly requires ongoing research, ethical guidelines, and careful consideration of potential societal impacts.",,,,
generative-ai-demo,,,,6,Conclusion,"Generative AI represents a significant leap forward in artificial intelligence, moving beyond analysis and prediction to creation. Models like GANs, VAEs, Transformers, and Diffusion Models enable the generation of diverse and often surprisingly coherent content across various modalities.

While offering immense potential for creativity, productivity, and scientific discovery, the development and deployment of generative AI must be guided by careful consideration of its capabilities, limitations, and ethical implications to ensure its benefits are realized responsibly.",,,,
go-concepts-demo,Go (Golang) in ML/AI,"Learn about Go (Golang) and its applications in Machine Learning and Data Science infrastructure, focusing on concurrency and performance.","Go, Golang, machine learning, AI, data science, infrastructure, concurrency, backend, API, MLOps",0,Go (Golang) for ML/AI Infrastructure,"While Python dominates core ML model development, **Go (Golang)** is increasingly used for building the **performant infrastructure and backend services** that support ML/AI systems. Its strengths lie in simplicity, concurrency, and speed.",,,,
go-concepts-demo,,,,1,1. Why Use Go in the ML/AI Ecosystem?,"Go is typically chosen for specific components where its advantages shine:
* **Performance**: Go compiles to efficient machine code, often resulting in faster execution than interpreted languages like Python for CPU-bound tasks and network services.
* **Concurrency**: Go has excellent built-in support for concurrency using **Goroutines** (lightweight, concurrently executing functions) and **Channels** (for typed, synchronized communication between goroutines). This makes it ideal for handling many simultaneous requests (like API calls) or parallelizing data processing tasks.
* **Simplicity & Readability**: Go has a relatively small, clean syntax and a strong emphasis on explicitness, making code easier to read, understand, and maintain, especially in larger teams or complex systems.
* **Static Typing**: Offers the benefits of type safety, helping catch many errors at compile time rather than at runtime.
* **Fast Compilation**: Quick build times improve the development iteration cycle.
* **Standard Library**: Provides a rich standard library, especially for networking, HTTP, and file system operations.
* **Ecosystem for Infrastructure Tools**: Many popular infrastructure tools (Docker, Kubernetes, Terraform, Prometheus) are written in Go, making it a natural fit for MLOps and platform engineering roles.

**Relevance**: Go is frequently used for building high-performance API servers to serve ML models (often models trained in Python), data processing pipelines, infrastructure management tools, and backend microservices within a larger ML system.",,,,
go-concepts-demo,,,,2,2. Key Go Concepts Illustrated,"While we can't run Go directly in this browser environment, these conceptual snippets illustrate core ideas:

### a) Goroutines & Channels (Lightweight Concurrency)",go,Goroutines & Channels Example:,"package main

import (
	""fmt""
	""sync"" // For WaitGroup
	""time""
)

// worker function that will be run as a goroutine
func worker(id int, wg *sync.WaitGroup, messages chan string) {
	defer wg.Done() // Decrement counter when goroutine finishes

	fmt.Printf(""Worker %d starting\n"", id)
	time.Sleep(time.Second) // Simulate some work
	message := fmt.Sprintf(""Worker %d done"", id)
	messages <- message // Send a message to the channel
	fmt.Printf(""Worker %d finished\n"", id)
}

func main() {
	numWorkers := 3
	var wg sync.WaitGroup // Create a WaitGroup to wait for all goroutines
	messages := make(chan string, numWorkers) // Buffered channel to collect messages

	fmt.Println(""Starting goroutines..."")
	for i := 1; i <= numWorkers; i++ {
		wg.Add(1) // Increment counter for each goroutine
		go worker(i, &wg, messages) // Launch worker goroutine
	}

	// Goroutine to wait for all workers and then close the channel
	go func() {
		wg.Wait()      // Wait for all goroutines to complete
		close(messages) // Close the channel once all messages are sent
	}()

	fmt.Println(""Waiting for workers to finish and collecting messages..."")
	// Receive messages from the channel
	for msg := range messages {
		fmt.Println(""Received:"", msg)
	}

	fmt.Println(""All workers completed."")
	// Output will show workers starting, finishing, and messages being received.
	// Order of worker finishing might vary due to concurrency.
}
",Goroutines enable easy concurrent execution. Channels provide a safe way for goroutines to communicate and synchronize. `sync.WaitGroup` is used here to wait for all goroutines to complete.
go-concepts-demo,,,,3,b) Simple HTTP API Server for Model Inference,,go,Simple HTTP API Server Example:,"package main

import (
	""encoding/json""
	""log""
	""net/http""
	// ""your_project/model_loader"" // Hypothetical package for model loading & inference
)

// PredictionRequest defines the expected structure of the incoming JSON request.
// struct tags `json:""features""` define how JSON keys map to struct fields.
type PredictionRequest struct {
	Features    []float64 `json:""features""`
	ModelName   string    `json:""model_name,omitempty""` // Optional field
}

// PredictionResponse defines the structure of the JSON response.
type PredictionResponse struct {
	Prediction string  `json:""prediction""`
	Confidence float64 `json:""confidence,omitempty""` // Optional field
	Error      string  `json:""error,omitempty""`      // For error messages
}

// handlePredict is the HTTP handler function for the /predict endpoint.
func handlePredict(w http.ResponseWriter, r *http.Request) {
	// Only allow POST requests
	if r.Method != http.MethodPost {
		http.Error(w, ""Only POST method is allowed"", http.StatusMethodNotAllowed)
		return
	}

	// Ensure request body is JSON
	if r.Header.Get(""Content-Type"") != ""application/json"" {
		http.Error(w, ""Content-Type must be application/json"", http.StatusUnsupportedMediaType)
		return
	}

	var req PredictionRequest
	// Decode the JSON request body into the PredictionRequest struct.
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields() // Important for strict input validation
	err := decoder.Decode(&req)
	if err != nil {
		// Handle various decoding errors (e.g., malformed JSON, type mismatch)
		http.Error(w, ""Invalid request payload: ""+err.Error(), http.StatusBadRequest)
		return
	}
	defer r.Body.Close()

	// Basic validation for features
	if len(req.Features) == 0 {
		http.Error(w, ""Input 'features' array cannot be empty"", http.StatusBadRequest)
		return
	}

	// --- Placeholder for actual ML model inference ---
	// This is where you would call your model prediction logic.
	// Example:
	// predictionResult, confidenceScore, err := model_loader.Predict(req.ModelName, req.Features)
	// if err != nil {
	//     http.Error(w, ""Error during model prediction: ""+err.Error(), http.StatusInternalServerError)
	//     return
	// }
	predictionResult := ""Iris-setosa"" // Dummy response
	confidenceScore := 0.987          // Dummy response
	// --- End Placeholder ---

	resp := PredictionResponse{Prediction: predictionResult, Confidence: confidenceScore}

	// Encode the response struct as JSON and send it back.
	w.Header().Set(""Content-Type"", ""application/json"")
	w.WriteHeader(http.StatusOK) // Explicitly set status code
	if err := json.NewEncoder(w).Encode(resp); err != nil {
		// This error is less common but means we couldn't write the response.
		log.Printf(""Error encoding response: %v"", err)
		// Can't send http.Error here as headers might have been written.
	}
}

func main() {
	// Register the handler function for the /predict URL pattern.
	http.HandleFunc(""/api/v1/predict"", handlePredict)

	port := "":8080""
	log.Printf(""Starting HTTP server on port %s...\n"", port)
	log.Println(""Listening for requests at http://localhost"" + port + ""/api/v1/predict"")

	// Start the HTTP server. http.ListenAndServe blocks until an error occurs.
	// For production, consider using a configurable address and more robust error handling.
	if err := http.ListenAndServe(port, nil); err != nil {
		log.Fatalf(""Failed to start server: %v"", err)
	}
}
","Go's standard library (`net/http`, `encoding/json`) makes building efficient and robust HTTP servers relatively straightforward, ideal for creating model serving APIs."
go-concepts-demo,,,,4,3. Typical Use Cases in ML/AI/DS,"
* **High-Performance Model Serving APIs**: Creating fast, concurrent APIs to serve predictions from models often trained in Python. These Go services can load models (e.g., via ONNX, TensorFlow Lite, or custom C bindings to Python libraries) and handle a large number of incoming requests efficiently.
* **Data Processing & ETL Pipelines**: Building efficient components for data ingestion, transformation, and loading, especially for tasks involving heavy I/O, network communication, or parallel processing.
* **Infrastructure & MLOps Tools**: Developing custom command-line interfaces (CLIs), agents, controllers, or other tools for deployment automation, monitoring, logging, and managing ML infrastructure (similar to how Kubernetes, Docker, and Terraform are built).
* **Real-time Systems & Edge Computing**: Implementing backend components for systems requiring low latency and high throughput that might incorporate ML features, or deploying lightweight Go applications on edge devices.
* **Networking Services**: Building proxies, load balancers, or other network-intensive services that sit in front of or between ML components.

While you wouldn't typically write the core model training loop (which often involves extensive numerical computation and Python's rich data science libraries) in Go, it's a valuable language for building the robust, scalable, and performant systems *around* the ML models.",,,,
java-concepts-demo,Java in ML/AI,"Learn about Java's role in the Machine Learning and Data Science ecosystem, including Big Data (Spark, Hadoop) and enterprise AI systems.","Java, Big Data, Spark, Hadoop, enterprise AI, JVM, machine learning infrastructure",0,Java in the ML/AI Landscape,"**Java** is a robust, object-oriented, platform-independent language widely used in large **enterprise systems** and forming the backbone of much of the **Big Data ecosystem** (like Hadoop and parts of Spark). While Python dominates ML model development, Java plays a crucial role in integrating these models and handling large-scale data infrastructure.",,,,
java-concepts-demo,,,,1,1. Key Java Features & Concepts,"
* **Platform Independent (JVM)**: Java code compiles to bytecode that runs on the Java Virtual Machine (JVM), allowing it to run on almost any operating system without recompilation (""Write Once, Run Anywhere"").
* **Strongly Typed**: Variables must have declared types, which helps catch many errors at compile time rather than runtime.
* **Object-Oriented Programming (OOP)**: Enforces OOP principles (encapsulation, inheritance, polymorphism) rigorously, facilitating the creation of modular and reusable code.
* **Large Standard Library & Ecosystem**: Offers extensive built-in libraries (Java Class Library) and a vast number of third-party libraries and frameworks for various tasks.
* **Memory Management**: Features automatic garbage collection, which simplifies memory management for developers by handling the deallocation of objects that are no longer in use.
* **Concurrency**: Provides mature and robust support for multi-threading and concurrency utilities (e.g., `java.util.concurrent` package), essential for building high-performance applications.

**Relevance**: Its robustness, platform independence, strong typing, extensive ecosystem, and concurrency features make it suitable for building large-scale, reliable enterprise applications and critical data infrastructure.",,,,
java-concepts-demo,,,,2,2. Java in the Big Data Ecosystem,"Java is foundational to many key Big Data technologies due to its performance, scalability, and the JVM ecosystem:
* **Apache Hadoop**: The core components of Hadoop (including HDFS for distributed storage and MapReduce for distributed processing) are written primarily in Java.
* **Apache Spark**: While Spark's core is written in Scala (another JVM language), it runs on the JVM and provides a well-supported Java API. Data engineers frequently write Spark jobs in Java, especially in organizations with existing Java expertise or for integrating with Java-based systems.
* **Other Tools**: Many other data processing frameworks, message queues, and NoSQL databases in the big data space (e.g., Apache Kafka, Apache Cassandra, Elasticsearch, Apache Flink) are built on or for the JVM and have strong Java APIs.

**Relevance**: Essential for developers building or maintaining core big data infrastructure, developing custom connectors, or integrating applications directly with these powerful distributed systems.",java,Conceptual Example (Java with Spark DataFrame):,"import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import static org.apache.spark.sql.functions.col; // For using col() function

// This is a conceptual snippet. A full application would require Spark setup,
// dependencies (e.g., via Maven or Gradle), and proper error handling.

public class SparkJavaExample {

    public static void main(String[] args) {
        // Create a SparkSession (or get an existing one)
        SparkSession spark = SparkSession.builder()
            .appName(""JavaSparkExample"")
            .master(""local[*]"") // Use local master for testing; configure for cluster in production
            .getOrCreate();

        // Assume df is loaded, e.g., from a JSON file, database, or other source
        // For example:
        // Dataset<Row> df = spark.read().json(""path/to/your/data.json"");
        // Or, creating a dummy DataFrame for illustration:
        // List<Row> data = Arrays.asList(
        //     RowFactory.create(""Alice"", 25),
        //     RowFactory.create(""Bob"", 35),
        //     RowFactory.create(""Charlie"", 28)
        // );
        // StructType schema = new StructType(new StructField[]{
        //     new StructField(""name"", DataTypes.StringType, false, Metadata.empty()),
        //     new StructField(""age"", DataTypes.IntegerType, false, Metadata.empty())
        // });
        // Dataset<Row> df = spark.createDataFrame(data, schema);

        Dataset<Row> df = spark.emptyDataFrame(); // Placeholder: replace with actual DataFrame loading

        if (df.isEmpty()) {
            System.out.println(""DataFrame is empty. Skipping operations."");
            spark.stop();
            return;
        }
        
        System.out.println(""Original DataFrame:"");
        df.show();

        // DataFrame operations using the Java API
        // Example: Filter people older than 30 and select their name and age
        Dataset<Row> filteredDF = df.filter(col(""age"").gt(30))
                                   .select(""name"", ""age"");

        System.out.println(""Filtered DataFrame (age > 30):"");
        filteredDF.show();

        // Example using Spark MLlib (less common for initial model development than Python/Scala,
        // but used for applying models or feature engineering in Java/Scala Spark jobs)
        /*
        import org.apache.spark.ml.classification.LogisticRegression;
        import org.apache.spark.ml.classification.LogisticRegressionModel;
        import org.apache.spark.ml.feature.VectorAssembler;
        // ... (assuming dfWithFeatures is prepared appropriately) ...

        // VectorAssembler assembler = new VectorAssembler()
        //    .setInputCols(new String[]{""feature1_numeric"", ""feature2_numeric""}) // Ensure features are numeric
        //    .setOutputCol(""features_vector""); // Standard name for feature vector column
        // Dataset<Row> dfWithFeatures = assembler.transform(df); // df should have feature1_numeric, feature2_numeric

        // LogisticRegression lr = new LogisticRegression()
        //    .setLabelCol(""label_indexed"") // Ensure you have a numeric label column
        //    .setFeaturesCol(""features_vector"")
        //    .setMaxIter(10)
        //    .setRegParam(0.01);

        // LogisticRegressionModel lrModel = lr.fit(dfWithFeatures);

        // System.out.println(""Coefficients: "" + lrModel.coefficients() + "" Intercept: "" + lrModel.intercept());
        */

        // Stop the SparkSession
        spark.stop();
    }
}
","Java provides robust APIs for interacting with Spark DataFrames and MLlib, often utilized in enterprise data processing and analytics pipelines."
java-concepts-demo,,,,3,3. ML Model Deployment & Enterprise Integration,"While machine learning models are typically trained and iterated upon in Python (due to its rich ecosystem of libraries like Scikit-learn, TensorFlow, PyTorch), Java often plays a critical role in the deployment, serving, and integration phases within enterprise environments:
* **Integrating with Existing Enterprise Systems**: Many large companies have substantial existing backend infrastructure, APIs, and applications built in Java. ML models (often exported to standard formats like ONNX or PMML, or accessed via a dedicated prediction API) need to be seamlessly integrated into these Java applications.
* **Building Robust Backend Services & Microservices**: Java frameworks like Spring Boot are widely used to build scalable, reliable, and maintainable backend systems and microservices that might consume ML model predictions or serve as an orchestration layer.
* **Android Development**: While Kotlin is now the preferred language for new Android development, Java has a long history and a massive existing codebase for Android apps. These apps might incorporate on-device ML models (e.g., using TensorFlow Lite's Java API for mobile inference).
* **ML Libraries & Frameworks for the JVM**: Some Java-based ML libraries and frameworks exist (e.g., Deeplearning4j (DL4J) for deep learning, Weka for general ML, Tribuo from Oracle). While their communities are generally smaller than Python's, they are used in specific contexts, especially where JVM integration is paramount.
* **Model Serving Platforms**: Some model serving platforms or tools may be built in Java or offer Java clients for interacting with deployed models.

**Relevance**: Crucial for ML Engineers, Software Engineers, and Data Engineers working in large enterprises, needing to integrate ML capabilities into existing Java codebases, building scalable prediction services, or developing ML-powered Android applications.",,,,
jupyter-demo,Jupyter Notebooks in ML/DS,Learn about Jupyter Notebooks and their importance for interactive computing in Data Science and Machine Learning workflows.,"Jupyter, JupyterLab, notebook, data science, machine learning, Python, R, Julia, EDA, visualization",0,Jupyter Notebooks: Interactive DS/ML,"**Jupyter Notebooks** (and related environments like JupyterLab, Google Colab, VS Code Notebooks) are indispensable tools for data scientists and ML practitioners. They provide an **interactive, web-based environment** for writing and executing code (primarily Python, R, Julia), visualizing data, and documenting workflows all in one place.",,,,
jupyter-demo,,,,1,1. What is a Jupyter Notebook?,"A notebook document consists of a sequence of **cells**: 
* **Code Cells**: Contain code (e.g., Python) that can be executed individually. The output of the code (text, plots, tables, etc.) is displayed directly below the cell after execution.
* **Markdown Cells**: Contain explanatory text, headings, images, links, mathematical formulas (using LaTeX), and other rich text elements formatted using Markdown syntax.
This combination allows for a ""literate programming"" approach, where code, its results, and narrative explanations are interwoven, creating a comprehensive and understandable document.
**Relevance**: Ideal for exploratory data analysis (EDA), model prototyping and iteration, data visualization, creating educational materials, and sharing reproducible research where the process and explanation are as important as the final code.",,,,
jupyter-demo,,,,2,2. Key Benefits for ML/DS,"
* **Interactivity**: Execute code cell by cell, inspect intermediate results (variables, dataframes), and quickly iterate on ideas without re-running entire scripts.
* **Inline Visualization**: Display plots and charts (using libraries like Matplotlib, Seaborn, Plotly) directly within the notebook, alongside the code that generated them, facilitating immediate understanding.
* **Documentation & Storytelling**: Combine executable code, its live output, and rich explanatory text (Markdown) to create comprehensive reports or tutorials that tell a data story effectively.
* **Reproducibility (with care)**: Notebooks capture the workflow, making it easier for others to understand and potentially reproduce the analysis. However, careful management of cell execution order and dependencies is needed for true reproducibility.
* **Sharing & Collaboration**: Notebook files (`.ipynb` format) can be easily shared (e.g., via GitHub, NBViewer, Google Colab). Many platforms render notebooks directly, allowing others to view the code, output, and narrative.
* **Support for Multiple Languages**: While Python is most common, Jupyter supports kernels for many other languages like R, Julia, Scala, and SQL.",,,,
jupyter-demo,,,,3,3. Illustrative Notebook Cells,"Imagine a typical data analysis workflow within a notebook, broken into logical cells:

### Cell 1: Setup - Imports & Data Loading",python,Cell 1: Setup - Imports & Data Loading,"# Standard library imports
import os

# Third-party library imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configure visualizations
%matplotlib inline 
# sns.set_theme(style=""whitegrid"") # Example theme

# Load data from a CSV file
# Ensure 'sales_data.csv' is in the same directory or provide the correct path
try:
    df = pd.read_csv('sales_data.csv')
    # Display the first few rows and basic info
    print(""Data loaded successfully. First 5 rows:"")
    display(df.head()) # 'display()' is often better for DataFrames in notebooks
    print(""\nDataFrame Info:"")
    df.info()
except FileNotFoundError:
    print(""Error: 'sales_data.csv' not found. Please check the file path."")
    df = pd.DataFrame() # Create an empty DataFrame to prevent further errors
","Output below cell: (Text output confirming data load, a rendered HTML table of the DataFrame's head, and output from `df.info()`)"
jupyter-demo,,,,4,Cell 2: Exploratory Data Analysis (EDA) & Visualization,,python,Cell 2: Exploratory Data Analysis (EDA) & Visualization,"if not df.empty:
    # Summary statistics for numerical columns
    print(""\nSummary Statistics:"")
    display(df.describe())

    # Plot distribution of 'SalesAmount'
    plt.figure(figsize=(10, 5)) # Adjusted figure size
    sns.histplot(df['SalesAmount'], kde=True, bins=30)
    plt.title('Distribution of Sales Amount', fontsize=15)
    plt.xlabel('Sales Amount', fontsize=12)
    plt.ylabel('Frequency', fontsize=12)
    plt.grid(axis='y', alpha=0.75)
    plt.show() # Display plot inline

    # Example: Box plot for sales by region
    # plt.figure(figsize=(10, 6))
    # sns.boxplot(x='Region', y='SalesAmount', data=df)
    # plt.title('Sales Amount by Region')
    # plt.show()
else:
    print(""DataFrame is empty, skipping EDA."")","Output below cell: (Rendered table of summary statistics, followed by the generated histogram plot)"
jupyter-demo,,,,5,Cell 3: Markdown Explanation & Next Steps,,markdown,Cell 3: Markdown Explanation & Next Steps,"### Initial Data Observations

The `SalesAmount` distribution appears to be slightly right-skewed, which might warrant a transformation (e.g., log transformation) depending on the modeling technique.
The summary statistics provide an overview of central tendency and spread for numerical features.

**Next Steps:**

1.  **Handle Missing Values:**
    * Check for missing values: `df.isnull().sum()`
    * Decide on a strategy (e.g., imputation for numerical, mode for categorical). For instance, fill missing `Region` values:
        `df['Region'].fillna('Unknown', inplace=True)`
2.  **Feature Engineering:**
    * Create new features if necessary (e.g., extracting month from a date column).
3.  **Data Preprocessing for Modeling:**
    * Encode categorical variables (e.g., One-Hot Encoding for `Region`).
    * Scale numerical features.","Output below cell: (Formatted text with headings, bold text, and bullet points outlining observations and planned actions)"
jupyter-demo,,,,6,Cell 4: Train a Simple Predictive Model (Conceptual),,python,Cell 4: Train a Simple Predictive Model (Conceptual),"# Assuming 'df' has been preprocessed (missing values handled, features engineered/selected)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

if not df.empty and 'FeatureA' in df.columns and 'FeatureB' in df.columns and 'SalesAmount' in df.columns:
    # Prepare features (X) and target (y) - replace with actual preprocessed features
    # For demonstration, let's assume 'FeatureA' and 'FeatureB' are numeric and ready
    X = df[['FeatureA', 'FeatureB']] # Example features
    y = df['SalesAmount']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize and train the model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = model.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f""Linear Regression Model Performance:"")
    print(f""  Mean Squared Error (MSE): {mse:.2f}"")
    print(f""  R-squared (R�): {r2:.3f}"")
    # print(f""  Model Coefficients: {model.coef_}"")
    # print(f""  Model Intercept: {model.intercept_:.2f}"")
else:
    print(""Skipping model training as DataFrame is empty or required columns are missing."")
",Output below cell: (Text output showing model performance metrics like MSE and R-squared)
jupyter-demo,,,,7,4. Considerations & Limitations,"
* **Production Code**: Notebooks are excellent for exploration, experimentation, and reporting, but generally less ideal for robust, maintainable production pipelines due to potential issues with hidden state (from out-of-order cell execution), difficulty with version control diffs, and challenges in testing. Code is often refactored into modular Python scripts (`.py` files) for production.
* **Version Control (Diffs)**: While `.ipynb` files can be stored in Git, their JSON structure (which includes code, metadata, and output) makes comparing changes (diffs) difficult and noisy. Tools like `nbdime` can help mitigate this.
* **Environment Management**: Ensuring consistent Python environments (libraries and versions) between notebook execution, collaboration, and potential production deployment is crucial. Tools like Conda, venv, Poetry, or Docker are essential.
* **""Hidden State""**: The ability to execute cells out of order can lead to a notebook's state becoming confusing or hard to reproduce if not managed carefully. Regularly restarting the kernel and running all cells from top to bottom is good practice.
* **Large Datasets/Computations**: For very large datasets or computationally intensive tasks that exceed local machine capabilities, notebooks are often used as interfaces to more powerful backend systems (e.g., Spark clusters, cloud computing resources).",,,,
kotlin-concepts-demo,Kotlin in AI & Android,"Learn about Kotlin, its features, and its role in Android app development, especially for on-device AI with TensorFlow Lite.","Kotlin, Android, AI, ML, TensorFlow Lite, mobile development, JVM, on-device inference",0,Kotlin: Modern Android & On-Device AI,"**Kotlin** is a modern, statically typed programming language that runs on the JVM (like Java and Scala) and is now Google's preferred language for **Android app development**. While not typically used for **training** large ML models, it plays a key role in deploying models for **on-device inference** within mobile applications.",,,,
kotlin-concepts-demo,,,,1,1. Key Kotlin Features,"
* **Concise & Expressive**: Kotlin often requires significantly less boilerplate code compared to Java for similar tasks, leading to more readable and maintainable code.
* **Null Safety**: The type system distinguishes between nullable and non-nullable types, helping to prevent null pointer exceptions (NPEs) at compile time, a common source of bugs in many languages.
* **Interoperable with Java**: Kotlin code can seamlessly call Java code and vice-versa. This allows for gradual adoption in existing Java projects and full access to the vast ecosystem of Java libraries and frameworks.
* **Coroutines**: Provides excellent built-in support for asynchronous programming through lightweight coroutines, simplifying complex asynchronous operations and improving app responsiveness, especially crucial for mobile UIs.
* **Modern Language Features**: Includes features like data classes (for concise POJOs/POCOs), extension functions (to add functionality to existing classes), smart casts, type inference, and functional programming constructs (lambda expressions, higher-order functions).
* **Multiplatform Support**: Kotlin Multiplatform Mobile (KMM) allows sharing code (business logic, data layers) between different platforms like Android, iOS, web, and desktop, while still allowing platform-specific UI code.

**Primary Focus**: Android application development (Google's preferred language), but also increasingly used for server-side development (e.g., with Ktor, Spring Boot), web frontends (Kotlin/JS), and multiplatform projects.",,,,
kotlin-concepts-demo,,,,2,2. On-Device AI with TensorFlow Lite,"The most common intersection of Kotlin and ML/AI is deploying models directly onto Android devices using **TensorFlow Lite (TFLite)**. This enables powerful AI features to run locally on the user's device.
* **Model Conversion**: Machine learning models, typically trained in Python using frameworks like TensorFlow or Keras, are converted to the lightweight, optimized `.tflite` format. This conversion often involves quantization to reduce model size and improve inference speed on mobile hardware.
* **TFLite Interpreter**: The Android application (written in Kotlin or Java) includes the TensorFlow Lite runtime library (interpreter). This interpreter is responsible for loading and executing the `.tflite` model.
* **Inference Process**:
    1. Kotlin code prepares input data (e.g., from camera frames, sensor readings, user text input) into the format expected by the model (often a `ByteBuffer` or multi-dimensional array).
    2. The preprocessed input is fed to the TFLite interpreter.
    3. The interpreter runs the model inference directly on the device's CPU, GPU, or specialized AI accelerators (like NPUs) if available.
    4. The output (predictions, probabilities) is retrieved from the interpreter.
    5. Kotlin code then post-processes this output to be used by the application (e.g., displaying results in the UI, triggering actions).
* **Use Cases**: Real-time image classification (e.g., identifying objects in a photo), object detection in camera feeds, on-device text analysis (e.g., sentiment analysis, smart replies), sound classification, personalized recommendations, and gesture recognition, all without needing constant server communication.

**Benefits of On-Device ML**:
* **Low Latency**: Predictions are fast as there's no network round-trip to a server.
* **Offline Capability**: AI features can work even when the device is not connected to the internet.
* **Enhanced Data Privacy**: Sensitive user data (e.g., images, personal text) can be processed locally on the device, reducing privacy concerns associated with sending data to a server.
* **Reduced Server Costs**: Offloading inference to user devices can reduce the load and cost of backend servers.",kotlin,Illustrative Snippet (Conceptual Kotlin with TFLite):,"// Conceptual Kotlin code, often part of an Android Activity, Fragment, or ViewModel
// Requires TensorFlow Lite library added to the Android project (build.gradle)

import android.content.Context
import android.graphics.Bitmap
import android.util.Log
import org.tensorflow.lite.DataType
import org.tensorflow.lite.Interpreter
import org.tensorflow.lite.support.common.FileUtil
import org.tensorflow.lite.support.common.ops.NormalizeOp
import org.tensorflow.lite.support.image.ImageProcessor
import org.tensorflow.lite.support.image.TensorImage
import org.tensorflow.lite.support.image.ops.ResizeOp
import org.tensorflow.lite.support.tensorbuffer.TensorBuffer
import java.io.IOException
import java.nio.ByteBuffer
import java.nio.ByteOrder

class ImageClassifier(context: Context, modelName: String = ""mobilenet_v1_1.0_224.tflite"") {

    private var tfliteInterpreter: Interpreter? = null
    private var labels: List<String> = listOf() // Load your labels, e.g., from a text file
    private val imageSizeX: Int // Model's expected input image width
    private val imageSizeY: Int // Model's expected input image height

    companion object {
        private const val TAG = ""ImageClassifier""
        private const val NUM_CLASSES = 1001 // Example for MobileNet
    }

    init {
        try {
            val modelBuffer = FileUtil.loadMappedFile(context, modelName)
            val tfliteOptions = Interpreter.Options()
            // Add delegates like GPU or NNAPI if needed for hardware acceleration
            // tfliteOptions.addDelegate(NnApiDelegate())
            tfliteInterpreter = Interpreter(modelBuffer, tfliteOptions)

            // Get model input shape for image size
            val inputTensor = tfliteInterpreter?.getInputTensor(0)
            val inputShape = inputTensor?.shape() ?: intArrayOf(1, 224, 224, 3) // Default if shape unknown
            imageSizeY = inputShape[1]
            imageSizeX = inputShape[2]

            // Load labels (example, replace with your actual label loading logic)
            // labels = FileUtil.loadLabels(context, ""labels.txt"")

        } catch (e: IOException) {
            Log.e(TAG, ""Error initializing TensorFlow Lite interpreter or loading labels."", e)
            tfliteInterpreter = null
        }
    }

    fun classify(bitmap: Bitmap): Pair<String, Float>? {
        if (tfliteInterpreter == null) {
            Log.e(TAG, ""Interpreter not initialized."")
            return null
        }

        // 1. Preprocess the input Bitmap
        var tensorImage = TensorImage(tfliteInterpreter!!.getInputTensor(0).dataType())
        tensorImage.load(bitmap)

        // Create an ImageProcessor for transformations (resize, normalize)
        // Normalization parameters (IMAGE_MEAN, IMAGE_STD) depend on the model.
        // For MobileNet, often mean=127.5f, std=127.5f for inputs normalized to [-1,1]
        // Or mean=0f, std=1f if inputs are [0,1] and model expects that.
        // Or mean=0f, std=255f if inputs are [0,255] and model expects that.
        val imageProcessor = ImageProcessor.Builder()
            .add(ResizeOp(imageSizeY, imageSizeX, ResizeOp.ResizeMethod.BILINEAR))
            // .add(NormalizeOp(IMAGE_MEAN, IMAGE_STD)) // Add normalization if your model requires it
            .build()
        tensorImage = imageProcessor.process(tensorImage)

        // 2. Prepare input buffer for the model (already handled by TensorImage for some models)
        // For direct ByteBuffer usage:
        // val inputBuffer = ByteBuffer.allocateDirect(1 * imageSizeX * imageSizeY * 3 * 4) // 4 bytes per float
        // inputBuffer.order(ByteOrder.nativeOrder())
        // tensorImage.load(bitmap) // (or fill buffer manually after processing)

        // 3. Prepare output buffer (size depends on model output)
        val probabilityBuffer = TensorBuffer.createFixedSize(tfliteInterpreter!!.getOutputTensor(0).shape(), DataType.FLOAT32)

        // 4. Run Inference
        try {
            tfliteInterpreter?.run(tensorImage.buffer, probabilityBuffer.buffer.rewind())
        } catch (e: Exception) {
            Log.e(TAG, ""Error running model inference."", e)
            return null // Handle error
        }

        // 5. Process Output Buffer
        val outputArray = probabilityBuffer.floatArray // Get probabilities
        
        var maxProb = 0f
        var maxIndex = -1
        outputArray.forEachIndexed { index, probability ->
            if (probability > maxProb) {
                maxProb = probability
                maxIndex = index
            }
        }
        
        // Ensure labels list is populated and index is valid
        return if (maxIndex != -1 && labels.isNotEmpty() && maxIndex < labels.size) {
            val predictedLabel = labels[maxIndex]
            val confidence = maxProb * 100
            Log.d(TAG, ""Prediction: $predictedLabel, Confidence: $confidence%"")
            Pair(predictedLabel, confidence)
        } else if (maxIndex != -1) { // Has a prediction but no label for it
             Log.w(TAG, ""Predicted index $maxIndex but labels list is small or empty."")
             Pair(""Class_$maxIndex"", maxProb * 100) // Fallback label
        } else {
            Log.w(TAG, ""Could not determine prediction from output."")
            null
        }
    }

    fun close() {
        tfliteInterpreter?.close()
        tfliteInterpreter = null
    }
}
","This conceptual Kotlin snippet shows a more structured approach for an `ImageClassifier` class in Kotlin, handling model loading, preprocessing, inference with TensorFlow Lite, and output processing."
kotlin-concepts-demo,,,,3,Conclusion,"Kotlin is the modern language for Android development. While not typically used for the heavy lifting of ML model training (which usually happens in Python), it's essential for integrating pre-trained models (especially TensorFlow Lite models) into mobile applications to create powerful and responsive on-device AI features. Understanding Kotlin is key for developers aiming to build compelling AI-powered mobile experiences that respect user privacy and work efficiently offline.",,,,
language-comparison-demo,Languages for ML/AI & Data Science,"A comparison of Python, R, SQL, Scala, Java, C++, and other programming languages for Machine Learning, AI, and Data Science workflows.","Python, R, SQL, Scala, Java, C++, Julia, Swift, machine learning, AI, data science, programming language comparison",0,"Comparing Languages for ML, AI, & Data Science","While Python is the undisputed leader, the ecosystem for Machine Learning, AI, and Data Science involves several programming languages, each with its own strengths and typical use cases. Understanding their roles provides a broader perspective. This guide compares the most prominent languages used in ML, Data Science, and AI development.",,,,
language-comparison-demo,,,,1,1. Python (The Dominant Force),"**Role**: Primary language for almost the entire ML/DS workflow, from data ingestion and analysis to model training, evaluation, and deployment.
**Strengths**:
* **Vast Ecosystem**: Unmatched collection of mature libraries (NumPy, Pandas, Scikit-learn, TensorFlow, PyTorch, Matplotlib, Seaborn, spaCy, NLTK, Hugging Face Transformers, etc.).
* **Ease of Use**: Simple, clean syntax and high readability.
* **Large Community**: Extensive support, tutorials, and pre-existing code.
* **Versatility**: Used for data analysis, model building, web development (Django/Flask), scripting, automation.
* **Integration**: Excellent ""glue"" language, interfaces with C/C++ for performance.
**Weaknesses**: Can be slower than compiled languages for CPU-intensive tasks (though many core libraries have C/C++ backends); Global Interpreter Lock (GIL) limits true CPU parallelism for some multi-threaded tasks.
**Typical Use**: Data cleaning, EDA, model prototyping/training (including deep learning), ML pipelines, API deployment, automation.
**Why Preferred**: Breadth, depth, and maturity of ML/DS libraries, ease of use, and large community make it highly productive.",python,Illustrative Snippet (Pandas + Scikit-learn):,"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load data (assuming 'data.csv' exists with 'feature1', 'feature2', 'target')
# df = pd.read_csv(""data.csv"")
# For demonstration, creating a dummy DataFrame:
data = {'feature1': [1, 2, 3, 4, 5, 6, 7, 8],
        'feature2': [2, 3, 4, 5, 6, 7, 8, 9],
        'target':   [0, 0, 0, 0, 1, 1, 1, 1]}
df = pd.DataFrame(data)


# Basic preprocessing (example: drop rows with any missing values)
df.dropna(inplace=True) # Ensure no missing values for this simple example

if not df.empty and 'target' in df.columns:
    X = df[['feature1', 'feature2']] # Features
    y = df['target']                 # Target variable

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

    # Initialize and train a Logistic Regression model
    model = LogisticRegression()
    model.fit(X_train, y_train)

    # Make predictions and evaluate
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f""Model Accuracy: {accuracy:.2f}"")
else:
    print(""DataFrame is empty or 'target' column is missing."")",This Python snippet demonstrates a basic machine learning workflow using Pandas for data handling and Scikit-learn for model training (Logistic Regression) and evaluation.
language-comparison-demo,,,,2,2. R Language (The Statistician's Choice),"**Role**: Primarily focused on statistical computing, data analysis, and visualization.
**Strengths**:
* **Statistical Powerhouse**: Unparalleled ecosystem for statistical modeling, hypothesis testing, time series analysis (via CRAN).
* **Data Visualization**: Excellent capabilities, especially with `ggplot2` and `Shiny`.
* **Domain-Specific**: Designed by statisticians, for statisticians.
* **Strong Community**: Active, particularly in academia and research.
**Weaknesses**: Less common for general-purpose programming or production web apps; steeper learning curve for non-statisticians; performance can be an issue without care.
**Typical Use**: EDA, advanced statistical modeling, publication-quality visualizations, bioinformatics, econometrics.
**Why Used**: Ideal for complex statistical modeling, in-depth data exploration, and high-quality visualizations, especially in research.",r,Illustrative Snippet (dplyr + ggplot2):,"# Load necessary libraries
# install.packages(c(""dplyr"", ""ggplot2"")) # Run once if not installed
library(dplyr)
library(ggplot2)

# Use the built-in iris dataset
data(iris)

# Analyze data using dplyr pipes
summary_stats <- iris %>%
  filter(Species != ""setosa"") %>%       # Filter out 'setosa' species
  group_by(Species) %>%                 # Group data by species
  summarise(Avg.Petal.Width = mean(Petal.Width, na.rm = TRUE), # Calculate mean petal width
            Avg.Petal.Length = mean(Petal.Length, na.rm = TRUE)) %>%
  arrange(desc(Avg.Petal.Width))      # Arrange by average petal width

print(summary_stats)

# Create a scatter plot using ggplot2
plot <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species, shape = Species)) +
  geom_point(size = 3, alpha = 0.7) +  # Create scatter plot with larger, semi-transparent points
  facet_wrap(~Species, ncol = 3) +     # Separate plots by species
  labs(title = ""Iris Sepal Dimensions by Species"",
       x = ""Sepal Length (cm)"",
       y = ""Sepal Width (cm)"",
       color = ""Species"",
       shape = ""Species"") +
  theme_minimal(base_size = 12) +      # Apply a minimal theme
  theme(legend.position = ""top"")

print(plot) # Display the plot","This R snippet uses the `dplyr` package for data manipulation (filtering, grouping, summarizing the iris dataset) and `ggplot2` for creating a scatter plot of sepal dimensions, faceted by species."
language-comparison-demo,,,,3,3. SQL (The Data Language),"**Role**: Essential for interacting with relational databases.
**Strengths**:
* **Standard Language**: De facto standard for RDBMS (PostgreSQL, MySQL, SQL Server, Oracle, SQLite).
* **Declarative**: Specify *what* data, database figures out *how*.
* **Data Management Power**: Powerful for filtering, joining, aggregating, transforming large datasets in-database.
* **Data Integrity**: Supports constraints, transactions for accuracy.
**Weaknesses**: Not general-purpose; limited for complex stats or advanced algorithms directly.
**Typical Use**: ETL, joining data, filtering/aggregating before loading into Python/R, data warehousing, ad-hoc querying.
**Why Used**: Indispensable for accessing, managing, and preparing structured data.",sql,Illustrative Snippet (Complex Query):,"-- Find average order value and total orders for customers
-- who have placed more than 5 orders in the last year.
SELECT
    c.customer_id,
    c.customer_name,
    COUNT(o.order_id) AS total_orders,
    AVG(oi.quantity * oi.price_per_unit) AS average_order_value
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
JOIN
    order_items oi ON o.order_id = oi.order_id
WHERE
    o.order_date >= DATE('now', '-1 year') -- Filter orders from the last year
GROUP BY
    c.customer_id, c.customer_name
HAVING
    COUNT(o.order_id) > 5 -- Customers with more than 5 orders
ORDER BY
    average_order_value DESC, total_orders DESC
LIMIT 100;","This SQL query retrieves customer information, total orders, and average order value for customers who have placed more than five orders in the last year, joining data from `customers`, `orders`, and `order_items` tables."
language-comparison-demo,,,,4,4. Scala & Java (Big Data & Enterprise Systems),"**Role**: Primarily used in Big Data (Apache Spark) and for integrating ML models into large enterprise systems.
**Strengths (Shared via JVM)**:
* **Robustness & Scalability**: Mature, strongly typed, suitable for large, reliable systems.
* **Performance**: JVM offers good performance.
* **Vast Ecosystem**: Access to huge number of Java libraries.
* **Platform Independence**: JVM's ""Write Once, Run Anywhere"".
* **Concurrency**: Mature and powerful.
**Scala Specifics**: Combines functional & OOP; native language of Spark.
**Java Specifics**: Widespread in enterprise; massive developer base; stable.
**Weaknesses**: More verbose and steeper learning curve than Python for typical DS/ML; smaller dedicated ML/DS ecosystem for cutting-edge research.
**Typical Use**: Building/maintaining Big Data infrastructure (Spark jobs for ETL); deploying ML in existing Java/Scala enterprise apps; high-performance backends.
**Why Used**: Deploying ML in established enterprise Java/Scala environments; performance-sensitive, large-scale data processing with Spark.",scala,Illustrative Snippet (Conceptual Scala with Spark):,"// Conceptual Scala Spark snippet for data transformation and aggregation
// Assumes 'spark' is an initialized SparkSession

// import spark.implicits._ // For $ notation and toDF()

// // Load data from a Parquet file (replace with your data source)
// val transactionsDF = spark.read.parquet(""path/to/transactions.parquet"")

// // Perform some transformations and aggregations
// val aggregatedData = transactionsDF
//   .filter($""amount"" > 10.00) // Filter transactions greater than 10.00
//   .withColumn(""transaction_month"", month($""timestamp_col"")) // Extract month
//   .groupBy(""customer_id"", ""transaction_month"")
//   .agg(
//     sum(""amount"").alias(""total_spent_monthly""),
//     count(""*"").alias(""num_transactions_monthly"")
//   )
//   .orderBy($""customer_id"", $""transaction_month"")

// println(""Aggregated Monthly Customer Transactions:"")
// aggregatedData.show(truncate = false)

// // Example: Using a simple ML model (less common for training, more for applying)
// // val model = PipelineModel.load(""path/to/your/spark_ml_model"")
// // val predictions = model.transform(preparedFeaturesDF)
// // predictions.select(""customer_id"", ""prediction"").show()

// // For actual execution, this would be part of a Spark application.
println(""Conceptual Scala Spark snippet - for illustration purposes."")","This conceptual Scala snippet demonstrates typical Apache Spark operations like filtering data, creating new columns (extracting month), grouping, and aggregating to calculate monthly customer spending and transaction counts. It's illustrative of how Scala is used for data processing in Spark."
language-comparison-demo,,,,5,5. C++ & C# (Performance & Specific Integrations),"**Role**: Used when maximum performance, low-level hardware interaction, or specific platform/engine integration is paramount.
**Strengths**:
* **C++**: Extremely high performance, fine-grained control over system resources. Core of many ML libraries (TensorFlow, PyTorch). Prevalent in robotics, game AI, computer vision, HFT.
* **C#**: Strong integration with Windows/.NET. Used in game dev (Unity), enterprise apps. Has ML.NET for .NET ML integration.
**Weaknesses**: Steeper learning curve, longer dev time than Python for ML/DS; less convenient for rapid prototyping; smaller dedicated ML/DS communities.
**Typical Use**: Developing core ML library components; high-performance inference engines; real-time systems; integrating ML into C++/C# apps, game engines, embedded systems.
**Why Used**: Performance-critical backends, game AI, robotics, embedded systems where speed and resource efficiency are key.",cpp,Illustrative Snippet (Conceptual C++ with ONNX Runtime):,"// Conceptual C++ snippet for inference with ONNX Runtime
// (Requires ONNX Runtime C++ API and a pre-trained ONNX model)

/*
#include <onnxruntime_cxx_api.h> // Main C++ API header
#include <vector>
#include <iostream>

// Helper function to prepare input tensor (example for a simple float array)
Ort::Value CreateInputTensor(Ort::MemoryInfo& memory_info, const std::vector<float>& input_data, const std::vector<int64_t>& shape) {
    return Ort::Value::CreateTensor<float>(memory_info, const_cast<float*>(input_data.data()), input_data.size(), shape.data(), shape.size());
}

int main() {
    Ort::Env env(ORT_LOGGING_LEVEL_WARNING, ""ONNXRuntimeExample"");
    Ort::SessionOptions session_options;
    session_options.SetIntraOpNumThreads(1); // Example: configure threads

    // Replace with your model path
    const char* model_path = ""path/to/your_model.onnx"";
    Ort::Session session(env, model_path, session_options);

    // --- Prepare Input Data (Example) ---
    // This needs to match your model's expected input shape and type
    std::vector<float> input_values = {1.0f, 2.0f, 3.0f, 4.0f}; // Example input
    std::vector<int64_t> input_shape = {1, 4}; // Example: batch size 1, 4 features

    Ort::AllocatorWithDefaultOptions allocator;
    Ort::MemoryInfo memory_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);
    
    // Get input node names (usually one, but can be multiple)
    const char* input_node_names[] = {session.GetInputName(0, allocator)};
    Ort::Value input_tensor = CreateInputTensor(memory_info, input_values, input_shape);
    std::vector<Ort::Value> ort_inputs;
    ort_inputs.push_back(std::move(input_tensor));

    // Get output node names
    const char* output_node_names[] = {session.GetOutputName(0, allocator)};

    // --- Run Inference ---
    try {
        auto output_tensors = session.Run(Ort::RunOptions{nullptr}, input_node_names, ort_inputs.data(), ort_inputs.size(), output_node_names, 1);
        
        // --- Process Output ---
        // Assuming the output is a tensor of floats
        float* output_array = output_tensors[0].GetTensorMutableData<float>();
        // Get output shape to know how many elements (e.g., for classification probabilities)
        // std::vector<int64_t> output_shape = output_tensors[0].GetTensorTypeAndShapeInfo().GetShape();
        
        std::cout << ""Prediction output (first element): "" << output_array[0] << std::endl;
        // (Add more sophisticated output processing based on your model)

    } catch (const Ort::Exception& e) {
        std::cerr << ""ONNX Runtime Exception: "" << e.what() << std::endl;
        return -1;
    }
    return 0;
}
*/
// This is a complex example; actual implementation details vary greatly.
std::cout << ""Conceptual C++ with ONNX Runtime snippet."" << std::endl;","This conceptual C++ snippet outlines how to use the ONNX Runtime C++ API to load an ONNX model, prepare input data, run inference, and process the output. It's intended for high-performance model serving."
language-comparison-demo,,,,6,6. Other Noteworthy Languages,"
* **JavaScript**: Increasingly used for in-browser ML (TensorFlow.js), interactive client-side visualizations (D3.js, Plotly.js, Chart.js).
* **Julia**: Dynamic language for high-performance technical computing, numerical analysis. Aims for Python's ease with C's speed. Gaining traction in scientific ML.
* **Swift**: Apple's language for iOS/macOS/watchOS/tvOS. Core ML and Create ML enable on-device AI.
* **Go (Golang)**: Known for simplicity, concurrency, performance. Used for infrastructure, backend APIs, MLOps tooling.
* **Rust**: Systems language for safety, speed, concurrency. Emerging in HPC and as backend for Python libs.
* **Ruby/PHP**: Web dev. ML integration usually involves calling Python microservices/APIs.",,,,
language-comparison-demo,,,,7,Why Python Dominates in ML/DS,"Python's preeminence is due to:
* **Unmatched Libraries & Frameworks**: Pandas, Dask, NumPy, SciPy, Scikit-learn, TensorFlow, PyTorch, Keras, JAX, Hugging Face.
* **Productivity & Rapid Prototyping**: Simple syntax, dynamic typing.
* **Vast Community & Learning Resources**: Easy to find help, tutorials, examples.
* **Excellent ""Glue"" Language**: Integrates with C/C++/Fortran libraries.
* **Full-Stack Capability for ML**: Data ingestion, cleaning, training, evaluation, deployment (Flask/Django).
* **Jupyter Ecosystem**: Interactive computing (Jupyter Notebooks/Lab).",,,,
language-comparison-demo,,,,8,Language Synergy in ML Systems,"Different languages often work together:
* **SQL**: Data extraction and initial transformation.
* **Python**: EDA, feature engineering, model training, API wrapping.
* **C++ / Rust**: Performance-critical library components, inference engines.
* **Java / Scala**: Enterprise integration, Spark data pipelines, backend microservices.
* **JavaScript**: Interactive web visualizations, client-side ML.
* **Go**: MLOps tools, API gateways, concurrent services.
* **Swift / Kotlin**: On-device mobile ML.
The key is choosing the right tool (language) for the right job.",,,,
oop-concepts-demo,OOP Concepts for ML/DS,Understanding Object-Oriented Programming (OOP) principles in Python and their application in Data Science and Machine Learning libraries.,"OOP, Object-Oriented Programming, Python, machine learning, data science, class, object, inheritance, polymorphism, encapsulation",0,OOP Concepts for ML & Data Science,"Object-Oriented Programming (OOP) is a fundamental programming paradigm used extensively in Python and the libraries powering data science and machine learning (like Pandas, Scikit-learn, Keras, PyTorch). Understanding OOP helps in using these tools effectively and in building more organized, reusable, and maintainable code for complex projects.",,,,
oop-concepts-demo,,,,1,1. Core OOP Concepts,"
* **Classes**: Blueprints for objects, defining attributes (data) and methods (functions). E.g., `class Dog:`.
* **Objects (Instances)**: Concrete occurrences of a class. E.g., `my_dog = Dog(""Buddy"")`.
* **Attributes**: Variables of an object, its properties/state. E.g., `my_dog.name`. Scikit-learn `LinearRegression` has `coef_`.
* **Methods**: Functions of an object, its behavior. E.g., `my_dog.bark()`. Scikit-learn `model` has `.fit()`, `.predict()`.
* **Encapsulation**: Bundling data and methods within an object, often with data hiding.
* **Inheritance**: A new class (subclass) acquires properties of an existing class (superclass). Promotes reuse. Scikit-learn models inherit from base estimators.
* **Polymorphism**: ""Many forms."" Objects of different classes respond to the same method call in their own way. E.g., different Scikit-learn models have a `.fit()` method with different internal implementations.",python,Illustrative Example: Simple Data Point Class,"""# Define a blueprint for data points
class DataPoint:
    """"""Represents a single data point with features and an optional label.""""""

    # Constructor method (__init__) is called when an object is created
    # 'self' refers to the instance being created
    def __init__(self, feature1: float, feature2: float, label: str = None):
        # Attributes store the object's state
        self.feature1 = feature1
        self.feature2 = feature2
        self.label = label
        print(f""DataPoint created: F1={self.feature1}, F2={self.feature2}, Label={self.label}"")

    # A method defines behavior associated with the object
    def display(self):
        """"""Prints a representation of the data point.""""""
        label_str = f""Label: {self.label}"" if self.label is not None else ""No Label""
        print(f""Point(Feature1={self.feature1}, Feature2={self.feature2}, {label_str})"")

    # Another method
    def get_features_as_list(self) -> list[float]:
        """"""Returns the features as a list.""""""
        return [self.feature1, self.feature2]

# --- Using the Class ---

# Create objects (instances) from the DataPoint class
print(""Creating point1..."")
point1 = DataPoint(5.1, 3.5, label='setosa') # Calls __init__

print(""\nCreating point2..."")
point2 = DataPoint(6.0, 2.9) # Calls __init__, label defaults to None

# Call methods on the objects
print(""\nDisplaying points:"")
point1.display() # Output: Point(Feature1=5.1, Feature2=3.5, Label: setosa)
point2.display() # Output: Point(Feature1=6.0, Feature2=2.9, No Label)

# Get data using a method
print(""\nGetting features for point2:"")
features_list = point2.get_features_as_list()
print(features_list)  # Output: [6.0, 2.9]

# Access attributes directly (though encapsulation might sometimes discourage this)
print(f""\nAccessing attribute directly: point1 label is {point1.label}"") # Output: setosa""","This Python code defines a `DataPoint` class with features and an optional label. It demonstrates object instantiation, method calls (`display`, `get_features_as_list`), and attribute access."
oop-concepts-demo,,,,2,2. Comparison with Other Programming Paradigms,"
* **Procedural Programming**: Focuses on procedures/functions operating sequentially on data. (Think C, early Basic).
* **Functional Programming (FP)**: Treats computation as evaluation of mathematical functions. Emphasizes immutability, pure functions, first-class functions. (Haskell, Lisp, Scala, influential in Python).
* **Object-Oriented Programming (OOP)**: Organizes code around ""objects"" bundling data and behavior. Focuses on classes, inheritance, polymorphism.
**In Practice (Python)**: Python is multi-paradigm. DS workflows often blend:
    * Functions for specific transformations (procedural/functional).
    * Functional constructs (list comprehensions, Pandas `.apply()`).
    * Interacting with objects from OOP libraries (Pandas DataFrames, NumPy arrays, Scikit-learn models).
    * Defining custom classes for larger projects or reusable components.",,,,
oop-concepts-demo,,,,3,3. OOP in Action: ML/DS Libraries,Understanding OOP makes using core DS/ML libraries intuitive.,python,Example: Scikit-learn Estimator API,"""# Import necessary classes from the library
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
import numpy as np # For dummy data

# --- Create Dummy Data ---
# Imagine X has 2 features, y is a binary target
X = np.random.rand(100, 2) * 10
y = (X[:, 0] + X[:, 1] > 10).astype(int) # Simple target based on feature sum
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# --- Using OOP Concepts ---

# 1. Instantiate Objects from Classes
print(""Instantiating objects..."")
scaler = StandardScaler()
model = LogisticRegression(solver='liblinear', random_state=42) # Specify solver

pipeline = Pipeline([
    ('scaler', scaler), 
    ('classifier', model)
])
print(""Pipeline object created."")

# 2. Call Methods on Objects (Polymorphism)
print(""\nFitting the pipeline..."")
pipeline.fit(X_train, y_train) # Calls scaler.fit_transform() then model.fit()
print(""Pipeline fitting complete."")

print(""\nMaking predictions..."")
predictions = pipeline.predict(X_test)
print(f""First 5 predictions: {predictions[:5]}"")

# 3. Access Attributes of Objects
print(""\nAccessing object attributes after fitting:"")
fitted_model = pipeline.named_steps['classifier']
print(f""  Model Coefficients (coef_ attribute): {fitted_model.coef_}"")
fitted_scaler = pipeline.named_steps['scaler']
print(f""  Scaler Mean (mean_ attribute): {fitted_scaler.mean_}"")

accuracy = pipeline.score(X_test, y_test)
print(f""\nPipeline Accuracy on test set: {accuracy:.3f}"")""","This Python code demonstrates OOP concepts using Scikit-learn. It instantiates `StandardScaler` and `LogisticRegression` objects, combines them in a `Pipeline` object, and then calls methods like `fit()` and `predict()` on the pipeline. It also shows accessing attributes (like `coef_`, `mean_`) of the fitted objects within the pipeline. This highlights polymorphism and encapsulation."
oop-concepts-demo,,,,4,OOP in ML/DS Libraries (Continued),"This consistent object-based interface (e.g., `fit`, `predict`, `transform`, accessing attributes like `coef_` or `mean_`) across different models, preprocessors, and pipelines is a direct benefit of OOP design, particularly **Polymorphism** and **Encapsulation**.
Similarly, deep learning frameworks like Keras/PyTorch rely heavily on OOP: models, layers, optimizers, and datasets are typically represented as classes and objects. Pandas DataFrames are powerful objects with numerous methods for data manipulation and analysis. OOP provides the structure that makes these complex libraries organized, extensible, and easier to work with.",,,,
pyspark-concepts-demo,PySpark Concepts,"Learn about PySpark, the Python API for Apache Spark, used for large-scale data processing and distributed machine learning.","PySpark, Spark, big data, distributed computing, machine learning, MLlib, DataFrame, RDD, Python",0,PySpark for Big Data & ML,"When datasets become too large to fit into the memory of a single computer (""Big Data""), tools like **Apache Spark** become essential. **PySpark** is the official Python API for Spark, allowing data scientists and engineers to leverage Spark's powerful **distributed processing** capabilities using familiar Python syntax.",,,,
pyspark-concepts-demo,,,,1,1. Why Use PySpark?,"
* **Scalability**: Designed from the ground up to run computations in parallel across a cluster of machines (nodes), enabling processing of datasets far larger than single-machine memory (terabytes or petabytes).
* **Speed**: Performs many operations in memory across the cluster and optimizes execution plans, often resulting in significantly faster processing compared to disk-based systems like traditional Hadoop MapReduce, especially for iterative algorithms common in machine learning.
* **Unified Engine**: Provides high-level APIs for various tasks within one framework:
    * Batch processing and SQL queries (Spark SQL)
    * Real-time data streaming (Structured Streaming)
    * Machine learning (MLlib)
    * Graph processing (GraphX/GraphFrames)
* **Python Interface**: PySpark allows Python developers (the dominant community in data science) to leverage Spark's powerful distributed engine using familiar Python syntax and libraries (though understanding Spark's distributed nature is still important).
* **Language Flexibility**: Spark also offers native APIs for Scala, Java, and R.
**Relevance**: Crucial for Data Engineers building large-scale ETL (Extract, Transform, Load) pipelines, Data Scientists analyzing massive datasets, and ML Engineers training or deploying models on distributed data.",,,,
pyspark-concepts-demo,,,,2,2. Core PySpark Concepts,"
* **SparkSession**: The main entry point to Spark functionality (introduced in Spark 2.0). Used to create DataFrames, register User-Defined Functions (UDFs), execute Spark SQL queries, and access the Spark configuration.
* **DataFrame**: The primary, structured data abstraction (since Spark 2.0). Conceptually similar to a table in a relational database or a Pandas DataFrame, but it is distributed across the cluster nodes. It organizes data into named columns and provides a rich API for transformations and actions.
* **RDD (Resilient Distributed Dataset)**: The original, lower-level abstraction in Spark. Represents an immutable, partitioned collection of items that can be operated on in parallel across the cluster. DataFrames are now generally preferred for most tasks due to optimizations provided by the Catalyst optimizer, but understanding RDDs is helpful for advanced use cases or debugging.
* **Transformations**: Operations on DataFrames (or RDDs) that define how to create a *new* DataFrame from an existing one (e.g., `filter`, `select`, `map`, `groupBy`, `join`). Transformations are **lazy** � they define a step in the computation plan but don't execute immediately.
* **Actions**: Operations that trigger the execution of the planned transformations on the cluster and return a result to the driver program (e.g., `count`, `collect`, `first`, `show`) or write data to an external storage system (e.g., `save`, `write`).
* **Lazy Evaluation & DAG**: Spark builds up a Directed Acyclic Graph (DAG) representing the sequence of transformations. The computation is only triggered when an action is called. This allows Spark's Catalyst optimizer to analyze the entire plan and optimize the execution (e.g., reordering operations, combining stages).
* **Cluster Architecture (Conceptual)**: Involves a Driver program (where your SparkSession runs), a Cluster Manager (like YARN, Mesos, or Spark Standalone), and multiple Executor nodes (where the actual parallel computation happens on data partitions).",python,Illustrative Snippet (DataFrame Operations):,"# Assuming 'spark' is an existing SparkSession object,
# typically created via:
# from pyspark.sql import SparkSession
# spark = SparkSession.builder.appName(""PySparkDemo"").getOrCreate()

# --- Loading Data (Conceptual) ---
# Data is usually read from distributed storage (HDFS, S3, ADLS) or databases.
# df = spark.read.csv(""s3://bucket/path/to/large/data.csv"", header=True, inferSchema=True)
# df = spark.read.parquet(""hdfs:///user/data/sales.parquet"")

# For demonstration, creating a small DataFrame:
data = [(""Alice"", 34, ""New York"", 80000),
        (""Bob"", 25, ""Los Angeles"", 65000),
        (""Charlie"", 34, ""New York"", 90000),
        (""David"", 42, ""Chicago"", 110000),
        (""Eve"", 25, ""Los Angeles"", 70000)]
columns = [""name"", ""age"", ""city"", ""salary""]
df = spark.createDataFrame(data, columns)
print(""Initial DataFrame:"")
df.show()

# --- Transformations (Lazy - define the computation plan) ---
print(""\nDefining transformations..."")
# Filter rows where age is greater than 30
filtered_df = df.filter(df[""age""] > 30)
# Select specific columns
selected_df = filtered_df.select(""name"", ""city"", ""salary"")

# Group by city and calculate average salary and count
# Use pyspark.sql.functions for aggregations (import first)
from pyspark.sql import functions as F
grouped_df = selected_df.groupBy(""city"") \
                    .agg(F.avg(""salary"").alias(""average_salary""), # Calculate average salary
                         F.count(""name"").alias(""num_people""))    # Count people

# Sort results by average salary in descending order
sorted_df = grouped_df.orderBy(F.col(""average_salary"").desc())

print(""Transformation plan defined (no execution yet)."")

# --- Action (Triggers Computation) ---
print(""\nExecuting action (.show()) to see results:"")
# Display the final results (limited number of rows)
sorted_df.show(truncate=False)

# --- Another Action (Save results to storage) ---
# print(""\nExecuting action (.write) to save results..."")
# sorted_df.write.mode(""overwrite"").parquet(""/path/to/output/city_salary_summary.parquet"")
# print(""Results saved."")

# Stop the SparkSession (important in scripts)
# spark.stop()
","Notice the chaining of transformations (filter, select, groupBy, agg, orderBy), similar to Pandas, but these define a plan executed across a cluster only when an action like `.show()` or `.write()` is called."
pyspark-concepts-demo,,,,3,3. Machine Learning with MLlib,"Spark includes a machine learning library, **MLlib**, built on top of DataFrames. It provides distributed implementations of common algorithms and tools for building scalable ML pipelines.
* **Feature Engineering**: Includes a wide range of distributed transformers for feature extraction, transformation, and selection (e.g., `VectorAssembler`, `StandardScaler`, `StringIndexer`, `OneHotEncoder`, `PCA`, `Bucketizer`).
* **Algorithms**: Covers common machine learning tasks:
    * Classification: Logistic Regression, Decision Trees, Random Forests, Gradient-Boosted Trees (GBTs), Naive Bayes, Multilayer Perceptron Classifier.
    * Regression: Linear Regression, Decision Trees, Random Forests, GBTs, Generalized Linear Regression.
    * Clustering: K-Means, LDA (Latent Dirichlet Allocation), Gaussian Mixture Models (GMM).
    * Recommendation: Alternating Least Squares (ALS).
* **Pipelines**: Uses a `Pipeline` API to chain multiple stages (transformers and estimators/models).
* **Model Evaluation & Tuning**: Provides evaluators and tools for hyperparameter tuning (`CrossValidator`, `TrainValidationSplit`).
**Relevance**: Enables training and evaluating models on large datasets within Spark without downsampling. Essential for end-to-end ML workflows on big data.",python,Illustrative Snippet (Conceptual ML Pipeline):,"# Conceptual example of building and training an ML pipeline

from pyspark.ml import Pipeline
from pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler, StandardScaler
from pyspark.ml.classification import LogisticRegression
# Assuming 'spark' is an existing SparkSession
# Assuming 'data' is a Spark DataFrame with raw features and a 'label' column (e.g., 0.0 or 1.0)

# Example 'data' DataFrame structure:
# +--------------+----------------+-----+
# |category_feature|numeric_feature1|label|
# +--------------+----------------+-----+
# |      A       |      10.5      | 1.0 |
# |      B       |      5.2       | 0.0 |
# |      A       |      8.1       | 1.0 |
# +--------------+----------------+-----+

# --- Define Pipeline Stages ---

# 1. Convert categorical string feature to numerical index
indexer = StringIndexer(inputCol=""category_feature"", outputCol=""category_index"", handleInvalid=""keep"")

# 2. One-Hot Encode the indexed categorical feature
encoder = OneHotEncoder(inputCol=""category_index"", outputCol=""category_vec"")

# 3. Assemble all feature columns into a single vector
feature_cols = [""numeric_feature1"", ""category_vec""]
assembler = VectorAssembler(inputCols=feature_cols, outputCol=""raw_features"")

# 4. Scale the assembled features
scaler = StandardScaler(inputCol=""raw_features"", outputCol=""scaled_features"", withStd=True, withMean=True)

# 5. Define the machine learning model
lr = LogisticRegression(featuresCol=""scaled_features"", labelCol=""label"", maxIter=10)

# --- Create the Pipeline ---
pipeline = Pipeline(stages=[indexer, encoder, assembler, scaler, lr])

# --- Train and Evaluate (Conceptual) ---
# train_data, test_data = data.randomSplit([0.8, 0.2], seed=42)
print(""Fitting the pipeline (conceptual)..."")
# model = pipeline.fit(train_data)
print(""Pipeline fitting complete."")

print(""\nMaking predictions (conceptual)..."")
# predictions = model.transform(test_data)
# predictions.select(""prediction"", ""label"", ""scaled_features"", ""probability"").show(5, truncate=False)

# from pyspark.ml.evaluation import BinaryClassificationEvaluator
# evaluator = BinaryClassificationEvaluator(rawPredictionCol=""rawPrediction"", labelCol=""label"", metricName=""areaUnderROC"")
# auc = evaluator.evaluate(predictions)
# print(f""\nArea Under ROC (AUC) on test data: {auc:.3f}"")

# model.save(""/path/to/save/my_pyspark_pipeline_model"")
# from pyspark.ml import PipelineModel
# loaded_model = PipelineModel.load(""/path/to/save/my_pyspark_pipeline_model"")
",MLlib Pipelines streamline the process of chaining feature engineering steps and model training/prediction in a distributed manner.
python-concepts-demo,Python Concepts Demo,"Interactive examples of core Python concepts like lists, dictionaries, loops, and functions, relevant to data science and machine learning.","Python, list, dictionary, function, loop, programming concepts, data science, machine learning, demo, interactive",0,Interactive Python Concepts,Python's fundamental concepts are the building blocks for everything in data science and machine learning. This demo interactively showcases a few key ideas.,,,,
python-concepts-demo,,,,1,"1. Lists: Ordered, Mutable Sequences","Lists store ordered collections of items (which can be of different types). They are essential for holding sequences of feature values, model results, file paths, etc. Being **mutable** means you can change their content (add, remove, modify elements) after creation.
**Relevance**: Storing feature vectors, batch data, experiment results, temporary data structures before converting to NumPy arrays or Pandas Series.",python,Example Code:,"# Creating and modifying a list
my_list = [10, 20, 30, 'apple']
print(f""Initial list: {my_list}"")

my_list.append(40)      # Add item to end
print(f""After append(40): {my_list}"")

my_list[0] = 5          # Change first item (index 0)
print(f""After changing index 0: {my_list}"")

item_at_index_1 = my_list[1] # Access item by index
print(f""Item at index 1: {item_at_index_1}"") # Output: 20

list_length = len(my_list)     # Get length
print(f""Length of list: {list_length}"") # Output: 5","This code demonstrates basic list operations in Python: creation, appending an item, modifying an item by index, accessing an item, and getting the list's length."
python-concepts-demo,,,,2,Try it: Add to List,(Interactive element in HTML - allows user to input text and add to a displayed list using JavaScript),,,,
python-concepts-demo,,,,3,"2. Loops: Iteration (`for`, `while`)","`for` loops are used to iterate over items in a sequence (like a list, tuple, dictionary keys/values, string, or range). `while` loops repeat a block of code as long as a specified condition remains true.
**Relevance**: Processing data batches, running training epochs, iterating through files or directories, hyperparameter tuning (iterating through parameter combinations), implementing iterative algorithms.",python,Example Code (`for` loop):,"validation_scores = [0.82, 0.91, 0.88, 0.93]
high_scores = []

# Iterate through each score in the list
for score in validation_scores:
    if score >= 0.9:
        high_scores.append(score)
        print(f""Found high score: {score}"")

print(f""\nAll high scores: {high_scores}"")
# Output:
# Found high score: 0.91
# Found high score: 0.93
#
# All high scores: [0.91, 0.93]","This Python code uses a `for` loop to iterate through a list of validation scores, appending scores greater than or equal to 0.9 to a new list called `high_scores`."
python-concepts-demo,,,,4,Try it: Simulate Epochs,"(Interactive element in HTML - user inputs number of epochs, JS simulates and logs loop iterations)",,,,
python-concepts-demo,,,,5,3. Dictionaries: Key-Value Pairs,"Dictionaries (or `dict`) store data as unordered collections of key-value pairs. They allow efficient lookup, insertion, and deletion based on the key. Keys must be unique and immutable (like strings, numbers, or tuples).
**Relevance**: Storing hyperparameters, mapping labels to indices (or vice-versa), storing evaluation metrics (e.g., `{'accuracy': 0.95, 'precision': 0.92}`), representing JSON data, feature dictionaries.",python,Example Code:,"# Creating and using a dictionary
hyperparameters = {'learning_rate': 0.01, 'epochs': 10, 'optimizer': 'adam'}
print(f""Initial params: {hyperparameters}"")

# Add/Update key-value pair
hyperparameters['batch_size'] = 64
hyperparameters['epochs'] = 20 # Update existing value
print(f""Updated params: {hyperparameters}"")

# Access value by key
lr = hyperparameters['learning_rate']
print(f""Learning Rate: {lr}"") # Output: 0.01

# Safely get value (returns None if key doesn't exist)
dropout = hyperparameters.get('dropout')
print(f""Dropout (safe get): {dropout}"") # Output: None

# Get value with a default if key doesn't exist
regularizer = hyperparameters.get('regularizer', 'None')
print(f""Regularizer (with default): {regularizer}"") # Output: None

# Check if a key exists
has_epochs = 'epochs' in hyperparameters
print(f""Does 'epochs' key exist? {has_epochs}"") # Output: True","This Python code demonstrates dictionary operations: creation, adding/updating items, accessing values by key (including safe access with `.get()`), and checking for key existence."
python-concepts-demo,,,,6,Try it: Check Hyperparameter,"(Interactive element in HTML - user inputs a key, JS checks if key exists in a sample dictionary and displays value)",,,,
python-concepts-demo,,,,7,4. Functions: Reusable Code Blocks,"Functions (defined using `def`) group a block of code to perform a specific task. They promote code organization, reusability, and make programs easier to read and debug. Functions can accept inputs (arguments/parameters) and optionally return one or more output values.
**Relevance**: Defining preprocessing steps (e.g., `preprocess_text(text)`), evaluation metrics (e.g., `calculate_f1_score(y_true, y_pred)`), model building blocks, data loading logic, API endpoint handlers.",python,Example Code:,"# Define a function to calculate accuracy
def calculate_accuracy(correct_predictions: int, total_predictions: int) -> float:
    """"""Calculates the accuracy percentage. Handles division by zero.""""""
    if not isinstance(correct_predictions, int) or not isinstance(total_predictions, int):
        raise TypeError(""Inputs must be integers."")
    if total_predictions <= 0:
        print(""Warning: Total predictions is zero or negative. Returning 0.0 accuracy."")
        return 0.0
    if correct_predictions < 0 or correct_predictions > total_predictions:
         raise ValueError(""Correct predictions must be between 0 and total predictions."")

    accuracy_percent = (correct_predictions / total_predictions) * 100
    return accuracy_percent

# Call the function
try:
    acc = calculate_accuracy(correct=85, total=100) # Mismatch with example call in HTML, using 'correct' and 'total' as arg names
    print(f""Accuracy: {acc:.1f}%"") # Output: Accuracy: 85.0%

    acc_zero_total = calculate_accuracy(0, 0)
    print(f""Accuracy (zero total): {acc_zero_total:.1f}%"") # Output: Warning... Accuracy: 0.0%
except (TypeError, ValueError) as e:
    print(f""Error: {e}"")
","This Python code defines a function `calculate_accuracy` that takes the number of correct and total predictions as integers, returns the accuracy as a percentage, and includes error handling for invalid inputs."
python-concepts-demo,,,,8,Try it: Calculate Accuracy,"(Interactive element in HTML - user inputs correct and total predictions, JS calls a similar function and displays accuracy)",,,,
pytorch-concepts-demo,PyTorch Concepts,"Learn about core PyTorch concepts for deep learning, including Tensors, Autograd, nn.Module, and training loops.","PyTorch, deep learning, AI, machine learning, tensors, autograd, neural network, Python",0,Understanding PyTorch Concepts,"**PyTorch** is a leading open-source machine learning framework, particularly strong in **deep learning** research and development. Developed primarily by Meta AI, it's known for its Pythonic feel, flexibility, powerful GPU acceleration, and dynamic computation graphs.",,,,
pytorch-concepts-demo,,,,1,1. Core PyTorch Concepts,"
* **Tensors (`torch.Tensor`)**: The fundamental data structure. Multi-dimensional arrays, similar to NumPy arrays, but with GPU acceleration and support for automatic differentiation (Autograd).
* **Autograd (Automatic Differentiation)**: PyTorch's engine for automatically calculating gradients. When a tensor has `requires_grad=True`, operations are tracked. Calling `.backward()` on a scalar output computes gradients, stored in `.grad`. Essential for backpropagation.
* **Modules (`torch.nn.Module`)**: Base class for neural network modules (layers, loss functions, custom models). Defines learnable parameters (`nn.Parameter`), submodules, and the `forward()` method for computation logic.
* **Optimizers (`torch.optim`)**: Algorithms (SGD, Adam, RMSprop) to update model parameters based on gradients from Autograd.
* **Dynamic Computation Graphs**: PyTorch builds computation graphs ""on-the-fly"" (""define-by-run""), making debugging intuitive and allowing flexible model architectures with dynamic control flow.
**Relevance**: These components provide a flexible, powerful, Python-friendly environment for deep learning in computer vision, NLP, reinforcement learning, etc.",python,Illustrative Snippet (Tensor & Autograd):,"import torch

# Create tensors. 'requires_grad=True' tells PyTorch to track operations
# on these tensors for automatic gradient calculation.
x = torch.tensor([[1., 2.], [3., 4.]], requires_grad=True)
w = torch.tensor([[0.5], [0.1]], requires_grad=True)
b = torch.tensor([0.2], requires_grad=True)

# --- Define a simple computation graph ---
# 1. Linear transformation: y = x * w + b (using matrix multiplication '@')
y = x @ w + b
# 'y' now has a 'grad_fn' attribute pointing to the operation that created it.

# 2. Calculate the mean of y (resulting in a scalar tensor)
z = y.mean()
# 'z' also has a 'grad_fn'.

print(f""Input x:\n{x}"")
print(f""Weights w:\n{w}"")
print(f""Bias b:\n{b}"")
print(f""Output y (y = x@w + b):\n{y}"")
print(f""Final scalar z (z = y.mean()): {z}"")

# --- Calculate Gradients using Autograd ---
# Calling .backward() on a scalar tensor (like 'z') computes the gradient
# of that scalar with respect to all tensors in the graph that have requires_grad=True.
print(""\nCalculating gradients (z.backward())..."")
z.backward()

# Gradients are accumulated in the .grad attribute of the leaf tensors (x, w, b)
print(f""\nGradient dz/dw (dL/dw if z is loss L):\n{w.grad}"")
print(f""Gradient dz/db (dL/db if z is loss L):\n{b.grad}"")
print(f""Gradient dz/dx (dL/dx if z is loss L):\n{x.grad}"")

# Note: Gradients are only computed for tensors with requires_grad=True.
# Note: Gradients accumulate by default. Use optimizer.zero_grad() in training loops.","This Python snippet demonstrates basic PyTorch tensor operations and automatic differentiation (Autograd). It creates tensors, performs a computation, and then uses `.backward()` to calculate gradients."
pytorch-concepts-demo,,,,2,2. Building Neural Networks (`torch.nn`),"PyTorch provides the `torch.nn` module, which contains building blocks for creating neural networks. Layers, activation functions, loss functions, and full models are typically defined as classes inheriting from `nn.Module`.",python,Illustrative Snippet (Simple Network Definition):,"import torch
import torch.nn as nn
import torch.nn.functional as F # Contains activation functions like ReLU

# Define a simple neural network class inheriting from nn.Module
class SimpleNet(nn.Module):
    # Constructor: Define the layers the network will use
    def __init__(self, input_size: int, hidden_size: int, output_size: int):
        super(SimpleNet, self).__init__() # Call parent class constructor
        # Define layers as attributes of the class. PyTorch automatically
        # registers parameters within these layers (weights, biases).
        self.layer1 = nn.Linear(input_size, hidden_size) # Fully connected layer
        self.layer2 = nn.Linear(hidden_size, output_size) # Another fully connected layer
        print(f""SimpleNet initialized with input={input_size}, hidden={hidden_size}, output={output_size}"")

    # Define the forward pass: How data flows through the defined layers
    # This method is called when you pass input data to the model instance (e.g., model(input_data))
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # Pass input through the first layer
        x = self.layer1(x)
        # Apply ReLU activation function (non-linearity)
        x = F.relu(x)
        # Pass through the second layer
        x = self.layer2(x)
        # Note: A final activation (like Softmax for classification) is often applied
        # *outside* the model, usually combined with the loss function for numerical stability
        # (e.g., nn.CrossEntropyLoss includes Softmax).
        return x

# --- Using the Model ---

# Define network dimensions
input_dim = 10   # e.g., 10 input features
hidden_dim = 20  # Number of neurons in the hidden layer
output_dim = 3   # e.g., for predicting 3 classes

# Instantiate the model (create an object of the SimpleNet class)
model = SimpleNet(input_dim, hidden_dim, output_dim)

# Print the model architecture (shows layers and their parameters)
print(""\nModel Architecture:"")
print(model)

# Create some dummy input data (e.g., a batch of 64 samples)
# torch.randn creates a tensor with random numbers from a standard normal distribution
dummy_input = torch.randn(64, input_dim)
print(f""\nShape of dummy input: {dummy_input.shape}"")

# Perform a forward pass by calling the model instance like a function
# This implicitly calls the model.forward(dummy_input) method
output = model(dummy_input)

# Print the shape of the output tensor
# Should be (batch_size, num_classes) -> (64, 3)
print(f""Shape of model output: {output.shape}"")
# print(f""Sample output (first 2 rows):\n{output[:2]}"") # Raw scores (logits)",This Python code defines a simple neural network `SimpleNet` using `torch.nn.Module`. It initializes linear layers and defines the forward pass with a ReLU activation. It then instantiates the model and performs a forward pass with dummy data.
pytorch-concepts-demo,,,,3,3. Training Loop (Conceptual),"Training a PyTorch model typically involves iterating through the dataset multiple times (epochs). Within each epoch, you iterate through batches of data, perform a forward pass, calculate the loss, compute gradients (backward pass), and update the model's weights using an optimizer.",python,Illustrative Snippet (Conceptual Training Step):,"# --- Setup (Conceptual - assume these are defined elsewhere) ---
# model = SimpleNet(input_dim, hidden_dim, output_dim) # Instantiated model
# dataloader = YourDataLoader(...) # Provides batches of (inputs, labels)
# loss_fn = nn.CrossEntropyLoss() # Example loss function for classification
# optimizer = torch.optim.Adam(model.parameters(), lr=0.001) # Example optimizer
# device = torch.device(""cuda"" if torch.cuda.is_available() else ""cpu"") # Use GPU if available
# model.to(device) # Move model parameters to the chosen device
# num_epochs = 5
# --- End Setup ---


# --- Conceptual Training Loop ---
# for epoch in range(num_epochs):
#     model.train() # Set the model to training mode (enables dropout, batchnorm updates)
#     running_loss = 0.0
#
#     for i, batch in enumerate(dataloader):
#         # 1. Get inputs and labels from the batch and move to device
#         batch_inputs, batch_labels = batch
#         inputs = batch_inputs.to(device)
#         labels = batch_labels.to(device) # Ensure labels are also on the correct device
#
#         # 2. Zero the gradients accumulated from the previous batch
#         optimizer.zero_grad()
#
#         # 3. Forward pass: Get model predictions (outputs/logits)
#         outputs = model(inputs)
#
#         # 4. Calculate the loss between predictions and actual labels
#         loss = loss_fn(outputs, labels)
#
#         # 5. Backward pass: Compute gradients of the loss w.r.t. model parameters
#         loss.backward()
#
#         # 6. Update weights: Adjust model parameters based on computed gradients
#         optimizer.step()
#
#         # --- Logging (optional) ---
#         running_loss += loss.item() # .item() gets the scalar value from the loss tensor
#         if (i + 1) % 100 == 0: # Print every 100 batches
#             print(f""Epoch [{epoch+1}/{num_epochs}], Batch [{i+1}/{len(dataloader)}], Loss: {running_loss / 100:.4f}"")
#             running_loss = 0.0
#
#     # --- Validation Loop (Conceptual - typically done after each epoch) ---
#     # model.eval() # Set model to evaluation mode (disables dropout, etc.)
#     # with torch.no_grad(): # Disable gradient calculation for validation
#     #     # Iterate through validation dataloader
#     #     # Calculate validation loss and metrics (e.g., accuracy)
#     # print(f""Epoch {epoch+1} Validation Accuracy: ..."")

print(""Conceptual training loop structure shown above."")","This conceptual Python snippet outlines the typical structure of a PyTorch training loop, including setting the model to train mode, iterating through data batches, zeroing gradients, performing forward and backward passes, and updating model weights with an optimizer."
pytorch-concepts-demo,,,,4,Conclusion,"PyTorch provides a flexible, Pythonic, and powerful platform highly favored for deep learning research and development. Its core concepts of Tensors (with GPU support), Autograd (for automatic gradient computation), `nn.Module` (for building networks), `optim` (for updating weights), and dynamic computation graphs enable the creation, training, and debugging of complex neural networks for a wide range of AI tasks in NLP, Computer Vision, Reinforcement Learning, and beyond. Its strong adoption in the research community often means cutting-edge models and techniques are readily available and implemented first in PyTorch.",,,,
r-concepts-demo,R Concepts for Data Science,"Learn about core R language concepts, data structures (vectors, data frames), and key packages like dplyr and ggplot2 for statistical computing and data science.","R language, data science, statistics, dplyr, ggplot2, Tidyverse, data analysis, visualization",0,R Concepts for Data Science,"Alongside Python, **R** is a powerful open-source language and environment specifically designed for **statistical computing and graphics**. It's widely used by statisticians, data analysts, and researchers, particularly in academia and fields like bioinformatics, finance, and social sciences. This page highlights some core R concepts and popular packages relevant to data science.",,,,
r-concepts-demo,,,,1,1. Core Data Structures,"R has several fundamental data structures tailored for statistical work:
* **Vectors**: Ordered collections where all elements *must* be the same atomic data type (e.g., numeric, character, logical, integer). Created with the `c()` function. Vectors are the foundation for efficient element-wise calculations (vectorization).
* **Data Frames (`data.frame`)**: The primary structure for tabular data, analogous to a spreadsheet or Pandas DataFrame. A list of vectors of equal length, where each vector is a column. Columns can hold different data types.
* **Lists (`list`)**: Generic, ordered collections where elements *can* be of different types and structures (other lists, data frames, vectors, functions).
* **Matrices (`matrix`)**: Two-dimensional arrays where all elements must be the same data type.
* **Factors**: Used to represent categorical data. Stores categories (levels) and corresponding integer codes. Important for statistical modeling.
**Relevance**: Data frames are central to most data analysis. Vectors enable efficient vectorized operations. Lists offer flexibility.",r,Example Code (Vectors & Data Frames):,"# Create atomic vectors of different types
heights_cm <- c(175, 182, 168, 179)   # Numeric vector
names <- c(""Alice"", ""Bob"", ""Charlie"", ""David"") # Character vector
is_student <- c(TRUE, FALSE, TRUE, TRUE)      # Logical vector

# Create a data frame from these vectors
student_data <- data.frame(
  StudentName = names,      # Column 1
  Height = heights_cm,    # Column 2
  IsActiveStudent = is_student # Column 3
)

print(""Created Data Frame:"")
print(student_data)
# Output:
#   StudentName Height IsActiveStudent
# 1       Alice    175            TRUE
# 2         Bob    182           FALSE
# 3     Charlie    168            TRUE
# 4       David    179            TRUE

# Access a column using $ (returns a vector)
print(""\nAccessing the Height column:"")
print(student_data$Height)
# Output: [1] 175 182 168 179

# Access a specific element [row, column] (R uses 1-based indexing!)
first_student_height <- student_data[1, 2] # Row 1, Column 2
print(paste(""\nHeight of first student:"", first_student_height))
# Output: [1] ""Height of first student: 175""

# Perform a vectorized operation on the Height vector
heights_meters <- heights_cm / 100
print(""\nHeights in meters (vectorized operation):"")
print(heights_meters)
# Output: [1] 1.75 1.82 1.68 1.79","This R code snippet demonstrates the creation of vectors (numeric, character, logical) and a data frame from these vectors. It also shows how to access columns and elements within the data frame and perform vectorized operations."
r-concepts-demo,,,,2,2. Key Packages: The Tidyverse Ecosystem,"While base R is powerful, the **Tidyverse** is an opinionated collection of R packages designed for data science that share an underlying design philosophy, grammar, and data structures (like tibbles). It makes common data manipulation and visualization tasks intuitive and efficient.
* **`dplyr`**: A grammar of data manipulation (`filter()`, `select()`, `arrange()`, `mutate()`, `summarise()`, `group_by()`). Often used with the pipe operator `%>%` (or `|>`).
* **`ggplot2`**: Implementation of the ""Grammar of Graphics"" for creating elegant and complex data visualizations.
* **`tidyr`**: Tools for tidying data, primarily reshaping (`pivot_longer()`, `pivot_wider()`).
* **`readr`**: Fast and friendly ways to read rectangular data files.
* **`purrr`**: Enhances R's functional programming toolkit.
* **`tibble`**: Modern reimagining of data frames.
* **`stringr`**: Consistent wrappers for common string operations.
* **`forcats`**: Tools for working with categorical variables (factors).
**Relevance**: The Tidyverse (especially `dplyr` and `ggplot2`) forms the core workflow for most modern data analysis and visualization tasks in R.",r,Example Code (`dplyr` & `ggplot2`):,"# Load libraries (assumes installed: install.packages(""tidyverse""))
# library(tidyverse) # Loads core tidyverse packages like dplyr, ggplot2, etc.
library(dplyr)
library(ggplot2) # Corrected: library(ggplot2)

# Example using the built-in 'iris' dataset
data(iris)

# --- Data Manipulation with dplyr ---
# Use the pipe operator %>% (read as ""then"") to chain operations
setosa_summary <- iris %>%
  filter(Species == ""setosa"") %>%             # Keep only rows where Species is ""setosa""
  select(Sepal.Length, Petal.Length) %>%    # Select only these two columns
  mutate(Petal.Area = Petal.Length * 3.14) %>% # Create a new column (conceptual area)
  summarise(Avg.Sepal.Length = mean(Sepal.Length), # Calculate summary statistics
            Avg.Petal.Area = mean(Petal.Area),
            Count = n())                       # Count number of rows

print(""Summary for Setosa Petals:"")
print(setosa_summary)

# --- Data Visualization with ggplot2 ---
# Create a scatter plot of Petal Length vs Width, colored by Species
iris_plot <- ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width)) +
  geom_point(aes(color = Species, shape = Species), size = 2.5, alpha = 0.8) + # Map color and shape to Species
  geom_smooth(method = ""lm"", aes(color = Species), se = FALSE) + # Add linear regression lines per species
  scale_color_viridis_d() + # Use a colorblind-friendly palette
  scale_shape_manual(values = c(16, 17, 18)) + # Manually set shapes
  labs(title = ""Iris Petal Dimensions by Species"",
       subtitle = ""Showing relationship between length and width"",
       x = ""Petal Length (cm)"",
       y = ""Petal Width (cm)"",
       color = ""Flower Species"", # Legend titles
       shape = ""Flower Species"") +
  theme_minimal(base_size = 11) + # Apply a clean theme
  theme(legend.position = ""bottom"")

# In an interactive R session, this would display the plot:
# print(iris_plot)

# To save the plot to a file:
# ggsave(""iris_petal_plot.png"", plot = iris_plot, width = 7, height = 5, dpi = 300)
print(""\n(ggplot object 'iris_plot' created but not displayed here)"")","This R code snippet demonstrates data manipulation using `dplyr` to filter, select, mutate, and summarize the iris dataset. It then uses `ggplot2` to create a scatter plot of petal dimensions, colored and shaped by species, with linear regression lines."
r-concepts-demo,,,,3,3. Statistical Modeling & Machine Learning,"R's origins are in statistics, and it excels at traditional statistical modeling. It also has extensive packages for various machine learning tasks.
* **Base R Statistics**: Built-in functions for linear models (`lm`), generalized linear models (`glm`), ANOVA (`aov`), t-tests, chi-squared tests, and probability distributions.
* **`caret`**: Comprehensive package providing a unified interface to hundreds of regression and classification models. Includes tools for data splitting, preprocessing, feature selection, model training, hyperparameter tuning, and evaluation.
* **`tidymodels`**: Newer, cohesive Tidyverse-aligned framework for modeling and ML. Includes `rsample` (splitting), `recipes` (preprocessing), `parsnip` (model interface), `tune` (tuning), `yardstick` (evaluation), `workflows`.
* **Specific Model Packages**: Numerous packages for specific algorithms (e.g., `randomForest`, `e1071` for SVMs, `xgboost`, `lme4` for mixed-effects models).
* **Deep Learning Interfaces**: `keras` and `torch` packages provide R interfaces to Python's TensorFlow/Keras and PyTorch (require Python installation).
**Relevance**: R provides a first-class environment for rigorous statistical analysis, hypothesis testing, building interpretable models, and applying ML algorithms, especially when statistical rigor is paramount.",r,Example Code (Conceptual Model Fit with `tidymodels`):,"# Conceptual workflow using tidymodels (assumes libraries installed)
# install.packages(""tidymodels"")
library(tidymodels)

# Load data (using iris again)
data(iris)
iris_tbl <- as_tibble(iris) # Convert to tibble for better printing

# 1. Data Split (using rsample)
set.seed(123) # for reproducibility
iris_split <- initial_split(iris_tbl, prop = 0.80, strata = Species) # Stratified split
iris_train <- training(iris_split)
iris_test <- testing(iris_split)

# 2. Define Model Specification (using parsnip)
# Specify a Random Forest model, indicating the engine (package) to use
rf_spec <- rand_forest(trees = 100) %>% # Specify model type and main parameter
  set_engine(""randomForest"") %>%      # Specify the implementation package
  set_mode(""classification"")          # Specify the task type

# 3. Define Preprocessing Recipe (using recipes) - Optional but good practice
# Example: Center and scale all numeric predictors
# iris_recipe <- recipe(Species ~ ., data = iris_train) %>%
#   step_normalize(all_numeric_predictors())

# 4. Create a Workflow (using workflows) - Bundles model and optional recipe
# rf_workflow <- workflow() %>%
#   add_recipe(iris_recipe) %>% # Add preprocessing if defined
#   add_model(rf_spec)

# For simplicity without recipe:
rf_workflow_simple <- workflow() %>%
  add_formula(Species ~ .) %>% # Define formula directly
  add_model(rf_spec)

# 5. Train the Workflow
print(""Fitting the workflow (conceptual)..."")
# rf_fit <- fit(rf_workflow_simple, data = iris_train)
print(""Workflow fitting complete."")

# Print the fitted workflow object (summary)
# print(rf_fit)

# 6. Make Predictions and Evaluate (using yardstick)
print(""\nMaking predictions and evaluating (conceptual)..."")
# test_predictions <- predict(rf_fit, new_data = iris_test) %>%
#   bind_cols(iris_test %>% select(Species)) # Add actual labels

# Calculate accuracy
# accuracy_metric <- accuracy(test_predictions, truth = Species, estimate = .pred_class)
# print(accuracy_metric)

# Calculate confusion matrix
# conf_mat_metric <- conf_mat(test_predictions, truth = Species, estimate = .pred_class)
# print(conf_mat_metric)

print(""Prediction and evaluation complete."")","This R code snippet outlines a conceptual machine learning workflow using the `tidymodels` framework. It covers data splitting, model specification (Random Forest), workflow creation (model only, for simplicity), and placeholders for training and evaluation."
r-concepts-demo,,,,4,Conclusion,"While Python often dominates in areas like deep learning model development and production deployment, R remains a powerhouse for statistical analysis, data visualization, and specific modeling tasks. Its expressive syntax tailored for statistics (via base R and modern frameworks like `tidymodels`) and the elegant Grammar of Graphics (`ggplot2`) make it an indispensable tool for many data scientists, statisticians, and researchers.
Often, the choice between R and Python depends on the specific task, team expertise, existing infrastructure, and the primary goal (e.g., statistical inference vs. building a deployable application component).",,,,
ruby-concepts-demo,Ruby & Rails in ML/AI,Learn about Ruby and the Ruby on Rails framework and how they typically integrate with external Machine Learning services via APIs.,"Ruby, Ruby on Rails, Rails, machine learning, AI, API integration, web development, web application",0,Ruby & Rails in the ML/AI Ecosystem,"While Python dominates ML model development, **Ruby**, particularly through the popular **Ruby on Rails (Rails)** framework, shines in building robust, maintainable, and user-friendly web applications. A common pattern is to use Rails for the user interface and application logic, while interacting with separate ML models served as APIs (often built in Python using Flask, FastAPI, etc.).",,,,
ruby-concepts-demo,,,,1,1. Ruby on Rails for Web Applications,"Rails is a full-stack Model-View-Controller (MVC) framework excelling at:
* **Rapid Development (Productivity)**: ""Convention over Configuration"" and built-in generators speed up development.
* **Developer Happiness**: Ruby's elegant syntax and Rails conventions aim for enjoyable development.
* **Database Interaction (ActiveRecord)**: Powerful ORM (ActiveRecord) simplifies database operations.
* **Mature Ecosystem (Gems)**: Vast collection of libraries (gems) via Bundler (e.g., Devise for auth, Sidekiq for background jobs).
* **Strong Conventions**: Promotes well-established patterns for structuring web apps.
**Relevance**: Ideal for building the user-facing part of an application that needs to leverage ML capabilities from a separate service.",,,,
ruby-concepts-demo,,,,2,2. Ruby's Role in ML/AI/Data Science,"Compared to Python and R, Ruby has a much smaller direct footprint in core ML/DS due to:
* **Limited Core Scientific Libraries**: Lacks extensive numerical computing (NumPy), data manipulation (Pandas), and core ML/DL framework ecosystems (Scikit-learn, TensorFlow, PyTorch) found in Python.
* **Performance Considerations**: As a dynamic, interpreted language, Ruby can be slower than Python (which uses C/C++ extensions) for computationally intensive ML tasks.
* **Community Focus**: Ruby community primarily focuses on web development, leading to fewer ML/DS resources.
* **Existing Libraries (Gems)**: Some Ruby gems for ML/DS exist (e.g., `ruby-fann`, `daru`) but are generally less comprehensive or active than Python counterparts.
**Typical Use Cases** (Ruby/Rails interacting with ML/AI):
* **Web Interface Integration (Most Common)**: Rails front-end calls a separate ML microservice (often Python/Flask/FastAPI) via HTTP API.
* **Simple Scripting/Automation**: Ruby's clean syntax for general scripting related to deployment or data pipeline orchestration.
* **Data API Consumption**: Consuming data from various APIs in a web app workflow.",,,,
ruby-concepts-demo,,,,3,3. Integrating with External ML APIs (Common Pattern),"The most frequent way Ruby/Rails interacts with ML is by making HTTP requests to a dedicated ML API.
1. ML model developed (Python) and deployed behind a web API (Flask, FastAPI, SageMaker, Vertex AI).
2. Rails app handles user interaction, gathers input.
3. Rails controller/service object sends input data (JSON) to ML API via HTTP POST (using `Net::HTTP`, `HTTParty`, or `Faraday`).
4. ML API processes data, runs inference, returns predictions (JSON) to Rails.
5. Rails app receives and parses the JSON response.
6. Results processed and displayed in Rails view.",ruby,Illustrative Snippet (Conceptual Rails Controller Action):,"# Example: app/controllers/predictions_controller.rb
# This controller handles requests related to getting predictions.

# Standard Ruby libraries for HTTP requests and JSON parsing
require 'net/http'
require 'uri'
require 'json'

class PredictionsController < ApplicationController

  # Renders the form for user input (e.g., text area)
  # Corresponds to GET /predict/new
  def new
    # Implicitly renders app/views/predictions/new.html.erb
  end

  # Processes the form submission and calls the ML API
  # Corresponds to POST /predict
  def create
    # Safely get input text from form parameters submitted by the view
    input_text = params.permit(:text_to_analyze)[:text_to_analyze]

    # Basic validation
    if input_text.blank?
      flash.now[:error] = ""Please enter some text to analyze.""
      render :new, status: :unprocessable_entity # Re-render form with error
      return
    end

    # Define the external ML API endpoint URL
    # Replace with your actual ML API endpoint
    ml_api_url = ""http://your-python-ml-api.com/sentiment"" # Example sentiment API

    # Prepare the data payload to send as JSON
    request_payload = { text: input_text }.to_json

    begin
      uri = URI.parse(ml_api_url)
      http = Net::HTTP.new(uri.host, uri.port)

      # Uncomment the following line if your API uses HTTPS
      # http.use_ssl = (uri.scheme == ""https"")
      # http.verify_mode = OpenSSL::SSL::VERIFY_PEER # Recommended for production HTTPS

      # Create the POST request
      request = Net::HTTP::Post.new(uri.request_uri, {'Content-Type': 'application/json', 'Accept': 'application/json'})
      request.body = request_payload

      # Set timeouts (important for production)
      http.read_timeout = 10 # seconds
      http.open_timeout = 5  # seconds

      # Send the request and get the response
      response = http.request(request)

      # Check if the request was successful (HTTP 2xx status codes)
      if response.is_a?(Net::HTTPSuccess)
        # Parse the JSON response body
        @prediction_result = JSON.parse(response.body)
        # Example result structure: {""sentiment"": ""POSITIVE"", ""score"": 0.98}

        # Make the result available to the view and render the result page
        # Renders app/views/predictions/show.html.erb
        render :show
      else
        # Handle non-successful HTTP responses from the ML API
        Rails.logger.error ""ML API Error: #{response.code} #{response.message} - Body: #{response.body}""
        flash[:error] = ""Analysis service returned an error (#{response.code}). Please try again later.""
        render :new, status: :service_unavailable # Indicate service issue
      end

    rescue JSON::ParserError => e
      # Handle cases where the API response is not valid JSON
       Rails.logger.error ""ML API JSON Parse Error: #{e.message}""
       flash[:error] = ""Received an invalid response from the analysis service.""
       render :new, status: :bad_gateway
    rescue Net::OpenTimeout, Net::ReadTimeout => e
       # Handle network timeout errors
       Rails.logger.error ""ML API Timeout Error: #{e.message}""
       flash[:error] = ""The analysis service took too long to respond. Please try again later.""
       render :new, status: :gateway_timeout
    rescue StandardError => e
      # Handle other potential errors (e.g., network connection refused)
      Rails.logger.error ""ML API Connection Error: #{e.message}""
      flash[:error] = ""Could not connect to the analysis service. Please try again later.""
      render :new, status: :internal_server_error
    end
  end

end # End of class","This conceptual Rails controller action demonstrates sending user input (`params[:text_to_analyze]`) to an external ML API, handling potential success and error responses, parsing the JSON result, and preparing to display it in a view (`render :show`)."
ruby-concepts-demo,,,,4,Conclusion,"Ruby, and particularly the Ruby on Rails framework, excels at building productive, maintainable, and user-friendly web applications. While it's not the primary language for developing and training complex machine learning models due to ecosystem limitations compared to Python, it plays a vital role in the application layer.
The most common and effective pattern involves Rails applications interacting with specialized ML models (often built and served using Python) via well-defined APIs. This architectural approach allows development teams to leverage the best tool for each job: Ruby/Rails for rapid and robust web development, and Python/specialized libraries for the demanding computational and algorithmic tasks inherent in machine learning.",,,,
scala-concepts-demo,Scala Concepts for Big Data & ML,"Learn about the Scala programming language, its functional features, JVM integration, and its key role in Apache Spark for Big Data and Machine Learning.","Scala, Spark, big data, JVM, functional programming, object-oriented, data engineering, machine learning",0,Scala Concepts for Big Data & ML,"While Python is the primary language for most ML/DS model development, **Scala** plays a significant role in the **Big Data** ecosystem, particularly as the native language of **Apache Spark**. It's a powerful language that combines functional and object-oriented programming paradigms on the Java Virtual Machine (JVM).",,,,
scala-concepts-demo,,,,1,1. Key Scala Features,"
* **JVM Language**: Runs on the Java Virtual Machine (JVM), allowing seamless interoperability with Java code and libraries.
* **Statically Typed with Type Inference**: Catches type errors at compile time but often feels less verbose due to type inference.
* **Functional Programming (FP) Emphasis**: Treats functions as first-class citizens. Encourages immutability, pattern matching, case classes, higher-order functions, lazy evaluation. Leads to concise, expressive, parallelizable code.
* **Object-Oriented Programming (OOP)**: Fully supports OOP (classes, objects, inheritance, traits).
* **Conciseness**: Syntax often requires less boilerplate than Java.
* **Actor Model (via Akka)**: Commonly used with Akka for highly concurrent, distributed, fault-tolerant systems.
**Relevance**: Blend of FP/OOP, static typing, conciseness, JVM integration made it strong for systems like Spark, Kafka, Akka.",,,,
scala-concepts-demo,,,,2,2. Scala and Apache Spark,"Scala's primary relevance in ML/DS comes from being the native language of **Apache Spark**.
* **Native API**: Spark is written in Scala. Scala API is most comprehensive, often gets new features first.
* **Performance**: Scala Spark jobs can sometimes offer better performance than PySpark for complex UDFs (avoids Python-JVM communication overhead).
* **Type Safety**: Catches errors at compile time with Spark DataFrames/Datasets.
* **Conciseness for Spark Operations**: Scala's functional features align well with Spark's transformation APIs.
* **Big Data Pipelines**: Data engineers use Scala with Spark for robust, high-performance ETL/ELT pipelines.
* **Spark MLlib**: Spark's ML library can be used directly from Scala for distributed model training/inference.
**Relevance**: Valuable for Data Engineers building core Spark infrastructure, or ML Engineers needing max performance, type safety, or latest Spark features.",scala,Example Code (Conceptual Spark with Scala):,"// Build tool dependencies (e.g., build.sbt) would include Spark libraries.
import org.apache.spark.sql.{SparkSession, DataFrame, Row}
import org.apache.spark.sql.functions._ // Import common functions like col(), avg(), count()
import org.apache.spark.rdd.RDD // For RDD example

object SparkScalaDemo {

  def main(args: Array[String]): Unit = {

    // Create a SparkSession (entry point)
    val spark = SparkSession.builder
      .appName(""ScalaSparkDemo"")
      .master(""local[*]"") // Use local mode for demo; set master URL for cluster
      // .config(""spark.some.config.option"", ""some-value"") // Add configurations if needed
      .getOrCreate()

    // Import implicits for convenience methods like .toDF() and $"""" syntax
    import spark.implicits._

    println(""SparkSession created."")

    // --- RDD Example: Word Count ---
    println(""\n--- RDD Word Count Example ---"")
    // Load text data into an RDD (Resilient Distributed Dataset)
    // val lines: RDD[String] = spark.sparkContext.textFile(""path/to/your/textfile.txt"")
    // For demo, create RDD from a local collection:
    val lines: RDD[String] = spark.sparkContext.parallelize(Seq(
      ""Apache Spark is a unified analytics engine"",
      ""for large-scale data processing"",
      ""Spark provides high-level APIs""
    ))

    // Transformations: Split lines, map words to (word, 1), reduce by key
    val wordCounts = lines
      .flatMap(line => line.split("" ""))       // Split line into words (creates more elements)
      .map(word => (word.toLowerCase.replaceAll(""[^a-z]"", """"), 1)) // Map to (word, 1) pairs, basic cleanup
      .filter { case (word, count) => word.nonEmpty } // Filter out empty strings after cleanup
      .reduceByKey(_ + _)                     // Aggregate counts: (Int, Int) => Int using placeholder syntax

    // Action: Collect results and print top 10
    println(""Word Counts (Top 10):"")
    wordCounts.take(10).foreach(println)
    // Example Output: (spark,2), (for,1), (apis,1), (processing,1), ...

    // --- DataFrame Example: Data Manipulation ---
    println(""\n--- DataFrame Manipulation Example ---"")
    // Load data into a DataFrame (more common now than RDDs for structured data)
    // val df: DataFrame = spark.read.json(""path/to/data.json"")
    // For demo, create DataFrame:
    val data = Seq(
      (""Alice"", 34, ""New York"", 80000.0),
      (""Bob"", 25, ""Los Angeles"", 65000.0),
      (""Charlie"", 34, ""New York"", 90000.0)
    )
    val df: DataFrame = data.toDF(""name"", ""age"", ""city"", ""salary"") // .toDF requires implicits
    println(""Initial DataFrame:"")
    df.show()

    // DataFrame operations using Spark SQL functions and $"""" syntax
    val aggregatedDF = df
      .filter($""age"" > 30) // Filter using column expression ($ requires implicits)
      .groupBy(""city"")    // Group by city
      .agg(
        avg(""salary"").alias(""average_salary""), // Calculate average salary
        count(""*"").alias(""count"")             // Count rows in each group
      )
      .orderBy(desc(""average_salary"")) // Order results

    println(""Aggregated results (Age > 30):"")
    aggregatedDF.show()
    // Example Output:
    // +--------+----------------+-----+
    // |    city|average_salary|count|
    // +--------+----------------+-----+
    // |New York|         85000.0|    2|
    // +--------+----------------+-----+


    // Stop the SparkSession
    println(""\nStopping SparkSession."")
    spark.stop()
  }
}
","The syntax leverages Scala's functional features (like `map`, `filter`, `reduceByKey`, anonymous functions `_ + _`) and Spark's optimized DataFrame API (`$`, `agg`, `orderBy`) for concise, distributed data transformations."
scala-concepts-demo,,,,3,3. Other Niche Uses in the Ecosystem,"Beyond Spark, Scala finds use in related areas:
* **Akka Framework**: Scala is primary for Akka (concurrent, distributed, resilient message-driven apps using actor model). Could be backend for real-time AI/ML inference or streaming.
* **Apache Kafka Ecosystem**: Some Kafka tooling/libraries are Scala.
* **Specialized Libraries**: Niche financial modeling, scientific computing, or domain-specific ML libraries might be Scala.
* **Java Interoperability**: Create libraries/components to interact with large Java enterprise systems.
However, for general data analysis, ML prototyping outside Spark/Big Data/JVM, Python is more common due to larger library support and community focus.",,,,
scala-concepts-demo,,,,4,4. Conclusion,"Scala is a powerful, versatile language blending functional and object-oriented paradigms on the JVM. Its primary significance in DS/ML stems from being Apache Spark's native language, key for data engineers and ML engineers building high-performance, large-scale data processing pipelines and distributed computing applications.
While Python dominates ML research/prototyping, Scala offers advantages in type safety, performance (within Spark), and functional programming expressiveness, valuable for those in Big Data/JVM ecosystems.",,,,
news-analysis-tfidf-demo,News Article Analysis with TF-IDF,Learn how Term Frequency-Inverse Document Frequency (TF-IDF) is used to analyze news articles and identify key topics. Includes Python code examples.,"TF-IDF, news analysis, text mining, natural language processing, Python, scikit-learn, topic modeling",1,What is TF-IDF?,"TF-IDF stands for Term Frequency-Inverse Document Frequency. It's a numerical statistic that reflects how important a word is to a document in a collection or corpus.

* **Term Frequency (TF):** Measures how frequently a term appears in a document. It's often normalized by the document length.<br> TF(t, d) = (Number of times term t appears in document d) / (Total number of terms in document d)
* **Inverse Document Frequency (IDF):** Measures how important a term is. It diminishes the weight of terms that occur very frequently in the document set and increases the weight of terms that occur rarely.<br> IDF(t, D) = log(Total number of documents in corpus D / Number of documents with term t in them)
* **TF-IDF Score:** The product of TF and IDF.<br> TF-IDF(t, d, D) = TF(t, d) * IDF(t, D)

Words with higher TF-IDF scores are considered more relevant to the specific document.",,,,
news-analysis-tfidf-demo,News Article Analysis with TF-IDF,Learn how Term Frequency-Inverse Document Frequency (TF-IDF) is used to analyze news articles and identify key topics. Includes Python code examples.,"TF-IDF, news analysis, text mining, natural language processing, Python, scikit-learn, topic modeling",2,The News Analysis Process,"The process involves several steps, from preparing the text data to calculating and interpreting TF-IDF scores. We'll use Python and the Scikit-learn library.",python,Illustrative Python Code:,"# --- Core Imports ---
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer
import nltk
import re
from nltk.corpus import wordnet, stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from collections import Counter

# --- Sample Articles (Conceptual - actual articles would be loaded) ---
# articles = [article_1_text, article_2_text, ..., article_10_text]
# For this example, assume 'articles' is a list of strings, where each string is a news article.

# --- 1. Text Preprocessing ---
stop_words = stopwords.words('english')
normalizer = WordNetLemmatizer()

def get_part_of_speech(word):
    # Simplified POS tagging for lemmatization
    probable_part_of_speech = wordnet.synsets(word)
    pos_counts = Counter()
    pos_counts[""n""] = len([item for item in probable_part_of_speech if item.pos()==""n""])
    pos_counts[""v""] = len([item for item in probable_part_of_speech if item.pos()==""v""])
    pos_counts[""a""] = len([item for item in probable_part_of_speech if item.pos()==""a""])
    pos_counts[""r""] = len([item for item in probable_part_of_speech if item.pos()==""r""])
    if not pos_counts: # Handle cases where no synsets are found
        return 'n' # Default to noun
    most_likely_part_of_speech = pos_counts.most_common(1)[0][0]
    return most_likely_part_of_speech

def preprocess_text(text):
    cleaned = re.sub(r'\W+', ' ', text).lower() # Remove non-alphanumeric, lowercase
    tokenized = word_tokenize(cleaned)
    # Lemmatize tokens, excluding stopwords and digits
    normalized = "" "".join([
        normalizer.lemmatize(token, get_part_of_speech(token))
        for token in tokenized
        if token not in stop_words and not re.match(r'\d+', token) and len(token) > 1 # Basic filter
    ])
    return normalized

# Assume 'articles' is a list of raw article strings
# processed_articles = [preprocess_text(article) for article in articles]
# print(""Sample processed article:"", processed_articles[0] if processed_articles else ""N/A"")

# --- 2. Calculating TF-IDF Scores (Method 1: CountVectorizer + TfidfTransformer) ---
# Initialize CountVectorizer: converts text to a matrix of token counts
count_vectorizer = CountVectorizer()
# Fit and transform the processed articles to get word counts
# word_counts = count_vectorizer.fit_transform(processed_articles)

# Initialize TfidfTransformer: transforms a count matrix to a normalized tf or tf-idf representation
# norm=None is used to get raw TF-IDF, not L2 normalized.
tfidf_transformer = TfidfTransformer(norm=None) # Or norm='l2' for normalized scores
# Fit and transform the word counts to get TF-IDF scores
# tfidf_scores_method1 = tfidf_transformer.fit_transform(word_counts)

# --- 3. Calculating TF-IDF Scores (Method 2: TfidfVectorizer) ---
# TfidfVectorizer combines CountVectorizer and TfidfTransformer in one step
tfidf_vectorizer = TfidfVectorizer(norm=None) # Or norm='l2'
# Fit and transform the processed articles directly to get TF-IDF scores
# tfidf_scores_method2 = tfidf_vectorizer.fit_transform(processed_articles)

# --- 4. Verifying Scores (Conceptual) ---
# The scores from both methods should be very close (or identical if parameters match)
# if np.allclose(tfidf_scores_method1.todense(), tfidf_scores_method2.todense()):
# print(""TF-IDF scores from both methods are equivalent."")
# else:
# print(""TF-IDF scores differ between methods."")

# --- 5. Analyzing Results ---
# To analyze, we typically convert the sparse TF-IDF matrix to a DataFrame
# feature_names = tfidf_vectorizer.get_feature_names_out() # Get the vocabulary (terms)
# article_labels = [f""Article {i+1}"" for i in range(len(processed_articles))]

# df_tfidf = pd.DataFrame(
#     tfidf_scores_method2.T.todense(), # Transpose and convert to dense array
#     index=feature_names,
#     columns=article_labels
# )
# print(""\nTF-IDF Scores DataFrame (sample):"")
# print(df_tfidf.head())

# Example: Get the term with the highest TF-IDF score for each article
# for col in df_tfidf.columns:
#     highest_score_term = df_tfidf[col].idxmax()
#     highest_score = df_tfidf[col].max()
#     print(f""Highest TF-IDF term for {col}: '{highest_score_term}' (Score: {highest_score:.2f})"")

# --- Running the example (Conceptual - requires actual 'articles' list) ---
# To run this:
# 1. Ensure you have the necessary NLTK data:
#    nltk.download('punkt')
#    nltk.download('wordnet')
#    nltk.download('omw-1.4') # Open Multilingual Wordnet
#    nltk.download('stopwords')
# 2. Populate the 'articles' list with actual news article strings.
# 3. Uncomment the execution lines (e.g., processed_articles = ..., word_counts = ...)
#
# Example usage with dummy data:
# articles_dummy = [
#     ""The cat sat on the mat. The cat played with a toy."",
#     ""The dog chased the cat. The dog barked loudly.""
# ]
# processed_articles_dummy = [preprocess_text(article) for article in articles_dummy]
# if processed_articles_dummy and any(processed_articles_dummy): # Check if not all empty
#     tfidf_vectorizer_dummy = TfidfVectorizer(norm='l2')
#     tfidf_scores_dummy = tfidf_vectorizer_dummy.fit_transform(processed_articles_dummy)
#     feature_names_dummy = tfidf_vectorizer_dummy.get_feature_names_out()
#     df_tfidf_dummy = pd.DataFrame(tfidf_scores_dummy.T.todense(), index=feature_names_dummy, columns=[""Doc1"", ""Doc2""])
#     print(""\nDummy TF-IDF Scores:"")
#     print(df_tfidf_dummy)
# else:
#     print(""Preprocessing resulted in empty documents for dummy data, TF-IDF cannot be computed."")
",Note: The code above is illustrative. Actual implementation requires the `articles` list to be populated with text data and NLTK resources to be downloaded. The preprocessing step has been enhanced to filter out stopwords and single characters for better results.
news-analysis-tfidf-demo,News Article Analysis with TF-IDF,Learn how Term Frequency-Inverse Document Frequency (TF-IDF) is used to analyze news articles and identify key topics. Includes Python code examples.,"TF-IDF, news analysis, text mining, natural language processing, Python, scikit-learn, topic modeling",3,How the Code Works,"* **Imports:** Essential libraries are imported: `pandas` for data manipulation, `numpy` for numerical operations, and `sklearn.feature_extraction.text` for TF-IDF vectorizers. NLTK is used for text preprocessing.
* **Text Preprocessing (`preprocess_text`):**
    * Converts text to lowercase.
    * Removes punctuation and special characters (`re.sub`).
    * Tokenizes the text into words (`word_tokenize`).
    * Removes common English stopwords (e.g., ""the"", ""is"", ""in"").
    * Performs lemmatization (`WordNetLemmatizer`) to reduce words to their base or dictionary form (e.g., ""running"" to ""run""). Part-of-speech (POS) tagging (`get_part_of_speech`) helps improve lemmatization accuracy.
    * Filters out numbers and very short tokens.
* **TF-IDF Calculation (Two Methods):**
    * **Method 1 (Step-by-step):**
        1.  `CountVectorizer`: Creates a vocabulary of all unique words from the processed articles and counts the occurrences of each word in each article, resulting in a document-term matrix of word counts.
        2.  `TfidfTransformer`: Takes the word count matrix and applies the TF-IDF transformation. Setting `norm=None` gives raw TF-IDF values, while `norm='l2'` (default for `TfidfVectorizer`) normalizes the vectors so each document's vector has a unit length.
    * **Method 2 (Direct):**
        * `TfidfVectorizer`: Combines the functionality of `CountVectorizer` and `TfidfTransformer` into a single class, making the process more concise.
* **Verification:** The code includes a conceptual check (`np.allclose`) to confirm that both methods yield similar TF-IDF scores, which is expected if parameters are consistent.
* **Analyzing Results:**
    * The TF-IDF scores (a sparse matrix) are often converted into a `pandas` DataFrame for easier inspection. The rows represent terms (vocabulary), columns represent articles, and cell values are the TF-IDF scores.
    * A common analysis is to find the term with the highest TF-IDF score for each article. This term can often serve as a simple keyword or topic indicator for that article.

By applying TF-IDF, we can transform unstructured text data into a structured numerical format that highlights the most distinguishing terms for each news article. This forms a basis for various downstream tasks like document clustering, similarity analysis, and information retrieval.",,,,
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",1,Understanding Wikipedia Clickstreams & PySpark,"Wikipedia clickstream data records user clicks between pairs of linked articles. It also categorizes clicks originating from outside Wikipedia (e.g., search engines). Analyzing this data can reveal popular articles, common navigation paths, and how users discover content.

**Why PySpark?**
* **Scalability:** Spark is designed for distributed computing, allowing it to handle datasets far larger than can fit in a single machine's memory.
* **Speed:** Spark performs in-memory computations, making it significantly faster than traditional MapReduce for many applications.
* **Ease of Use:** PySpark provides a Pythonic API (DataFrame API) and supports SQL queries, making it accessible to data scientists and engineers familiar with Python and SQL.
* **Versatility:** Spark supports various data sources and integrates with other big data tools.",,,,
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",2,1. Setting up Spark,"The first step in any PySpark application is to create a `SparkSession`, which is the entry point to Spark functionality.",python,PySpark Code: Creating a SparkSession,"# Import SparkSession
from pyspark.sql import SparkSession

# Create a new SparkSession
spark = SparkSession \
    .builder \
    .appName(""WikipediaClickstreamAnalysis"") \
    .getOrCreate()

print(""SparkSession created successfully"")","This code initializes a SparkSession. If one already exists, it gets the existing one; otherwise, it creates a new one. `.appName()` gives a name to your application."
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",3,2. Loading and Inspecting Data,"Once Spark is set up, we can load the clickstream data (typically from CSV or Parquet files) into a Spark DataFrame. After loading, it's crucial to inspect the schema and a sample of the data.",python,PySpark Code: Loading Data and Basic Inspection,"# Define the path to the clickstream data
# (Assuming data is in a directory named 'cleaned/clickstream' and is tab-separated)
data_path = ""./cleaned/clickstream/""

# Read the data into a DataFrame
# The raw clickstream data uses tab (\t) as a delimiter and has a header.
clickstream_df = spark.read \
    .option(""header"", True) \
    .option(""delimiter"", ""\t"") \
    .option(""inferSchema"", True) \
    .csv(data_path)

# Display the first few rows of the DataFrame
print(""Sample of the loaded data:"")
clickstream_df.show(5, truncate=False)

# Print the schema of the DataFrame
print(""DataFrame Schema:"")
clickstream_df.printSchema()

# --- Basic Transformations ---

# Drop an unnecessary column (e.g., 'language_code' if all data is English)
if 'language_code' in clickstream_df.columns:
    clickstream_df = clickstream_df.drop(""language_code"")
    print(""Dropped 'language_code' column."")

# Rename columns for clarity (e.g., 'referrer' to 'source_page', 'resource' to 'target_page')
clickstream_df = clickstream_df \
    .withColumnRenamed(""referrer"", ""source_page"") \
    .withColumnRenamed(""resource"", ""target_page"")
print(""Renamed columns 'referrer' to 'source_page' and 'resource' to 'target_page'."")

# Display schema and sample data after transformations
print(""Schema after transformations:"")
clickstream_df.printSchema()
print(""Sample data after transformations:"")
clickstream_df.show(5, truncate=False)","`spark.read.csv()` is used to load CSV data. Options like `header=True`, `delimiter=""\t""`, and `inferSchema=True` help Spark parse the file correctly. `.show()` displays rows, and `.printSchema()` shows column names and data types. `.drop()` removes columns, and `.withColumnRenamed()` renames them."
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",4,3. Querying Data,"PySpark offers two main ways to query DataFrames: the DataFrame API (programmatic) and Spark SQL. Both are powerful and can achieve similar results.

This section is split into two sub-sections for DataFrame API and Spark SQL.",,,,
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",4.1,Querying Data (DataFrame API),(Content covered by code snippet),python,PySpark Code: Querying with DataFrame API,"# Example 1: Find top sources for a specific target page
target_article = ""Hanging_Gardens_of_Babylon"" # Example article

print(f""Top sources for '{target_article}' (DataFrame API):"")
top_sources_df_api = clickstream_df \
    .filter(clickstream_df.target_page == target_article) \
    .orderBy(clickstream_df.click_count.desc()) # Use .desc() for descending order
top_sources_df_api.show(10, truncate=False)

# Example 2: Total clicks by link category
print(""Total clicks by link category (DataFrame API):"")
clicks_by_category_df_api = clickstream_df \
    .groupBy(""link_category"") \
    .sum(""click_count"") \
    .withColumnRenamed(""sum(click_count)"", ""total_clicks"") \
    .orderBy(""total_clicks"", ascending=False)
clicks_by_category_df_api.show(truncate=False)","The DataFrame API uses methods like `.filter()`, `.orderBy()`, `.groupBy()`, and `.sum()` to perform data manipulations."
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",4.2,Querying Data (Spark SQL),(Content covered by code snippet),python,PySpark Code: Querying with Spark SQL,"# To use Spark SQL, first create a temporary view of the DataFrame
clickstream_df.createOrReplaceTempView(""clickstream_view"")
print(""Created temporary view 'clickstream_view'."")

# Example 1: Find top sources for a specific target page (SQL)
target_article_sql = ""Hanging_Gardens_of_Babylon"" # Example article

print(f""Top sources for '{target_article_sql}' (Spark SQL):"")
top_sources_sql = f""""""
    SELECT *
    FROM clickstream_view
    WHERE target_page = '{target_article_sql}'
    ORDER BY click_count DESC
    LIMIT 10
""""""
spark.sql(top_sources_sql).show(truncate=False)

# Example 2: Total clicks by link category (SQL)
print(""Total clicks by link category (Spark SQL):"")
clicks_by_category_sql = """"""
    SELECT link_category, SUM(click_count) as total_clicks
    FROM clickstream_view
    GROUP BY link_category
    ORDER BY total_clicks DESC
""""""
spark.sql(clicks_by_category_sql).show(truncate=False)",`.createOrReplaceTempView()` makes the DataFrame queryable via SQL. `spark.sql()` executes SQL queries.
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",5,4. Saving Results,"After processing, results can be saved to various file formats. Parquet is often preferred for its efficiency and schema preservation, but CSV is also common.",python,PySpark Code: Saving DataFrames,"# Example: Create a DataFrame of internal links only
internal_clickstream_df = clickstream_df \
    .filter(clickstream_df.link_category == 'link') \
    .select(""source_page"", ""target_page"", ""click_count"")

print(""Sample of internal clickstream data:"")
internal_clickstream_df.show(5, truncate=False)

# Define output paths
csv_output_path = ""./results/article_to_article_csv/""
parquet_output_path = ""./results/article_to_article_pq/""

# Save as CSV files
# Note: This will create a directory with multiple part-files.
internal_clickstream_df.write \
    .mode(""overwrite"") \
    .option(""header"", True) \
    .csv(csv_output_path)
print(f""Saved internal clickstream data as CSV to {csv_output_path}"")

# Save as Parquet files (recommended for performance and schema preservation)
internal_clickstream_df.write \
    .mode(""overwrite"") \
    .parquet(parquet_output_path)
print(f""Saved internal clickstream data as Parquet to {parquet_output_path}"")",`DataFrame.write.csv()` and `DataFrame.write.parquet()` are used to save data. `.mode("overwrite")` ensures that existing files at the path are overwritten.
pyspark-wikipedia-clickstream-analysis,Analysing Wikipedia Clickstreams with PySpark,"Learn how to analyze Wikipedia clickstream data using PySpark. Covers data loading, transformation, querying with DataFrame API and SQL, and saving results.","PySpark, Spark, Wikipedia, clickstream, data analysis, big data, Python, Spark SQL, DataFrame API",6,5. Stopping the SparkSession,It's good practice to explicitly stop the SparkSession when your application is finished to release resources.,python,PySpark Code: Stopping SparkSession,"# Stop the SparkSession
spark.stop()
print(""SparkSession stopped."")","Calling `spark.stop()` closes the SparkSession and releases the resources it was using. After this, you can no longer use the `spark` object or DataFrames associated with it."
ab-testing-shoefly-demo,A/B Testing Analysis for ShoeFly.com,Learn how to perform A/B testing analysis using Python and Pandas. This example uses data from ShoeFly.com to compare ad performance.,"A/B testing, data analysis, Python, Pandas, marketing analytics, click-through rate, Shoefly",1,What is A/B Testing?,"A/B testing, also known as split testing, is a randomized experimentation process wherein two or more versions of a variable (web page, page element, ad copy, etc.) are shown to different segments of website visitors at the same time to determine which version leaves the maximum impact and drives business metrics.

Key goals for ShoeFly.com might include:
* Identifying which ad platform (`utm_source`) yields the most views and clicks.
* Determining if Ad A or Ad B has a higher click-through rate (CTR).
* Understanding if ad performance varies by day of the week.",,,,
ab-testing-shoefly-demo,A/B Testing Analysis for ShoeFly.com,Learn how to perform A/B testing analysis using Python and Pandas. This example uses data from ShoeFly.com to compare ad performance.,"A/B testing, data analysis, Python, Pandas, marketing analytics, click-through rate, Shoefly",2,1. Setup and Data Loading,The analysis begins by importing the Pandas library and loading the A/B test data from a CSV file into a DataFrame.,python,Python Code: Loading Data with Pandas,"import pandas as pd

# Load the ad clicks data
# Assume the data is in a file named 'ad_clicks.csv'
try:
    ad_clicks_df = pd.read_csv('ad_clicks.csv')
    print(""Data loaded successfully. First 5 rows:"")
    print(ad_clicks_df.head())
except FileNotFoundError:
    print(""Error: 'ad_clicks.csv' not found. Please ensure the file is in the correct directory."")
    # Create a dummy DataFrame for demonstration if file is not found
    data = {
        'user_id': range(1, 101),
        'utm_source': ['google', 'facebook', 'email', 'twitter'] * 25,
        'day': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] * 14 + ['Mon', 'Tue'],
        'ad_click_timestamp': [pd.NaT if i % 3 == 0 else pd.Timestamp('2023-01-01 10:00:00') + pd.Timedelta(hours=i) for i in range(100)],
        'experimental_group': ['A', 'B'] * 50
    }
    ad_clicks_df = pd.DataFrame(data)
    print(""\nUsing dummy data for demonstration:"")
    print(ad_clicks_df.head())","This code imports Pandas and attempts to read `ad_clicks.csv`. If the file isn't found, it creates a sample DataFrame for illustrative purposes. `ad_clicks_df.head()` displays the first few rows."
ab-testing-shoefly-demo,A/B Testing Analysis for ShoeFly.com,Learn how to perform A/B testing analysis using Python and Pandas. This example uses data from ShoeFly.com to compare ad performance.,"A/B testing, data analysis, Python, Pandas, marketing analytics, click-through rate, Shoefly",3,2. Analyzing Ad Sources,Understanding where views and clicks originate is crucial. We'll analyze the `utm_source` column.,python,Python Code: Views and Clicks by Source,"# Ensure ad_clicks_df is defined (from previous step)
if 'ad_clicks_df' in locals():
    # How many views (rows) came from each utm_source?
    views_by_source = ad_clicks_df.groupby('utm_source')['user_id'].count().reset_index()
    views_by_source.rename(columns={'user_id': 'view_count'}, inplace=True)
    print(""\nViews by UTM Source:"")
    print(views_by_source)

    # Create an 'is_click' column: True if 'ad_click_timestamp' is not null
    ad_clicks_df['is_click'] = ~ad_clicks_df['ad_click_timestamp'].isnull()
    print(""\nDataFrame with 'is_click' column (first 5 rows):"")
    print(ad_clicks_df.head())

    # Group by 'utm_source' and 'is_click' to count user_ids
    clicks_by_source_detail = ad_clicks_df.groupby(['utm_source', 'is_click'])['user_id'].count().reset_index()
    print(""\nClicks breakdown by UTM Source and is_click:"")
    print(clicks_by_source_detail)

    # Pivot the table to get counts of True (clicks) and False (no clicks) for each source
    clicks_pivot = clicks_by_source_detail.pivot(
        index='utm_source',
        columns='is_click',
        values='user_id'
    ).reset_index()
    # Fill NaN values with 0 (for sources that might have only clicks or only non-clicks)
    clicks_pivot.fillna(0, inplace=True) 
    # Ensure boolean columns True and False exist, add them if not (with 0 value)
    if True not in clicks_pivot.columns: clicks_pivot[True] = 0
    if False not in clicks_pivot.columns: clicks_pivot[False] = 0
        
    print(""\nPivoted Clicks Data by UTM Source:"")
    print(clicks_pivot)

    # Calculate percent_clicked for each utm_source
    # Handle cases where a source might have 0 clicks or 0 non-clicks to avoid division by zero if only one category exists
    clicks_pivot['percent_clicked'] = (clicks_pivot[True] / (clicks_pivot[True] + clicks_pivot[False])) * 100
    print(""\nPercent Clicked by UTM Source:"")
    print(clicks_pivot[['utm_source', 'percent_clicked']])
else:
    print(""ad_clicks_df not defined. Please run the data loading step first."")","This section calculates:
1.  Total views from each `utm_source`.
2.  A new boolean column `is_click`.
3.  A pivot table showing click counts (True) and non-click counts (False) for each source.
4.  The click-through rate (`percent_clicked`) for each source."
ab-testing-shoefly-demo,A/B Testing Analysis for ShoeFly.com,Learn how to perform A/B testing analysis using Python and Pandas. This example uses data from ShoeFly.com to compare ad performance.,"A/B testing, data analysis, Python, Pandas, marketing analytics, click-through rate, Shoefly",4,3. Analyzing A/B Test Performance,"Now, we compare the performance of Ad A versus Ad B.",python,Python Code: Comparing Ad A and Ad B,"if 'ad_clicks_df' in locals():
    # Were approximately the same number of people shown both ads?
    experimental_group_counts = ad_clicks_df.groupby('experimental_group')['user_id'].count().reset_index()
    print(""\nViews by Experimental Group (Ad A vs Ad B):"")
    print(experimental_group_counts)

    # Check if a greater percentage of users clicked on Ad A or Ad B
    clicks_by_experiment = ad_clicks_df.groupby(['experimental_group', 'is_click'])['user_id'].count().reset_index()
    
    clicks_by_experiment_pivot = clicks_by_experiment.pivot(
        index='experimental_group',
        columns='is_click',
        values='user_id'
    ).reset_index()
    # Fill NaN and ensure boolean columns
    clicks_by_experiment_pivot.fillna(0, inplace=True)
    if True not in clicks_by_experiment_pivot.columns: clicks_by_experiment_pivot[True] = 0
    if False not in clicks_by_experiment_pivot.columns: clicks_by_experiment_pivot[False] = 0

    print(""\nPivoted Clicks Data by Experimental Group:"")
    print(clicks_by_experiment_pivot)

    clicks_by_experiment_pivot['percent_clicked'] = \
        (clicks_by_experiment_pivot[True] / (clicks_by_experiment_pivot[True] + clicks_by_experiment_pivot[False])) * 100
    print(""\nPercent Clicked by Experimental Group:"")
    print(clicks_by_experiment_pivot[['experimental_group', 'percent_clicked']])

    # Analyzing clicks by day of the week for each ad group
    a_clicks_df = ad_clicks_df[ad_clicks_df['experimental_group'] == 'A']
    b_clicks_df = ad_clicks_df[ad_clicks_df['experimental_group'] == 'B']

    def calculate_ctr_by_day(df, ad_name):
        clicks_by_day_detail = df.groupby(['day', 'is_click'])['user_id'].count().reset_index()
        clicks_by_day_pivot = clicks_by_day_detail.pivot(
            index='day',
            columns='is_click',
            values='user_id'
        ).reset_index()
        clicks_by_day_pivot.fillna(0, inplace=True)
        if True not in clicks_by_day_pivot.columns: clicks_by_day_pivot[True] = 0
        if False not in clicks_by_day_pivot.columns: clicks_by_day_pivot[False] = 0
        
        clicks_by_day_pivot['percent_clicked'] = \
            (clicks_by_day_pivot[True] / (clicks_by_day_pivot[True] + clicks_by_day_pivot[False])) * 100
        print(f""\nPercent Clicked by Day for Ad {ad_name}:"")
        # Order days of the week
        days_order = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
        clicks_by_day_pivot['day'] = pd.Categorical(clicks_by_day_pivot['day'], categories=days_order, ordered=True)
        print(clicks_by_day_pivot.sort_values('day')[['day', 'percent_clicked']])
        return clicks_by_day_pivot

    if not a_clicks_df.empty:
        ctr_a_by_day = calculate_ctr_by_day(a_clicks_df, ""A"")
    else:
        print(""\nNo data for Ad A to analyze by day."")
        
    if not b_clicks_df.empty:
        ctr_b_by_day = calculate_ctr_by_day(b_clicks_df, ""B"")
    else:
        print(""\nNo data for Ad B to analyze by day."")

else:
    print(""ad_clicks_df not defined. Please run the data loading step first."")","This part of the analysis:
1.  Compares the total number of users shown Ad A versus Ad B.
2.  Calculates and compares the overall click-through rates for Ad A and Ad B.
3.  Further breaks down the analysis by calculating the CTR for each ad, for each day of the week. This helps to see if performance fluctuated daily."
ab-testing-shoefly-demo,A/B Testing Analysis for ShoeFly.com,Learn how to perform A/B testing analysis using Python and Pandas. This example uses data from ShoeFly.com to compare ad performance.,"A/B testing, data analysis, Python, Pandas, marketing analytics, click-through rate, Shoefly",5,4. Drawing Conclusions,"Based on the analysis (overall CTR, daily CTR trends for Ad A vs. Ad B, and performance across different `utm_source` platforms), ShoeFly.com can make an informed decision.

* If one ad consistently outperforms the other across platforms and days, it's generally the preferred choice.
* If performance is mixed (e.g., Ad A is better on Facebook, Ad B is better on Google, or performance varies significantly by day), further investigation or more targeted strategies might be needed.
* It's also important to consider statistical significance (not covered in this basic script but crucial in real-world A/B testing) to ensure the observed differences are not due to random chance.

For example, if Ad B has a significantly higher overall click-through rate and performs consistently well throughout the week, ShoeFly.com would likely choose to use Ad B going forward.",,,,
machine-translation-seq2seq-keras,Machine Translation with Seq2Seq Models in Keras,"Learn how to build a Neural Machine Translation (NMT) system using Sequence-to-Sequence (Seq2Seq) models with LSTMs in Keras/TensorFlow. Covers preprocessing, training, and inference.","Machine Translation, NMT, Seq2Seq, LSTM, Keras, TensorFlow, Deep Learning, NLP, Python",1,Understanding Seq2Seq Models,"A Seq2Seq model aims to transform an input sequence into an output sequence. In machine translation, the input is a sentence in a source language, and the output is its translation in a target language. These models typically consist of two main components:

* **Encoder:** Processes the input sequence and compresses its information into a fixed-size context vector (often the final hidden state of an RNN).
* **Decoder:** Takes the context vector from the encoder and generates the output sequence token by token. It's also an RNN that uses its own previous output as input for the next step.

LSTMs (Long Short-Term Memory networks) are commonly used for both the encoder and decoder due to their ability to handle long-range dependencies in sequences.",,,,
machine-translation-seq2seq-keras,Machine Translation with Seq2Seq Models in Keras,"Learn how to build a Neural Machine Translation (NMT) system using Sequence-to-Sequence (Seq2Seq) models with LSTMs in Keras/TensorFlow. Covers preprocessing, training, and inference.","Machine Translation, NMT, Seq2Seq, LSTM, Keras, TensorFlow, Deep Learning, NLP, Python",2,1. Data Preprocessing (`preprocessing.py`),"Before training, the text data needs to be meticulously prepared. This involves reading sentence pairs, tokenizing them, creating vocabularies, and converting them into a numerical format suitable for the neural network.",python,Python Code: Preprocessing Steps,"import numpy as np
import re

# --- Configuration ---
# data_path = ""path/to/your/translation_pairs.txt"" # e.g., ""deu.txt"" for German-English
# For demonstration, we'll assume 'lines' would be populated by reading this file.
# lines = [""Go.\tGeh."", ""Hi.\tHallo."", ""Run!\tLauf!""] # Example lines

# --- Initialization ---
input_docs = []          # To store source language sentences
target_docs = []         # To store target language sentences (with <START>/<END>)
input_tokens = set()     # Vocabulary for source language
target_tokens = set()    # Vocabulary for target language (including <START>/<END>)

# --- Processing Lines (Conceptual - actual file reading omitted for brevity) ---
# Simulating reading a few lines from a file like 'deu.txt'
# where each line is 'english_sentence\tgerman_sentence'
# For the actual script, lines would come from:
# with open(data_path, 'r', encoding='utf-8') as f:
#   lines = f.read().split('\n')

# Example: Process a small number of lines
# sample_lines = [""I am cold.\tMir ist kalt."", ""Help me.\tHilf mir!""]
# for line in sample_lines[:10000]: # Limiting for example
#     parts = line.split('\t')
#     if len(parts) < 2:
#         continue
#     input_doc, target_doc_raw = parts[0], parts[1]
#     input_docs.append(input_doc)
#
#     # Preprocess target_doc: add <START>, <END> tokens
#     # The regex re.findall(r""[\w']+|[^\s\w]"", target_doc_raw) handles words and punctuation separately.
#     target_doc = "" "".join(re.findall(r""[\w']+|[^\s\w]"", target_doc_raw))
#     target_doc = '<START> ' + target_doc + ' <END>'
#     target_docs.append(target_doc)
#
#     # Populate vocabularies
#     for token in re.findall(r""[\w']+|[^\s\w]"", input_doc):
#         if token not in input_tokens:
#             input_tokens.add(token)
#     for token in target_doc.split(): # target_doc is already tokenized by spaces
#         if token not in target_tokens:
#             target_tokens.add(token)

# --- Create Vocabulary Mappings (Assuming input_tokens & target_tokens are populated) ---
# input_tokens = sorted(list(input_tokens))
# target_tokens = sorted(list(target_tokens))
#
# num_encoder_tokens = len(input_tokens)
# num_decoder_tokens = len(target_tokens)
#
# max_encoder_seq_length = max([len(re.findall(r""[\w']+|[^\s\w]"", doc)) for doc in input_docs]) if input_docs else 0
# max_decoder_seq_length = max([len(doc.split()) for doc in target_docs]) if target_docs else 0 # target_docs are space-split
#
# input_features_dict = {token: i for i, token in enumerate(input_tokens)}
# target_features_dict = {token: i for i, token in enumerate(target_tokens)}
#
# reverse_input_features_dict = {i: token for token, i in input_features_dict.items()}
# reverse_target_features_dict = {i: token for token, i in target_features_dict.items()}

# --- Prepare Data for Keras (One-Hot Encoding) ---
# encoder_input_data = np.zeros((len(input_docs), max_encoder_seq_length, num_encoder_tokens), dtype='float32')
# decoder_input_data = np.zeros((len(input_docs), max_decoder_seq_length, num_decoder_tokens), dtype='float32')
# decoder_target_data = np.zeros((len(input_docs), max_decoder_seq_length, num_decoder_tokens), dtype='float32')
#
# for i, (input_doc_text, target_doc_text) in enumerate(zip(input_docs, target_docs)):
#     for t, token in enumerate(re.findall(r""[\w']+|[^\s\w]"", input_doc_text)):
#         if token in input_features_dict: # Check if token exists
#             encoder_input_data[i, t, input_features_dict[token]] = 1.
#
#     for t, token in enumerate(target_doc_text.split()):
#         if token in target_features_dict: # Check if token exists
#             decoder_input_data[i, t, target_features_dict[token]] = 1.
#             if t > 0: # decoder_target_data is ahead of decoder_input_data by one timestep
#                 decoder_target_data[i, t - 1, target_features_dict[token]] = 1.

# print(""Preprocessing conceptual overview complete."")
# print(f""Number of encoder tokens: {num_encoder_tokens if 'num_encoder_tokens' in locals() else 'N/A'}"")
# print(f""Number of decoder tokens: {num_decoder_tokens if 'num_decoder_tokens' in locals() else 'N/A'}"")
# print(f""Max encoder sequence length: {max_encoder_seq_length if 'max_encoder_seq_length' in locals() else 'N/A'}"")
# print(f""Max decoder sequence length: {max_decoder_seq_length if 'max_decoder_seq_length' in locals() else 'N/A'}"")","Key preprocessing steps from `preprocessing.py` include:
1.  Reading sentence pairs (e.g., English source, German target).
2.  Tokenizing sentences into words and punctuation.
3.  Adding special `&lt;START&gt;` and `&lt;END&gt;` tokens to target sentences to signal the beginning and end of translation to the decoder.
4.  Building vocabularies of unique tokens for both source and target languages.
5.  Creating dictionaries to map tokens to integer indices and vice-versa.
6.  Padding sequences to a maximum length.
7.  Creating one-hot encoded numpy arrays for `encoder_input_data`, `decoder_input_data` (teacher forcing input), and `decoder_target_data` (what the model should predict).
The code snippet above is a conceptual representation; the actual script would populate all variables."
machine-translation-seq2seq-keras,Machine Translation with Seq2Seq Models in Keras,"Learn how to build a Neural Machine Translation (NMT) system using Sequence-to-Sequence (Seq2Seq) models with LSTMs in Keras/TensorFlow. Covers preprocessing, training, and inference.","Machine Translation, NMT, Seq2Seq, LSTM, Keras, TensorFlow, Deep Learning, NLP, Python",3,2. Model Architecture and Training (`training_model.py`),"The core of the NMT system is the Seq2Seq model, built using Keras.",python,Python Code: Seq2Seq Model with LSTMs,"# Assuming preprocessing outputs (num_encoder_tokens, num_decoder_tokens, etc.) are available
# from preprocessing import num_encoder_tokens, num_decoder_tokens, encoder_input_data, decoder_input_data, decoder_target_data

import os
# Suppress TensorFlow/Keras INFO/WARNING messages for cleaner output if desired
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' 
# os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0' # May be specific to some environments

import tensorflow as tf
from tensorflow import keras
from keras import layers, models, Input

# --- Model Hyperparameters ---
latent_dim = 256  # Dimensionality of the LSTM hidden state (context vector)
batch_size = 64   # Number of samples per gradient update
epochs = 100      # Number of times to iterate over the entire dataset (adjust based on data size)

# --- Encoder Definition ---
# Takes input sequences of shape (None, num_encoder_tokens)
# 'None' allows for variable-length sequences at input, though data is padded.
# num_encoder_tokens is the size of the one-hot encoded vocabulary for the source language.
# encoder_inputs = Input(shape=(None, num_encoder_tokens))
# encoder_lstm = layers.LSTM(latent_dim, return_state=True) # return_state=True to get hidden and cell states
# encoder_outputs, state_h_enc, state_c_enc = encoder_lstm(encoder_inputs)
# encoder_states = [state_h_enc, state_c_enc] # These states are the context vector

# --- Decoder Definition ---
# Takes input sequences of shape (None, num_decoder_tokens)
# num_decoder_tokens is the size of the one-hot encoded vocabulary for the target language.
# decoder_inputs = Input(shape=(None, num_decoder_tokens))
# decoder_lstm = layers.LSTM(latent_dim, return_sequences=True, return_state=True)
# # The decoder LSTM uses the encoder's final states as its initial state.
# # return_sequences=True because we need output at each timestep for the Dense layer.
# decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states) # We don't need decoder states for training model output
#
# # Dense layer to predict the next token in the target sequence
# # Output shape: (batch_size, timesteps, num_decoder_tokens)
# decoder_dense = layers.Dense(num_decoder_tokens, activation='softmax')
# decoder_outputs = decoder_dense(decoder_outputs)

# --- Build the Training Model ---
# The model maps encoder_input_data & decoder_input_data to decoder_target_data
# training_model = models.Model([encoder_inputs, decoder_inputs], decoder_outputs)

# --- Compile the Model ---
# training_model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

# --- Display Model Summary ---
# print(""Training Model Summary:"")
# training_model.summary()

# --- Train the Model (Conceptual - requires actual data from preprocessing) ---
# print(""\nStarting model training (this can take a while)..."")
# history = training_model.fit([encoder_input_data, decoder_input_data], decoder_target_data,
#                              batch_size=batch_size,
#                              epochs=epochs,
#                              validation_split=0.2) # Use part of data for validation
# print(""Model training complete."")

# --- Save the Trained Model ---
# model_save_path = 'training_model.keras'
# training_model.save(model_save_path)
# print(f""Trained model saved to {model_save_path}"")

# Note: The actual execution of this code requires the output variables from preprocessing.py
# (like num_encoder_tokens, encoder_input_data, etc.) to be defined and populated.
# For a runnable example, these would be passed or imported.
print(""Model training script conceptual overview complete."")","The `training_model.py` script defines and trains the Seq2Seq model:
1.  **Encoder:** An LSTM layer processes the input sequence and outputs its final hidden state and cell state. These states serve as the ""context vector"" summarizing the input.
2.  **Decoder:** Another LSTM layer is initialized with the encoder's states. It takes the target sequence (shifted by one timestep, with a `&lt;START&gt;` token) as input (this is known as ""teacher forcing"" during training). It aims to predict the next token in the target sequence at each timestep.
3.  A Dense layer with softmax activation is applied to the decoder's LSTM output to get probability distributions over the target vocabulary.
4.  The model is compiled with an optimizer (e.g., RMSprop) and a loss function (categorical crossentropy for multi-class classification).
5.  The model is trained using `fit()` on the prepared one-hot encoded data.
6.  Finally, the trained model is saved for later use in inference."
machine-translation-seq2seq-keras,Machine Translation with Seq2Seq Models in Keras,"Learn how to build a Neural Machine Translation (NMT) system using Sequence-to-Sequence (Seq2Seq) models with LSTMs in Keras/TensorFlow. Covers preprocessing, training, and inference.","Machine Translation, NMT, Seq2Seq, LSTM, Keras, TensorFlow, Deep Learning, NLP, Python",4,3. Inference and Translation (`test_function.py`),"Once the model is trained, it can be used to translate new sentences. The inference process is slightly different from training because the target sequence is not known beforehand and must be generated token by token.",python,Python Code: Decoding Sequences for Translation,"# Assuming preprocessing outputs and trained model components are available
# from preprocessing import input_features_dict, target_features_dict, reverse_target_features_dict, max_decoder_seq_length, num_decoder_tokens, encoder_input_data, input_docs
# from training_model import latent_dim # Assuming latent_dim is consistent

import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras import models, layers, Input

# --- Load Trained Model and Define Inference Models (Conceptual) ---
# model_path = 'training_model.keras'
# try:
#     training_model_loaded = models.load_model(model_path)
# except Exception as e:
#     print(f""Error loading model: {e}. Ensure 'training_model.keras' exists and preprocessing/training variables are loaded."")
#     # Fallback for demonstration if model loading fails
#     # This part would need to be more robust or assume model is passed if not loadable
#     training_model_loaded = None 

# if training_model_loaded:
#     # --- Encoder Inference Model ---
#     # Extracts the encoder part from the trained model.
#     # Input: Source language sentence (one-hot encoded).
#     # Output: Encoder's hidden and cell states (context vector).
#     encoder_inputs_inf = training_model_loaded.input[0]  # Input_1 (encoder input)
#     # Assuming LSTM layer is at index 2 (can vary, inspect model.summary())
#     # This might need adjustment based on the exact model structure saved.
#     # A more robust way is to get layers by name if names were assigned during model creation.
#     encoder_outputs_inf, state_h_enc_inf, state_c_enc_inf = training_model_loaded.layers[2].output # Encoder LSTM output
#     encoder_states_inf = [state_h_enc_inf, state_c_enc_inf]
#     encoder_model_inf = models.Model(encoder_inputs_inf, encoder_states_inf)

#     # --- Decoder Inference Model ---
#     # Input: Current target token (one-hot) and previous decoder states.
#     # Output: Probability distribution for the next target token and new decoder states.
#     decoder_inputs_inf = training_model_loaded.input[1] # Input_2 (decoder input, but only shape matters here)
#     decoder_state_input_h = Input(shape=(latent_dim,), name='decoder_state_h_input')
#     decoder_state_input_c = Input(shape=(latent_dim,), name='decoder_state_c_input')
#     decoder_states_inputs_inf = [decoder_state_input_h, decoder_state_input_c]

#     # Assuming decoder LSTM is layer 3 and Dense is layer 4
#     decoder_lstm_inf = training_model_loaded.layers[3] # Decoder LSTM
#     decoder_outputs_inf, state_h_dec_inf, state_c_dec_inf = decoder_lstm_inf(
#         decoder_inputs_inf, initial_state=decoder_states_inputs_inf
#     )
#     decoder_states_inf = [state_h_dec_inf, state_c_dec_inf]
#     decoder_dense_inf = training_model_loaded.layers[4] # Decoder Dense
#     decoder_outputs_inf = decoder_dense_inf(decoder_outputs_inf)
#
#     decoder_model_inf = models.Model(
#         [decoder_inputs_inf] + decoder_states_inputs_inf,
#         [decoder_outputs_inf] + decoder_states_inf
#     )
# else:
#    print(""Skipping inference model setup as training model failed to load."")


# --- Decode Sequence Function (Conceptual - requires models and dictionaries) ---
# def decode_sequence(test_input_seq, encoder_model, decoder_model, num_decoder_tokens_val, target_features_dict_val, reverse_target_features_dict_val, max_decoder_seq_length_val):
#     # Encode the input to get initial decoder states
#     states_value = encoder_model.predict(test_input_seq, verbose=0)

#     # Start with the <START> token
#     target_seq = np.zeros((1, 1, num_decoder_tokens_val))
#     target_seq[0, 0, target_features_dict_val['<START>']] = 1.

#     decoded_sentence = []
#     stop_condition = False

#     while not stop_condition:
#         output_tokens, h, c = decoder_model.predict([target_seq] + states_value, verbose=0)

#         # Get the most likely token
#         sampled_token_index = np.argmax(output_tokens[0, -1, :])
#         sampled_token = reverse_target_features_dict_val.get(sampled_token_index, '<UNK>') # Handle unknown tokens

#         if sampled_token == '<END>' or len(decoded_sentence) > max_decoder_seq_length_val -1: # -1 for <START>
#             stop_condition = True
#         else:
#             decoded_sentence.append(sampled_token)

#         # Update the target sequence for the next step
#         target_seq = np.zeros((1, 1, num_decoder_tokens_val))
#         target_seq[0, 0, sampled_token_index] = 1.
#         states_value = [h, c] # Update states

#     return "" "".join(decoded_sentence)

# --- Example Usage (Conceptual) ---
# if training_model_loaded and 'encoder_input_data' in locals() and encoder_input_data is not None and len(encoder_input_data) > 0:
#     print(""\nTesting translation on a few samples:"")
#     for i in range(min(5, len(input_docs))): # Translate first 5 samples
#         test_input = encoder_input_data[i:i+1]
#         # Ensure all necessary dicts and params are passed to decode_sequence
#         # decoded_translation = decode_sequence(test_input, encoder_model_inf, decoder_model_inf, num_decoder_tokens, target_features_dict, reverse_target_features_dict, max_decoder_seq_length)
#         # print(f""Input: {input_docs[i]}"")
#         # print(f""Translated: {decoded_translation}"")
#         # print(""- * 20)",
# else:,,,,,,,,,,
#     print(""Cannot run inference example due to missing model or data.""),,,,,,,,,,
print(""Inference script conceptual overview complete."")","The `test_function.py` script handles the translation of new sentences:
1.  **Load Model:** The pre-trained Seq2Seq model is loaded.
2.  **Inference Models:** The training model is typically split into two separate models for inference:
    * An *encoder model* that takes an input sentence and returns the context states (`encoder_states`).
    * A *decoder model* that takes the initial target token (`&lt;START&gt;`) and the encoder's context states, and predicts the next token. It also returns its updated states.
3.  **Decoding Loop (`decode_sequence` function):**
    * The input sentence is encoded using the encoder model to get the initial context states for the decoder.
    * A target sequence is initialized with the `&lt;START&gt;` token.
    * In a loop:
        * The decoder model predicts the next token based on the current target sequence and its current states.
        * The token with the highest probability is chosen (greedy decoding).
        * The chosen token is appended to the decoded sentence.
        * If the token is `&lt;END&gt;` or the maximum sequence length is reached, the loop stops.
        * The chosen token becomes the input for the next decoding step, and the decoder's states are updated.
4.  The function returns the fully translated sentence.",,,,,,,,,
machine-translation-seq2seq-keras,Machine Translation with Seq2Seq Models in Keras,"Learn how to build a Neural Machine Translation (NMT) system using Sequence-to-Sequence (Seq2Seq) models with LSTMs in Keras/TensorFlow. Covers preprocessing, training, and inference.","Machine Translation, NMT, Seq2Seq, LSTM, Keras, TensorFlow, Deep Learning, NLP, Python",5,4. Conclusion and Next Steps,"This walkthrough demonstrates the fundamental components of a Neural Machine Translation system using a Seq2Seq model with LSTMs in Keras. While this provides a solid foundation, several improvements and extensions can be made:

* **Attention Mechanism:** A key enhancement that allows the decoder to selectively focus on different parts of the input sequence when generating each output token, significantly improving performance, especially for long sentences.
* **Bidirectional LSTMs:** Using bidirectional LSTMs in the encoder can provide a richer representation of the input sequence by processing it in both forward and backward directions.
* **Larger Datasets and More Epochs:** Training on more data for longer periods (with appropriate regularization) generally leads to better models.
* **Beam Search Decoding:** Instead of greedy decoding (picking the most probable token at each step), beam search explores multiple hypotheses and often yields better translation quality.
* **Subword Tokenization:** Techniques like Byte Pair Encoding (BPE) or SentencePiece can handle rare words and reduce vocabulary size.
* **Evaluation Metrics:** Using metrics like BLEU score to quantitatively evaluate translation quality.

Building robust NMT systems is an iterative process involving careful data preparation, model design, training, and evaluation.",,,,
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",1,Introduction,"Predicting EV charging loads is crucial for managing energy grids and developing charging infrastructure. This demo illustrates a simplified machine learning workflow to predict the energy consumed (El_kWh) during a charging session.

We will cover:
* Generating and inspecting dummy data representing EV charging sessions and local traffic.
* Merging and preparing the data for modeling.
* Training a simple Linear Regression model as a baseline.
* Building, training, and evaluating a Neural Network using PyTorch.

**Goal:** To demonstrate the end-to-end process of building a predictive model for EV charging loads using dummy data for clarity and ease of execution.

**Note:** This demo uses highly simplified dummy data and a basic model architecture. Real-world applications would require much larger, more complex datasets and potentially more sophisticated modeling techniques.",,,,
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",2,Setup: Libraries and Dummy Data,"First, ensure you have the necessary Python libraries installed. If not, you can install them using pip:
```
pip install numpy pandas scikit-learn torch
```
The following Python code will import these libraries and generate dummy datasets for our EV charging reports and traffic information.

**Run this Setup:** If you were running this locally, you'd execute the script above. For this demo page, we'll assume these DataFrames are now in memory for subsequent steps.",python,Python Code: Initial Setup & Dummy Data Generation,"# ev_load_prediction_setup.py
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import torch
from torch import nn
from torch import optim

# --- Generate Dummy EV Charging Data ---
ev_data = {
    'session_ID': range(1, 101),
    'Garage_ID': ['G1'] * 50 + ['G2'] * 50,
    'User_ID': [f'User{i}' for i in range(1, 101)],
    'User_private': np.random.choice([0.0, 1.0], 100),
    'Start_plugin_hour': pd.to_datetime(['2023-01-01 10:00', '2023-01-01 11:00', '2023-01-01 12:00'] * 33 + ['2023-01-01 10:00']),
    'El_kWh': np.random.uniform(0.5, 50, 100).round(2), # Target variable
    'Duration_hours': np.random.uniform(0.1, 10, 100).round(2),
    # Simplified month and weekday features (binary)
    'month_plugin_Jan': [1.0] * 100, # All January
    'month_plugin_Dec': [0.0] * 100,
    'weekdays_plugin_Monday': np.random.choice([0.0, 1.0], 100),
    'weekdays_plugin_Tuesday': np.random.choice([0.0, 1.0], 100)
}
ev_charging_reports_df = pd.DataFrame(ev_data)
# Ensure Start_plugin_hour is just the string representation for merging later
ev_charging_reports_df['Start_plugin_hour_str'] = ev_charging_reports_df['Start_plugin_hour'].dt.strftime('%d.%m.%Y %H:%M')


# --- Generate Dummy Traffic Data ---
traffic_data = {
    'Date_from': pd.to_datetime(['2023-01-01 10:00', '2023-01-01 11:00', '2023-01-01 12:00', '2023-01-01 13:00']).strftime('%d.%m.%Y %H:%M'),
    'Kroppan_bru_traffic': np.random.randint(500, 4000, 4),
    'Moholtlia_traffic': np.random.randint(100, 2000, 4),
    'Selsbakk_traffic': np.random.randint(50, 1000, 4)
}
traffic_reports_df = pd.DataFrame(traffic_data)

print(""--- Dummy Data Generated ---"")
print(""\\nEV Charging Reports (First 5 rows):"")
print(ev_charging_reports_df.head())
print(""\\nTraffic Reports (First 5 rows):"")
print(traffic_reports_df.head())","Expected Output (example, values will vary due to randomness):
```
--- Dummy Data Generated ---

EV Charging Reports (First 5 rows):
   session_ID Garage_ID User_ID  User_private Start_plugin_hour  El_kWh  Duration_hours  month_plugin_Jan  month_plugin_Dec  weekdays_plugin_Monday  weekdays_plugin_Tuesday Start_plugin_hour_str
0           1        G1   User1           0.0       2023-01-01 10:00:00   23.74            1.87               1.0               0.0                     0.0                      1.0    01.01.2023 10:00
1           2        G1   User2           1.0       2023-01-01 11:00:00   12.56            8.32               1.0               0.0                     1.0                      0.0    01.01.2023 11:00
2           3        G1   User3           0.0       2023-01-01 12:00:00   45.01            3.15               1.0               0.0                     0.0                      1.0    01.01.2023 12:00
3           4        G1   User4           1.0       2023-01-01 10:00:00    8.88            5.99               1.0               0.0                     1.0                      0.0    01.01.2023 10:00
4           5        G1   User5           0.0       2023-01-01 11:00:00   33.12            0.55               1.0               0.0                     0.0                      1.0    01.01.2023 11:00

Traffic Reports (First 5 rows):
          Date_from  Kroppan_bru_traffic  Moholtlia_traffic  Selsbakk_traffic
0  01.01.2023 10:00                 1850                750               300
1  01.01.2023 11:00                 2200                900               450
2  01.01.2023 12:00                 2500               1100               500
3  01.01.2023 13:00                 1500                600               250
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",3,Step 1: Data Merging and Preparation,"We merge the EV charging data with traffic data based on the hour. Then, we select relevant features and ensure they are in the correct numerical format.",python,Python Code: Merging and Cleaning,"# ev_load_prediction_dataprep.py
# (Assumes ev_charging_reports_df and traffic_reports_df are loaded from the previous step)

# --- Merge Datasets ---
ev_charging_traffic_df = pd.merge(
    ev_charging_reports_df,
    traffic_reports_df,
    left_on='Start_plugin_hour_str', # Use the string version for merging
    right_on='Date_from',
    how='left' # Use left merge to keep all charging sessions
)
print(""--- Data Merged ---"")
print(""Merged Data (First 5 rows):"")
print(ev_charging_traffic_df.head())
print(f""Shape of merged data: {ev_charging_traffic_df.shape}"")

# --- Select Features and Target ---
# For simplicity, we'll use a subset of features that are already somewhat numeric or binary.
# In a real scenario, 'Garage_ID', 'User_ID' might be encoded or dropped.
# 'Start_plugin_hour' would be broken into hour, day of week, etc. if not already done.
# The dummy data already has some binary month/weekday features.

# Columns to keep for modeling (simplified for demo)
# We will predict 'El_kWh'
target_column = 'El_kWh'
feature_columns = [
    'User_private', 
    'Duration_hours', 
    'month_plugin_Jan', 
    'month_plugin_Dec',
    'weekdays_plugin_Monday',
    'weekdays_plugin_Tuesday',
    'Kroppan_bru_traffic', # From merged traffic data
    'Moholtlia_traffic',   # From merged traffic data
    'Selsbakk_traffic'     # From merged traffic data
]

# Keep only selected features and the target
model_df = ev_charging_traffic_df[feature_columns + [target_column]].copy()

# --- Handle Missing Values (if any from merge) ---
# For traffic data, if a charging hour didn't match a traffic report hour, it would be NaN.
# We'll fill with a simple strategy (e.g., median or mean of the column, or 0 if appropriate)
for col in ['Kroppan_bru_traffic', 'Moholtlia_traffic', 'Selsbakk_traffic']:
    model_df[col].fillna(model_df[col].median(), inplace=True)

print(""\\n--- Data Cleaned and Features Selected ---"")
print(""Shape of model_df before dropping NaNs in target:"", model_df.shape)
print(f""Missing values before dropping NaNs in target:\\n{model_df.isnull().sum()}"")

# Drop rows where the target ('El_kWh') is NaN (should not happen with dummy data generation)
model_df.dropna(subset=[target_column], inplace=True)

print(""\\nFinal DataFrame for Modeling (First 5 rows):"")
print(model_df.head())
print(f""Shape of final model_df: {model_df.shape}"")
print(f""Missing values in final model_df:\\n{model_df.isnull().sum()}"")","Expected Output (example):
```
--- Data Merged ---
Merged Data (First 5 rows):
   session_ID Garage_ID User_ID  User_private Start_plugin_hour  El_kWh  ...  weekdays_plugin_Tuesday Start_plugin_hour_str         Date_from  Kroppan_bru_traffic  Moholtlia_traffic  Selsbakk_traffic
0           1        G1   User1           0.0       2023-01-01 10:00:00   23.74  ...                      1.0    01.01.2023 10:00  01.01.2023 10:00               1850.0              750.0             300.0
1           2        G1   User2           1.0       2023-01-01 11:00:00   12.56  ...                      0.0    01.01.2023 11:00  01.01.2023 11:00               2200.0              900.0             450.0
2           3        G1   User3           0.0       2023-01-01 12:00:00   45.01  ...                      1.0    01.01.2023 12:00  01.01.2023 12:00               2500.0             1100.0             500.0
3           4        G1   User4           1.0       2023-01-01 10:00:00    8.88  ...                      0.0    01.01.2023 10:00  01.01.2023 10:00               1850.0              750.0             300.0
4           5        G1   User5           0.0       2023-01-01 11:00:00   33.12  ...                      1.0    01.01.2023 11:00  01.01.2023 11:00               2200.0              900.0             450.0

Shape of merged data: (100, 15)

--- Data Cleaned and Features Selected ---
Shape of model_df before dropping NaNs in target: (100, 10)
Missing values before dropping NaNs in target:
User_private              0
Duration_hours            0
month_plugin_Jan          0
month_plugin_Dec          0
weekdays_plugin_Monday    0
weekdays_plugin_Tuesday   0
Kroppan_bru_traffic       0 
Moholtlia_traffic         0
Selsbakk_traffic          0
El_kWh                    0
dtype: int64

Final DataFrame for Modeling (First 5 rows):
   User_private  Duration_hours  month_plugin_Jan  month_plugin_Dec  weekdays_plugin_Monday  weekdays_plugin_Tuesday  Kroppan_bru_traffic  Moholtlia_traffic  Selsbakk_traffic  El_kWh
0           0.0            1.87               1.0               0.0                     0.0                      1.0               1850.0              750.0             300.0   23.74
1           1.0            8.32               1.0               0.0                     1.0                      0.0               2200.0              900.0             450.0   12.56
2           0.0            3.15               1.0               0.0                     0.0                      1.0               2500.0             1100.0             500.0   45.01
3           1.0            5.99               1.0               0.0                     1.0                      0.0               1850.0              750.0             300.0    8.88
4           0.0            0.55               1.0               0.0                     0.0                      1.0               2200.0              900.0             450.0   33.12
Shape of final model_df: (100, 10)
Missing values in final model_df:
User_private              0
Duration_hours            0
month_plugin_Jan          0
month_plugin_Dec          0
weekdays_plugin_Monday    0
weekdays_plugin_Tuesday   0
Kroppan_bru_traffic       0
Moholtlia_traffic         0
Selsbakk_traffic          0
El_kWh                    0
dtype: int64
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",4,Step 2: Train-Test Split,"We split our prepared data into training and testing sets. The model will learn from the training set, and its performance will be evaluated on the unseen testing set.",python,Python Code: Splitting Data,"# ev_load_prediction_split.py
# (Assumes model_df is prepared from the previous step)

X = model_df[feature_columns] # Features
y = model_df[target_column]   # Target

X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    train_size=0.80, # 80% for training
    test_size=0.20,  # 20% for testing
    random_state=42  # For reproducibility
)

print(""--- Data Split into Training and Testing Sets ---"")
print(f""Shape of X_train: {X_train.shape}"")
print(f""Shape of X_test: {X_test.shape}"")
print(f""Shape of y_train: {y_train.shape}"")
print(f""Shape of y_test: {y_test.shape}"")","Expected Output:
```
--- Data Split into Training and Testing Sets ---
Shape of X_train: (80, 9)
Shape of X_test: (20, 9)
Shape of y_train: (80,)
Shape of y_test: (20,)
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",5,Step 3: Linear Regression Baseline,"Before building a neural network, it's good practice to establish a baseline with a simpler model like Linear Regression.

The Mean Squared Error (MSE) and Root Mean Squared Error (RMSE) give us an idea of how far off our baseline model's predictions are on average.",python,Python Code: Training and Evaluating Linear Regression,"# ev_load_prediction_linreg.py
# (Assumes X_train, X_test, y_train, y_test are available)

linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

linear_test_predictions = linear_model.predict(X_test)
linear_test_mse = mean_squared_error(y_test, linear_test_predictions)

print(""--- Linear Regression Baseline ---"")
print(f""Linear Regression - Test Set MSE: {linear_test_mse:.4f}"")
print(f""Linear Regression - Test Set RMSE: {np.sqrt(linear_test_mse):.4f}"")","Expected Output (MSE/RMSE will vary due to dummy data):
```
--- Linear Regression Baseline ---
Linear Regression - Test Set MSE: 245.1234 
Linear Regression - Test Set RMSE: 15.6564 
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",6,Step 4: Neural Network with PyTorch,"Now, we'll build, train, and evaluate a simple feedforward neural network using PyTorch.",,,,
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",6.1,4.1 Convert Data to PyTorch Tensors,,python,4.1 Convert Data to PyTorch Tensors,"# ev_load_prediction_pytorch_tensors.py
# (Assumes X_train, X_test, y_train, y_test are pandas DataFrames/Series)

# Convert training set
X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)

# Convert testing set
X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)

print(""--- Data Converted to PyTorch Tensors ---"")
print(f""X_train_tensor shape: {X_train_tensor.shape}"")
print(f""y_train_tensor shape: {y_train_tensor.shape}"")
print(f""X_test_tensor shape: {X_test_tensor.shape}"")
print(f""y_test_tensor shape: {y_test_tensor.shape}"")","Expected Output:
```
--- Data Converted to PyTorch Tensors ---
X_train_tensor shape: torch.Size([80, 9])
y_train_tensor shape: torch.Size([80, 1])
X_test_tensor shape: torch.Size([20, 9])
y_test_tensor shape: torch.Size([20, 1])
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",6.2,4.2 Define the Neural Network Architecture,,python,4.2 Define the Neural Network Architecture,"# ev_load_prediction_pytorch_modeldef.py

# Set a random seed for reproducibility
torch.manual_seed(42)

# Define the model architecture
# Input features = X_train_tensor.shape[1] (number of columns in X_train)
input_features = X_train_tensor.shape[1] 
hidden_units_1 = 56 # Number of neurons in first hidden layer
hidden_units_2 = 26 # Number of neurons in second hidden layer
output_units = 1    # For regression, one output neuron

nn_model = nn.Sequential(
    nn.Linear(in_features=input_features, out_features=hidden_units_1),
    nn.ReLU(),
    nn.Linear(in_features=hidden_units_1, out_features=hidden_units_2),
    nn.ReLU(),
    nn.Linear(in_features=hidden_units_2, out_features=output_units)
)

print(""--- PyTorch Neural Network Model Defined ---"")
print(nn_model)","Expected Output:
```
--- PyTorch Neural Network Model Defined ---
Sequential(
  (0): Linear(in_features=9, out_features=56, bias=True)
  (1): ReLU()
  (2): Linear(in_features=56, out_features=26, bias=True)
  (3): ReLU()
  (4): Linear(in_features=26, out_features=1, bias=True)
)
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",6.3,4.3 Define Loss Function and Optimizer,,python,4.3 Define Loss Function and Optimizer,"# ev_load_prediction_pytorch_lossopt.py
# (Assumes nn_model is defined)

loss_function = nn.MSELoss()  # Mean Squared Error for regression
optimizer = optim.Adam(nn_model.parameters(), lr=0.001) # Adam optimizer

print(""--- Loss Function and Optimizer Defined ---"")
print(f""Loss Function: {loss_function}"")
print(f""Optimizer: Adam (lr=0.001)"")","Expected Output:
```
--- Loss Function and Optimizer Defined ---
Loss Function: MSELoss()
Optimizer: Adam (lr=0.001)
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",6.4,4.4 Training the Neural Network,,python,4.4 Training the Neural Network,"# ev_load_prediction_pytorch_train.py
# (Assumes nn_model, loss_function, optimizer, X_train_tensor, y_train_tensor are defined)

num_epochs = 100 # Reduced for quick demo

print(""--- Starting Neural Network Training ---"")
for epoch in range(num_epochs):
    nn_model.train() # Set model to training mode

    # Forward pass
    y_pred_tensor = nn_model(X_train_tensor)

    # Calculate loss
    loss = loss_function(y_pred_tensor, y_train_tensor)

    # Zero gradients
    optimizer.zero_grad()

    # Backward pass (compute gradients)
    loss.backward()

    # Update weights
    optimizer.step()

    if (epoch + 1) % 20 == 0: # Print loss every 20 epochs
        print(f'Epoch [{epoch + 1}/{num_epochs}], Training MSE Loss: {loss.item():.4f}')
print(""--- Neural Network Training Complete ---"")","Expected Output (loss values will vary):
```
--- Starting Neural Network Training ---
Epoch [20/100], Training MSE Loss: 580.1234
Epoch [40/100], Training MSE Loss: 350.5678
Epoch [60/100], Training MSE Loss: 280.9012
Epoch [80/100], Training MSE Loss: 260.3456
Epoch [100/100], Training MSE Loss: 250.7890
--- Neural Network Training Complete ---
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",6.5,4.5 Evaluating the Neural Network,,python,4.5 Evaluating the Neural Network,"# ev_load_prediction_pytorch_eval.py
# (Assumes nn_model, loss_function, X_test_tensor, y_test_tensor are defined)

nn_model.eval() # Set model to evaluation mode
with torch.no_grad(): # Disable gradient calculations for inference
    test_predictions_tensor = nn_model(X_test_tensor)
    nn_test_loss = loss_function(test_predictions_tensor, y_test_tensor)

nn_test_mse = nn_test_loss.item()

print(""--- Neural Network Evaluation ---"")
print(f""Neural Network - Test Set MSE: {nn_test_mse:.4f}"")
print(f""Neural Network - Test Set RMSE: {np.sqrt(nn_test_mse):.4f}"")","Expected Output (MSE/RMSE will vary):
```
--- Neural Network Evaluation ---
Neural Network - Test Set MSE: 230.4567 
Neural Network - Test Set RMSE: 15.1808
```"
ev-charging-load-prediction-pytorch,Predicting EV Charging Loads with PyTorch,"A step-by-step guide to predicting electric vehicle charging loads using Python, Pandas, Scikit-learn, and a PyTorch Neural Network with dummy data.","EV Charging, Load Prediction, PyTorch, Neural Network, Machine Learning, Python, Pandas, Scikit-learn, Demo",7,Conclusion,"This demo walked through a simplified process of predicting EV charging loads. We started with dummy data, prepared it, established a linear regression baseline, and then trained a basic neural network with PyTorch.

**Key Takeaways:**
* Data preparation (cleaning, feature selection, transformation) is a critical first step.
* Baseline models like Linear Regression provide a reference point for evaluating more complex models.
* Neural Networks can capture non-linear relationships in data but require careful tuning of architecture and hyperparameters.
* With the dummy data and minimal training, the neural network might not significantly outperform the linear regression, or could even perform worse if not well-tuned. In real scenarios with complex data, NNs often show advantages.

**Further Exploration:**
* Experiment with different neural network architectures (more layers, different numbers of neurons, other activation functions).
* Tune hyperparameters like learning rate and number of epochs.
* Implement more sophisticated feature engineering.
* Use real-world datasets for more meaningful results.
* Explore techniques for handling time-series aspects of charging data.",,,,
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",1,"Introduction to Theme Switching","This interactive demo showcases how different visual themes (Playful, Dark, Professional) can be dynamically applied to a webpage. Clicking the theme buttons will change the appearance of the content blocks below, illustrating the adaptability of components to various styling rules. This is achieved by manipulating CSS classes or variables via JavaScript.","","","",""
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",2,"Theme Control Buttons","The primary interaction point for this demo are the theme buttons. Each button is styled and has an ID that JavaScript uses to identify which theme to apply.","html","Theme Control Buttons (HTML Structure)","""<div class=""flex flex-wrap justify-center gap-3 mb-10"">
    <button id=""playful-theme-btn""
            class=""px-5 py-2 bg-sky-500 text-white font-semibold rounded-lg shadow-md hover:bg-sky-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-400 transition duration-200"">
        Playful Theme
    </button>
    <button id=""dark-theme-btn""
            class=""px-5 py-2 bg-slate-700 text-white font-semibold rounded-lg shadow-md hover:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500 transition duration-200"">
        Dark Theme
    </button>
    <button id=""professional-theme-btn""
            class=""px-5 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-400 transition duration-200"">
        Professional Theme
    </button>
</div>""","These buttons trigger JavaScript functions that apply the corresponding theme styles to the page elements within the 'theme-block' container."
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",3,"Themed Content Area: Introduction Block","This is an example of a content block that adapts its styling based on the selected theme. It includes a heading, paragraph text, and a call-to-action button.","html","HTML Structure: Introduction Block","""<div id=""intro-block"" class=""p-6 rounded-lg shadow-sm border-l-4"">
    <h2 id=""intro-heading"" class=""text-xl font-semibold mb-3"">Welcome to the Demo</h2>
    <p id=""intro-text"" class=""mb-4 leading-relaxed"">
        This demo illustrates how different sections of a page can adapt to various visual themes...
    </p>
    <button id=""intro-button"" class=""px-4 py-2 text-sm font-medium rounded-md shadow transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2"">
        Learn More
    </button>
</div>""","The `intro-block` and its child elements (heading, text, button) will have their appearance (background color, text color, border color, button style) updated by the JavaScript when a theme is changed."
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",4,"Themed Content Area: Project Card","This card component, typically used to showcase projects, also changes its appearance with the theme. It includes an image, title, description, skill tags, and a link.","html","HTML Structure: Project Card","""<div id=""project-card"" class=""rounded-lg shadow-md overflow-hidden flex flex-col"">
     <img id=""project-image"" src="""" alt=""Project Placeholder Image"" class=""card-image""
          onerror=""this.onerror=null; this.src='https://placehold.co/600x400/cccccc/ffffff?text=Error';"">
     <div id=""project-content"" class=""p-6 flex flex-col flex-grow border-t"">
         <h3 id=""project-heading"" class=""text-lg font-semibold mb-2"">Featured Project: AI Analyzer</h3>
         <p id=""project-text"" class=""text-sm mb-4 flex-grow"">
             An application leveraging machine learning to analyze sentiment in user reviews...
         </p>
         <div class=""mt-auto flex justify-between items-center"">
             <span id=""project-skills"" class=""text-xs font-medium space-x-1"">
                 <span class=""skill-tag inline-block px-2 py-0.5 rounded-full"">Python</span>
                 <span class=""skill-tag inline-block px-2 py-0.5 rounded-full"">AI</span>
                 <span class=""skill-tag inline-block px-2 py-0.5 rounded-full"">NLP</span>
             </span>
             <a id=""project-link"" href=""#"" class=""text-sm font-medium hover:underline focus:outline-none focus:ring-1 rounded px-1"">
                 View Project &rarr;
             </a>
         </div>
     </div>
</div>""","The card's background, text colors, image border (if any), skill tag styling, and link color are all subject to change based on the active theme."
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",5,"Themed Content Area: Interactive Demo Card","This card represents a placeholder for an interactive element. Its visual styling is also controlled by the selected theme.","html","HTML Structure: Interactive Demo Card","""<div id=""demo-card"" class=""rounded-lg shadow-md overflow-hidden flex flex-col"">
     <div id=""demo-interactive-area"" class=""h-40 flex items-center justify-center"">
         <span id=""demo-placeholder-text"" class=""text-lg font-medium italic"">Interactive Area</span>
     </div>
     <div id=""demo-content"" class=""p-6 flex flex-col flex-grow border-t"">
         <h3 id=""demo-heading"" class=""text-lg font-semibold mb-2"">Interactive Demo: Color Picker</h3>
         <p id=""demo-text"" class=""text-sm mb-4 flex-grow"">
             Try out this simple interactive component...
         </p>
         <div class=""mt-auto text-right"">
             <a id=""demo-link"" href=""#"" class=""text-sm font-medium hover:underline focus:outline-none focus:ring-1 rounded px-1"">
                 Try Demo &rarr;
             </a>
         </div>
     </div>
</div>""","The background of the interactive area, text colors, and link styling within this card will change accordings to the theme."
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",6,"Themed Content Area: Features Block","A simple block listing key features, which also adapts its styling to the current theme.","html","HTML Structure: Features Block","""<div id=""features-block"" class=""p-6 rounded-lg shadow-sm border-l-4"">
    <h2 id=""features-heading"" class=""text-xl font-semibold mb-3"">Key Features</h2>
    <ul id=""features-list"" class=""list-disc list-inside space-y-1 text-sm leading-relaxed"">
        <li>Dynamic theme switching affecting multiple components.</li>
        <li>Clear visual distinction between themes.</li>
        <li>Utilizes Tailwind CSS for utility-first styling.</li>
        <li>Demonstrates adaptability for portfolio elements.</li>
    </ul>
</div>""","The border, background, and text colors of this features list will be updated when a new theme is applied."
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",7,"Core JavaScript Logic for Theme Switching","The actual theme switching is managed by a JavaScript file (e.g., `colour_theme.js`). This script listens for clicks on the theme buttons and then applies the corresponding styles to the various page elements. This usually involves adding/removing CSS classes or directly setting CSS custom properties.","javascript","Conceptual Theme Switching JavaScript (from colour_theme.js)","""// Conceptual JavaScript for theme switching (actual implementation may vary)
document.addEventListener('DOMContentLoaded', () => {
    const themeBlock = document.getElementById('theme-block');
    const elementsToTheme = {
        introBlock: document.getElementById('intro-block'),
        introHeading: document.getElementById('intro-heading'),
        introText: document.getElementById('intro-text'),
        introButton: document.getElementById('intro-button'),
        projectCard: document.getElementById('project-card'),
        projectImage: document.getElementById('project-image'), // For border/filter
        projectHeading: document.getElementById('project-heading'),
        projectText: document.getElementById('project-text'),
        projectSkills: Array.from(document.querySelectorAll('#project-skills .skill-tag')),
        projectLink: document.getElementById('project-link'),
        demoCard: document.getElementById('demo-card'),
        demoInteractiveArea: document.getElementById('demo-interactive-area'),
        demoHeading: document.getElementById('demo-heading'),
        demoText: document.getElementById('demo-text'),
        demoLink: document.getElementById('demo-link'),
        featuresBlock: document.getElementById('features-block'),
        featuresHeading: document.getElementById('features-heading'),
        featuresList: document.getElementById('features-list'),
        // Add more elements as needed
    };

    const themes = {
        playful: {
            blockBg: 'bg-sky-100', textColor: 'text-sky-800', borderColor: 'border-sky-500',
            buttonBg: 'bg-sky-500', buttonHoverBg: 'hover:bg-sky-600', buttonRing: 'focus:ring-sky-400', buttonText: 'text-white',
            cardBg: 'bg-white', cardBorder: 'border-sky-300', cardImage: 'https://placehold.co/600x400/38bdf8/FFFFFF?text=Playful+Project',
            skillTagBg: 'bg-sky-200', skillTagText: 'text-sky-700',
            interactiveBg: 'bg-sky-200', interactiveText: 'text-sky-700',
            linkText: 'text-sky-600', linkHover: 'hover:text-sky-700', linkRing: 'focus:ring-sky-300',
            listDisc: 'text-sky-600'
        },
        dark: {
            blockBg: 'bg-slate-800', textColor: 'text-slate-200', borderColor: 'border-slate-600',
            buttonBg: 'bg-slate-700', buttonHoverBg: 'hover:bg-slate-600', buttonRing: 'focus:ring-slate-500', buttonText: 'text-white',
            cardBg: 'bg-slate-700', cardBorder: 'border-slate-500', cardImage: 'https://placehold.co/600x400/334155/E2E8F0?text=Dark+Project',
            skillTagBg: 'bg-slate-600', skillTagText: 'text-slate-100',
            interactiveBg: 'bg-slate-600', interactiveText: 'text-slate-100',
            linkText: 'text-sky-400', linkHover: 'hover:text-sky-300', linkRing: 'focus:ring-sky-500',
            listDisc: 'text-sky-400'
        },
        professional: {
            blockBg: 'bg-blue-50', textColor: 'text-blue-900', borderColor: 'border-blue-500',
            buttonBg: 'bg-blue-600', buttonHoverBg: 'hover:bg-blue-700', buttonRing: 'focus:ring-blue-400', buttonText: 'text-white',
            cardBg: 'bg-white', cardBorder: 'border-blue-300', cardImage: 'https://placehold.co/600x400/2563eb/FFFFFF?text=Pro+Project',
            skillTagBg: 'bg-blue-200', skillTagText: 'text-blue-700',
            interactiveBg: 'bg-blue-100', interactiveText: 'text-blue-700',
            linkText: 'text-blue-700', linkHover: 'hover:text-blue-800', linkRing: 'focus:ring-blue-300',
            listDisc: 'text-blue-700'
        }
    };

    function applyTheme(themeName) {
        const currentTheme = themes[themeName];
        if (!currentTheme || !themeBlock) return;

        // Reset by removing all theme-specific classes from themeBlock first
        Object.values(themes).forEach(th => {
            themeBlock.classList.remove(th.blockBg, th.textColor);
        });
        themeBlock.classList.add(currentTheme.blockBg, currentTheme.textColor);

        // Theme Intro Block
        if (elementsToTheme.introBlock) {
            elementsToTheme.introBlock.className = \`p-6 rounded-lg shadow-sm border-l-4 \${currentTheme.borderColor}\`; // Base classes + border
            elementsToTheme.introHeading.className = \`text-xl font-semibold mb-3 \${currentTheme.textColor}\`;
            elementsToTheme.introText.className = \`mb-4 leading-relaxed \${currentTheme.textColor}\`;
            elementsToTheme.introButton.className = \`px-4 py-2 text-sm font-medium rounded-md shadow transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 \${currentTheme.buttonBg} \${currentTheme.buttonHoverBg} \${currentTheme.buttonRing} \${currentTheme.buttonText}\`;
        }
        
        // Theme Project Card
        if (elementsToTheme.projectCard) {
            elementsToTheme.projectCard.className = \`rounded-lg shadow-md overflow-hidden flex flex-col \${currentTheme.cardBg}\`;
            elementsToTheme.projectImage.src = currentTheme.cardImage;
            elementsToTheme.projectContent.className = \`p-6 flex flex-col flex-grow border-t \${currentTheme.cardBorder}\`;
            elementsToTheme.projectHeading.className = \`text-lg font-semibold mb-2 \${currentTheme.textColor}\`;
            elementsToTheme.projectText.className = \`text-sm mb-4 flex-grow \${currentTheme.textColor}\`;
            elementsToTheme.projectSkills.forEach(tag => {
                tag.className = \`skill-tag inline-block px-2 py-0.5 rounded-full \${currentTheme.skillTagBg} \${currentTheme.skillTagText}\`;
            });
            elementsToTheme.projectLink.className = \`text-sm font-medium hover:underline focus:outline-none focus:ring-1 rounded px-1 \${currentTheme.linkText} \${currentTheme.linkHover} \${currentTheme.linkRing}\`;
        }

        // Theme Demo Card (similar logic to project card)
        if (elementsToTheme.demoCard) {
            elementsToTheme.demoCard.className = \`rounded-lg shadow-md overflow-hidden flex flex-col \${currentTheme.cardBg}\`;
            elementsToTheme.demoInteractiveArea.className = \`h-40 flex items-center justify-center \${currentTheme.interactiveBg}\`;
            elementsToTheme.demoInteractiveArea.querySelector('span').className = \`text-lg font-medium italic \${currentTheme.interactiveText}\`;
            elementsToTheme.demoContent.className = \`p-6 flex flex-col flex-grow border-t \${currentTheme.cardBorder}\`;
            elementsToTheme.demoHeading.className = \`text-lg font-semibold mb-2 \${currentTheme.textColor}\`;
            elementsToTheme.demoText.className = \`text-sm mb-4 flex-grow \${currentTheme.textColor}\`;
            elementsToTheme.demoLink.className = \`text-sm font-medium hover:underline focus:outline-none focus:ring-1 rounded px-1 \${currentTheme.linkText} \${currentTheme.linkHover} \${currentTheme.linkRing}\`;
        }
        
        // Theme Features Block
        if (elementsToTheme.featuresBlock) {
            elementsToTheme.featuresBlock.className = \`p-6 rounded-lg shadow-sm border-l-4 \${currentTheme.borderColor}\`;
            elementsToTheme.featuresHeading.className = \`text-xl font-semibold mb-3 \${currentTheme.textColor}\`;
            elementsToTheme.featuresList.className = \`list-disc list-inside space-y-1 text-sm leading-relaxed \${currentTheme.textColor}\`;
            // For list item disc color (might need more specific targeting or CSS var)
            Array.from(elementsToTheme.featuresList.children).forEach(li => {
                 // This is a simplification; true disc color often needs ::marker or CSS vars
                 li.style.color = themes[themeName].listDiscRaw || ''; // Assuming listDiscRaw is the actual color value
            });
        }
    }

    document.getElementById('playful-theme-btn')?.addEventListener('click', () => applyTheme('playful'));
    document.getElementById('dark-theme-btn')?.addEventListener('click', () => applyTheme('dark'));
    document.getElementById('professional-theme-btn')?.addEventListener('click', () => applyTheme('professional'));

    // Apply a default theme on load
    applyTheme('playful'); 
});""","This conceptual JavaScript sets up event listeners for the theme buttons. When a button is clicked, the `applyTheme` function is called. This function would typically update CSS classes on the main `theme-block` and other targeted elements, or modify CSS custom properties to reflect the chosen theme's styles (backgrounds, text colors, borders, etc.). The example uses Tailwind-like class names for demonstration."
"colour-theme-switcher-demo","Colour Theme Switcher Demo","Demonstration of dynamic theme switching using CSS and JavaScript.","theme switcher, css themes, javascript, dark mode, light mode, web design demo",8,"CSS Styling for Themes","The visual appearance of each theme is defined in CSS. This can be done by defining sets of styles for theme-specific classes that are toggled by JavaScript, or by using CSS Custom Properties (variables) that JavaScript updates. For a framework like Tailwind CSS, theme changes might involve changing classes on a high-level container or recompiling with different theme configurations.","css","Conceptual CSS for Themes","""/* Conceptual CSS for themes (simplified) */

/* Using CSS Custom Properties (Variables) */
/* :root { --theme-bg-color: #ffffff; --theme-text-color: #333333; --theme-border-color: #dddddd; --theme-button-bg: #007bff; ... } */

/* .theme-playful { --theme-bg-color: #e0f7fa; --theme-text-color: #00796b; ... } */
/* .theme-dark { --theme-bg-color: #333333; --theme-text-color: #eeeeee; ... } */
/* .theme-professional { --theme-bg-color: #e3f2fd; --theme-text-color: #1e88e5; ... } */

/* Example usage: */
/* #theme-block { background-color: var(--theme-bg-color); color: var(--theme-text-color); } */
/* #intro-block { border-left-color: var(--theme-border-color); } */


/* Alternatively, using distinct classes (if not using CSS variables extensively or with Tailwind) */
/* Playful Theme */
/* .playful-theme #theme-block { background-color: #e0f7fa; color: #00796b; } */
/* .playful-theme #intro-block { border-color: #4dd0e1; } */
/* .playful-theme #intro-button { background-color: #26c6da; color: white; } */
/* ... other playful styles ... */

/* Dark Theme */
/* .dark-theme #theme-block { background-color: #263238; color: #eceff1; } */
/* .dark-theme #intro-block { border-color: #546e7a; } */
/* .dark-theme #intro-button { background-color: #455a64; color: white; } */
/* ... other dark styles ... */

/* Professional Theme */
/* .professional-theme #theme-block { background-color: #e3f2fd; color: #1565c0; } */
/* .professional-theme #intro-block { border-color: #64b5f6; } */
/* .professional-theme #intro-button { background-color: #1e88e5; color: white; } */
/* ... other professional styles ... */

/* The provided HTML uses Tailwind CSS classes. 
   In a Tailwind setup, JavaScript would primarily add/remove classes 
   that are pre-defined in the Tailwind configuration or utility classes.
   For example, for the theme-block:
   JS might remove 'bg-sky-100 text-sky-800' and add 'bg-slate-800 text-slate-200'
   Or, more advanced, use CSS variables with Tailwind:
   https://tailwindcss.com/docs/customizing-colors#using-css-variables
*/
#theme-block {
    /* Base transition for smooth theme changes */
    transition-property: background-color, color, border-color;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
}
/* Individual elements would also have transitions on their specific themed properties */
""","CSS is responsible for defining the actual styles (colors, fonts, borders, etc.) for each theme. JavaScript's role is to apply the correct set of styles when a theme is selected. Using CSS custom properties can make this very efficient, as JavaScript only needs to update the variable values at a root level."